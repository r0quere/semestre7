
test_capt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d74  08008d74  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  08008d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200004bc  08009238  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08009238  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001724a  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002459  00000000  00000000  00037736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017950  00000000  00000000  0003b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011714  00000000  00000000  00053120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f481  00000000  00000000  00064834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  000f3d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004bc 	.word	0x200004bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ce4 	.word	0x08008ce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c0 	.word	0x200004c0
 80001dc:	08008ce4 	.word	0x08008ce4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	RangingConfig_e RangingConfig = LONG_RANGE;
 800058e:	2300      	movs	r3, #0
 8000590:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f005 fd05 	bl	8005fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f847 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f907 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f8db 	bl	8000758 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a2:	f000 f8ab 	bl	80006fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  XNUCLEO53L0A1_hi2c = hi2c1;
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <main+0x80>)
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <main+0x84>)
 80005aa:	4610      	mov	r0, r2
 80005ac:	4619      	mov	r1, r3
 80005ae:	2354      	movs	r3, #84	; 0x54
 80005b0:	461a      	mov	r2, r3
 80005b2:	f007 ff59 	bl	8008468 <memcpy>
  	  ResetAndDetectSensor(0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f005 fcd4 	bl	8005f64 <ResetAndDetectSensor>
  /* Reset and Detect all sensors */
  	  	  ResetAndDetectSensor(0);
 80005bc:	2000      	movs	r0, #0
 80005be:	f005 fcd1 	bl	8005f64 <ResetAndDetectSensor>
  	  SetupSingleShot(RangingConfig);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 fbb1 	bl	8005d2c <SetupSingleShot>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  /* only one sensor */
	  /* Call All-In-One blocking API function */
	  	  status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],
 80005ca:	4911      	ldr	r1, [pc, #68]	; (8000610 <main+0x88>)
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <main+0x8c>)
 80005ce:	f001 fd7b 	bl	80020c8 <VL53L0X_PerformSingleRangingMeasurement>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0x90>)
 80005d8:	601a      	str	r2, [r3, #0]
	  			  	  	  	  	  	  	  	  	  &RangingMeasurementData);
	  	  position_courante=RangingMeasurementData.RangeMilliMeter;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <main+0x88>)
 80005dc:	891a      	ldrh	r2, [r3, #8]
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <main+0x94>)
 80005e0:	801a      	strh	r2, [r3, #0]



	  	sprintf(msg3, "%hu\r\n",position_courante);
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x94>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	490d      	ldr	r1, [pc, #52]	; (8000620 <main+0x98>)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0x9c>)
 80005ec:	f007 ff52 	bl	8008494 <siprintf>


	  	  if( status ==0 ){
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <main+0x90>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <main+0x76>
	  		  trace_printf("\r\n%d", position_courante);




	  		F411_SetDisplayString(msg3);
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0x9c>)
 80005fa:	f005 fadb 	bl	8005bb4 <F411_SetDisplayString>


	  // Sensor_SetNewRange(&VL53L0XDevs[0],&RangingMeasurementData);
	  }
	  	HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f005 fd3f 	bl	8006084 <HAL_Delay>
	  	  status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],
 8000606:	e7e0      	b.n	80005ca <main+0x42>
 8000608:	200005d0 	.word	0x200005d0
 800060c:	200004f4 	.word	0x200004f4
 8000610:	20000624 	.word	0x20000624
 8000614:	200002c0 	.word	0x200002c0
 8000618:	200004d8 	.word	0x200004d8
 800061c:	200004dc 	.word	0x200004dc
 8000620:	08008cfc 	.word	0x08008cfc
 8000624:	200004f0 	.word	0x200004f0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 ff24 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 ff26 	bl	8007500 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 f8e7 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 f988 	bl	80079f0 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f8d1 	bl	800088c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f005 ff4b 	bl	80065d4 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8a2 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200004f4 	.word	0x200004f4
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f007 fb2a 	bl	8007de8 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f877 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000548 	.word	0x20000548
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_GPIO_Init+0xd4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <MX_GPIO_Init+0xd4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_GPIO_Init+0xd4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0xd4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0xd4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0xd4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_GPIO_Init+0xd4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_GPIO_Init+0xd4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RESET_VL53_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_GPIO_Init+0xd8>)
 800083a:	f005 feb1 	bl	80065a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000844:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0xdc>)
 8000856:	f005 fd1f 	bl	8006298 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RESET_VL53_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RESET_VL53_Pin;
 800085a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0xd8>)
 8000874:	f005 fd10 	bl	8006298 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40020800 	.word	0x40020800

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008d6:	2007      	movs	r0, #7
 80008d8:	f005 fcaa 	bl	8006230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_I2C_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12c      	bne.n	8000964 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_I2C_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_I2C_MspInit+0x88>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_I2C_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092c:	2312      	movs	r3, #18
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000938:	2304      	movs	r3, #4
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <HAL_I2C_MspInit+0x8c>)
 8000944:	f005 fca8 	bl	8006298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_I2C_MspInit+0x88>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_I2C_MspInit+0x88>)
 8000952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_I2C_MspInit+0x88>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40005400 	.word	0x40005400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_UART_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12b      	bne.n	80009f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_UART_MspInit+0x8c>)
 80009ee:	f005 fc53 	bl	8006298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f005 faf6 	bl	8006044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f007 fcc2 	bl	8008414 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	200004e0 	.word	0x200004e0
 8000ac4:	20000658 	.word	0x20000658

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f007 fc81 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd33 	bl	8000588 <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8000b30:	08008d7c 	.word	0x08008d7c
  ldr r2, =_sbss
 8000b34:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8000b38:	20000654 	.word	0x20000654

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>

08000b3e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000b4c:	6839      	ldr	r1, [r7, #0]
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f001 fcbb 	bl	80024ca <VL53L0X_get_offset_calibration_data_micro_meter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	218a      	movs	r1, #138	; 0x8a
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f004 feb4 	bl	80058ec <VL53L0X_WrByte>
 8000b84:	4603      	mov	r3, r0
 8000b86:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b096      	sub	sp, #88	; 0x58
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000ba2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d107      	bne.n	8000bba <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2188      	movs	r1, #136	; 0x88
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f004 fe9c 	bl	80058ec <VL53L0X_WrByte>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bd2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a9e      	ldr	r2, [pc, #632]	; (8000e54 <VL53L0X_DataInit+0x2c0>)
 8000bda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a9d      	ldr	r2, [pc, #628]	; (8000e58 <VL53L0X_DataInit+0x2c4>)
 8000be2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 fab4 	bl	8001160 <VL53L0X_GetDeviceParameters>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000bfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d112      	bne.n	8000c2c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000c06:	2300      	movs	r3, #0
 8000c08:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 0410 	add.w	r4, r3, #16
 8000c14:	f107 0510 	add.w	r5, r7, #16
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2264      	movs	r2, #100	; 0x64
 8000c30:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000c3a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000c4e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f004 fe44 	bl	80058ec <VL53L0X_WrByte>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000c72:	2201      	movs	r2, #1
 8000c74:	21ff      	movs	r1, #255	; 0xff
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f004 fe38 	bl	80058ec <VL53L0X_WrByte>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000c84:	4313      	orrs	r3, r2
 8000c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f004 fe2c 	bl	80058ec <VL53L0X_WrByte>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8000ca2:	f107 030f 	add.w	r3, r7, #15
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2191      	movs	r1, #145	; 0x91
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f004 fea0 	bl	80059f0 <VL53L0X_RdByte>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2100      	movs	r1, #0
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f004 fe0e 	bl	80058ec <VL53L0X_WrByte>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	21ff      	movs	r1, #255	; 0xff
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f004 fe02 	bl	80058ec <VL53L0X_WrByte>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f004 fdf6 	bl	80058ec <VL53L0X_WrByte>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	653b      	str	r3, [r7, #80]	; 0x50
 8000d12:	e014      	b.n	8000d3e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8000d14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d114      	bne.n	8000d46 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fd27 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d32:	4313      	orrs	r3, r2
 8000d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8000d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d40:	2b05      	cmp	r3, #5
 8000d42:	dde7      	ble.n	8000d14 <VL53L0X_DataInit+0x180>
 8000d44:	e000      	b.n	8000d48 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8000d46:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8000d48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d107      	bne.n	8000d60 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000d50:	2200      	movs	r2, #0
 8000d52:	2102      	movs	r1, #2
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fd0f 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000d60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d107      	bne.n	8000d78 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fd03 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000d78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d107      	bne.n	8000d90 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000d80:	2200      	movs	r2, #0
 8000d82:	2104      	movs	r1, #4
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 fcf7 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000d90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d107      	bne.n	8000da8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 fceb 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8000da8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d108      	bne.n	8000dc2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000db0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000db4:	2100      	movs	r1, #0
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fd8e 	bl	80018d8 <VL53L0X_SetLimitCheckValue>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8000dc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d108      	bne.n	8000ddc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dce:	2101      	movs	r1, #1
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fd81 	bl	80018d8 <VL53L0X_SetLimitCheckValue>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000ddc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d108      	bne.n	8000df6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000de4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000de8:	2102      	movs	r1, #2
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fd74 	bl	80018d8 <VL53L0X_SetLimitCheckValue>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000df6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d107      	bne.n	8000e0e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2103      	movs	r1, #3
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fd68 	bl	80018d8 <VL53L0X_SetLimitCheckValue>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000e0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	2101      	movs	r1, #1
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f004 fd62 	bl	80058ec <VL53L0X_WrByte>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8000e36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8000e46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3758      	adds	r7, #88	; 0x58
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bdb0      	pop	{r4, r5, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	00016b85 	.word	0x00016b85
 8000e58:	000970a4 	.word	0x000970a4

08000e5c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b09e      	sub	sp, #120	; 0x78
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2240      	movs	r2, #64	; 0x40
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 fb06 	bl	8008484 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f002 fa6b 	bl	8003376 <VL53L0X_get_info_from_device>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8000eac:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8000eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8000eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d80d      	bhi.n	8000edc <VL53L0X_StaticInit+0x80>
 8000ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d102      	bne.n	8000ece <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8000ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	d806      	bhi.n	8000edc <VL53L0X_StaticInit+0x80>
 8000ece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10e      	bne.n	8000ef4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8000ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ed8:	2b0c      	cmp	r3, #12
 8000eda:	d90b      	bls.n	8000ef4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8000edc:	f107 0218 	add.w	r2, r7, #24
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f001 fcea 	bl	80028c0 <VL53L0X_perform_ref_spad_management>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000ef2:	e009      	b.n	8000f08 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8000ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ef8:	461a      	mov	r2, r3
 8000efa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f001 feeb 	bl	8002cd8 <VL53L0X_set_reference_spads>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8000f08:	4b94      	ldr	r3, [pc, #592]	; (800115c <VL53L0X_StaticInit+0x300>)
 8000f0a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8000f0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8000f1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8000f1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d104      	bne.n	8000f30 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	e001      	b.n	8000f34 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8000f30:	4b8a      	ldr	r3, [pc, #552]	; (800115c <VL53L0X_StaticInit+0x300>)
 8000f32:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8000f34:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d106      	bne.n	8000f4a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8000f3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f003 fdbe 	bl	8004ac0 <VL53L0X_load_tuning_settings>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8000f4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8000f52:	2300      	movs	r3, #0
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2304      	movs	r3, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 f8e3 	bl	8002128 <VL53L0X_SetGpioConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f68:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d121      	bne.n	8000fb4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000f70:	2201      	movs	r2, #1
 8000f72:	21ff      	movs	r1, #255	; 0xff
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f004 fcb9 	bl	80058ec <VL53L0X_WrByte>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8000f80:	f107 031a 	add.w	r3, r7, #26
 8000f84:	461a      	mov	r2, r3
 8000f86:	2184      	movs	r1, #132	; 0x84
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f004 fd5b 	bl	8005a44 <VL53L0X_RdWord>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f96:	4313      	orrs	r3, r2
 8000f98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	21ff      	movs	r1, #255	; 0xff
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f004 fca3 	bl	80058ec <VL53L0X_WrByte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000fb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8000fbc:	8b7b      	ldrh	r3, [r7, #26]
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8000fc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d108      	bne.n	8000fe2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f8c2 	bl	8001160 <VL53L0X_GetDeviceParameters>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8000fe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d110      	bne.n	800100c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8000fea:	f107 0319 	add.w	r3, r7, #25
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f984 	bl	80012fe <VL53L0X_GetFractionEnable>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8000ffc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001004:	7e7a      	ldrb	r2, [r7, #25]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800100c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10e      	bne.n	8001032 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f103 0410 	add.w	r4, r3, #16
 800101a:	f107 051c 	add.w	r5, r7, #28
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800102e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001032:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001036:	2b00      	cmp	r3, #0
 8001038:	d111      	bne.n	800105e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800103a:	f107 0319 	add.w	r3, r7, #25
 800103e:	461a      	mov	r2, r3
 8001040:	2101      	movs	r1, #1
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f004 fcd4 	bl	80059f0 <VL53L0X_RdByte>
 8001048:	4603      	mov	r3, r0
 800104a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800104e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8001056:	7e7a      	ldrb	r2, [r7, #25]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800105e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001062:	2b00      	cmp	r3, #0
 8001064:	d107      	bne.n	8001076 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f9bc 	bl	80013e8 <VL53L0X_SetSequenceStepEnable>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001076:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f9b0 	bl	80013e8 <VL53L0X_SetSequenceStepEnable>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800108e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800109e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80010a6:	f107 0313 	add.w	r3, r7, #19
 80010aa:	461a      	mov	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f982 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80010ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80010c2:	7cfa      	ldrb	r2, [r7, #19]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80010ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80010d2:	f107 0313 	add.w	r3, r7, #19
 80010d6:	461a      	mov	r2, r3
 80010d8:	2101      	movs	r1, #1
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f96c 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80010e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80010ee:	7cfa      	ldrb	r2, [r7, #19]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80010f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	461a      	mov	r2, r3
 8001104:	2103      	movs	r1, #3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f002 feb6 	bl	8003e78 <get_sequence_step_timeout>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001112:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001122:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	461a      	mov	r2, r3
 8001130:	2104      	movs	r1, #4
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f002 fea0 	bl	8003e78 <get_sequence_step_timeout>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800113e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800114e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8001152:	4618      	mov	r0, r3
 8001154:	3770      	adds	r7, #112	; 0x70
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	20000004 	.word	0x20000004

08001160 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f8b0 	bl	80012d8 <VL53L0X_GetDeviceMode>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3308      	adds	r3, #8
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fa78 	bl	8001680 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d107      	bne.n	80011ba <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3310      	adds	r3, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 faae 	bl	8001712 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3314      	adds	r3, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fcb8 	bl	8000b3e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d134      	bne.n	8001244 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	e02a      	b.n	8001236 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80011e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12a      	bne.n	800123e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3308      	adds	r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	3304      	adds	r3, #4
 80011f8:	461a      	mov	r2, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fbce 	bl	800199c <VL53L0X_GetLimitCheckValue>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	4313      	orrs	r3, r2
 8001208:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d117      	bne.n	8001242 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	b299      	uxth	r1, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3318      	adds	r3, #24
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	461a      	mov	r2, r3
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fb35 	bl	8001890 <VL53L0X_GetLimitCheckEnable>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4313      	orrs	r3, r2
 800122e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3301      	adds	r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b05      	cmp	r3, #5
 800123a:	ddd1      	ble.n	80011e0 <VL53L0X_GetDeviceParameters+0x80>
 800123c:	e002      	b.n	8001244 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800123e:	bf00      	nop
 8001240:	e000      	b.n	8001244 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8001242:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d107      	bne.n	800125c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	333c      	adds	r3, #60	; 0x3c
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fc30 	bl	8001ab8 <VL53L0X_GetWrapAroundCheckEnable>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d107      	bne.n	8001274 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3304      	adds	r3, #4
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f879 	bl	8001362 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b15      	cmp	r3, #21
 8001294:	bf8c      	ite	hi
 8001296:	2201      	movhi	r2, #1
 8001298:	2200      	movls	r2, #0
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	2a00      	cmp	r2, #0
 800129e:	d10e      	bne.n	80012be <VL53L0X_SetDeviceMode+0x3e>
 80012a0:	2201      	movs	r2, #1
 80012a2:	409a      	lsls	r2, r3
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <VL53L0X_SetDeviceMode+0x54>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	741a      	strb	r2, [r3, #16]
		break;
 80012bc:	e001      	b.n	80012c2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80012be:	23f8      	movs	r3, #248	; 0xf8
 80012c0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	0030000b 	.word	0x0030000b

080012d8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7c1a      	ldrb	r2, [r3, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	2109      	movs	r1, #9
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f004 fb6d 	bl	80059f0 <VL53L0X_RdByte>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f003 fa26 	bl	800479e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f003 faf3 	bl	800495e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
 8001394:	4613      	mov	r3, r2
 8001396:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800139c:	78ba      	ldrb	r2, [r7, #2]
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f002 ff3b 	bl	800421e <VL53L0X_set_vcsel_pulse_period>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	460b      	mov	r3, r1
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4619      	mov	r1, r3
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f003 f9ad 	bl	8004730 <VL53L0X_get_vcsel_pulse_period>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80013da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	4613      	mov	r3, r2
 80013f6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001404:	f107 030f 	add.w	r3, r7, #15
 8001408:	461a      	mov	r2, r3
 800140a:	2101      	movs	r1, #1
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f004 faef 	bl	80059f0 <VL53L0X_RdByte>
 8001412:	4603      	mov	r3, r0
 8001414:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800141a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d15a      	bne.n	80014d8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8001422:	78bb      	ldrb	r3, [r7, #2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d12b      	bne.n	8001480 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	2b04      	cmp	r3, #4
 800142c:	d825      	bhi.n	800147a <VL53L0X_SetSequenceStepEnable+0x92>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001449 	.word	0x08001449
 8001438:	08001453 	.word	0x08001453
 800143c:	0800145d 	.word	0x0800145d
 8001440:	08001467 	.word	0x08001467
 8001444:	08001471 	.word	0x08001471
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001448:	7dbb      	ldrb	r3, [r7, #22]
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	75bb      	strb	r3, [r7, #22]
				break;
 8001450:	e043      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8001452:	7dbb      	ldrb	r3, [r7, #22]
 8001454:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001458:	75bb      	strb	r3, [r7, #22]
				break;
 800145a:	e03e      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	75bb      	strb	r3, [r7, #22]
				break;
 8001464:	e039      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8001466:	7dbb      	ldrb	r3, [r7, #22]
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	75bb      	strb	r3, [r7, #22]
				break;
 800146e:	e034      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001476:	75bb      	strb	r3, [r7, #22]
				break;
 8001478:	e02f      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800147a:	23fc      	movs	r3, #252	; 0xfc
 800147c:	75fb      	strb	r3, [r7, #23]
 800147e:	e02c      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b04      	cmp	r3, #4
 8001484:	d825      	bhi.n	80014d2 <VL53L0X_SetSequenceStepEnable+0xea>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	080014a1 	.word	0x080014a1
 8001490:	080014ab 	.word	0x080014ab
 8001494:	080014b5 	.word	0x080014b5
 8001498:	080014bf 	.word	0x080014bf
 800149c:	080014c9 	.word	0x080014c9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80014a0:	7dbb      	ldrb	r3, [r7, #22]
 80014a2:	f023 0310 	bic.w	r3, r3, #16
 80014a6:	75bb      	strb	r3, [r7, #22]
				break;
 80014a8:	e017      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80014aa:	7dbb      	ldrb	r3, [r7, #22]
 80014ac:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80014b0:	75bb      	strb	r3, [r7, #22]
				break;
 80014b2:	e012      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	f023 0304 	bic.w	r3, r3, #4
 80014ba:	75bb      	strb	r3, [r7, #22]
				break;
 80014bc:	e00d      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80014be:	7dbb      	ldrb	r3, [r7, #22]
 80014c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014c4:	75bb      	strb	r3, [r7, #22]
				break;
 80014c6:	e008      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80014c8:	7dbb      	ldrb	r3, [r7, #22]
 80014ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ce:	75bb      	strb	r3, [r7, #22]
				break;
 80014d0:	e003      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80014d2:	23fc      	movs	r3, #252	; 0xfc
 80014d4:	75fb      	strb	r3, [r7, #23]
 80014d6:	e000      	b.n	80014da <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80014d8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	7dba      	ldrb	r2, [r7, #22]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d01e      	beq.n	8001520 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80014e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80014ea:	7dbb      	ldrb	r3, [r7, #22]
 80014ec:	461a      	mov	r2, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f004 f9fb 	bl	80058ec <VL53L0X_WrByte>
 80014f6:	4603      	mov	r3, r0
 80014f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80014fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7dba      	ldrb	r2, [r7, #22]
 8001506:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800150a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff0e 	bl	800133c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001520:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	2b04      	cmp	r3, #4
 800154c:	d836      	bhi.n	80015bc <sequence_step_enabled+0x90>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <sequence_step_enabled+0x28>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	08001569 	.word	0x08001569
 8001558:	0800157b 	.word	0x0800157b
 800155c:	0800158d 	.word	0x0800158d
 8001560:	0800159f 	.word	0x0800159f
 8001564:	080015b1 	.word	0x080015b1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001568:	7abb      	ldrb	r3, [r7, #10]
 800156a:	111b      	asrs	r3, r3, #4
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	701a      	strb	r2, [r3, #0]
		break;
 8001578:	e022      	b.n	80015c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800157a:	7abb      	ldrb	r3, [r7, #10]
 800157c:	10db      	asrs	r3, r3, #3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	701a      	strb	r2, [r3, #0]
		break;
 800158a:	e019      	b.n	80015c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800158c:	7abb      	ldrb	r3, [r7, #10]
 800158e:	109b      	asrs	r3, r3, #2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	701a      	strb	r2, [r3, #0]
		break;
 800159c:	e010      	b.n	80015c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800159e:	7abb      	ldrb	r3, [r7, #10]
 80015a0:	119b      	asrs	r3, r3, #6
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	701a      	strb	r2, [r3, #0]
		break;
 80015ae:	e007      	b.n	80015c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80015b0:	7abb      	ldrb	r3, [r7, #10]
 80015b2:	09db      	lsrs	r3, r3, #7
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	701a      	strb	r2, [r3, #0]
		break;
 80015ba:	e001      	b.n	80015c0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80015bc:	23fc      	movs	r3, #252	; 0xfc
 80015be:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80015c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80015e2:	f107 030e 	add.w	r3, r7, #14
 80015e6:	461a      	mov	r2, r3
 80015e8:	2101      	movs	r1, #1
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f004 fa00 	bl	80059f0 <VL53L0X_RdByte>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80015f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80015fc:	7bba      	ldrb	r2, [r7, #14]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff92 	bl	800152c <sequence_step_enabled>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001614:	7bba      	ldrb	r2, [r7, #14]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3302      	adds	r3, #2
 800161a:	2101      	movs	r1, #1
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff85 	bl	800152c <sequence_step_enabled>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800162e:	7bba      	ldrb	r2, [r7, #14]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	2102      	movs	r1, #2
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff78 	bl	800152c <sequence_step_enabled>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8001648:	7bba      	ldrb	r2, [r7, #14]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3303      	adds	r3, #3
 800164e:	2103      	movs	r1, #3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff6b 	bl	800152c <sequence_step_enabled>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8001662:	7bba      	ldrb	r2, [r7, #14]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	2104      	movs	r1, #4
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff5e 	bl	800152c <sequence_step_enabled>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	461a      	mov	r2, r3
 8001694:	21f8      	movs	r1, #248	; 0xf8
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f004 f9d4 	bl	8005a44 <VL53L0X_RdWord>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80016a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d108      	bne.n	80016ba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	461a      	mov	r2, r3
 80016ae:	2104      	movs	r1, #4
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f004 f9ff 	bl	8005ab4 <VL53L0X_RdDWord>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80016c2:	89bb      	ldrh	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	89ba      	ldrh	r2, [r7, #12]
 80016cc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7f1b      	ldrb	r3, [r3, #28]
 80016fa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	7bba      	ldrb	r2, [r7, #14]
 8001700:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001720:	f107 030e 	add.w	r3, r7, #14
 8001724:	461a      	mov	r2, r3
 8001726:	2120      	movs	r1, #32
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f004 f98b 	bl	8005a44 <VL53L0X_RdWord>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	771a      	strb	r2, [r3, #28]
 8001752:	e00b      	b.n	800176c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800176c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001788:	2300      	movs	r3, #0
 800178a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d902      	bls.n	80017a4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800179e:	23fc      	movs	r3, #252	; 0xfc
 80017a0:	75fb      	strb	r3, [r7, #23]
 80017a2:	e05b      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73bb      	strb	r3, [r7, #14]
 80017b6:	e00a      	b.n	80017ce <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	330c      	adds	r3, #12
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d841      	bhi.n	8001858 <VL53L0X_SetLimitCheckEnable+0xe0>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <VL53L0X_SetLimitCheckEnable+0x64>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	080017ff 	.word	0x080017ff
 80017e4:	08001815 	.word	0x08001815
 80017e8:	0800181f 	.word	0x0800181f
 80017ec:	08001829 	.word	0x08001829
 80017f0:	08001841 	.word	0x08001841

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80017fc:	e02e      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	2144      	movs	r1, #68	; 0x44
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f004 f893 	bl	8005934 <VL53L0X_WrWord>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]

			break;
 8001812:	e023      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800181c:	e01e      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8001826:	e019      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	22fe      	movs	r2, #254	; 0xfe
 8001832:	2160      	movs	r1, #96	; 0x60
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f004 f8a7 	bl	8005988 <VL53L0X_UpdateByte>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800183e:	e00d      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001846:	7b7b      	ldrb	r3, [r7, #13]
 8001848:	22ef      	movs	r2, #239	; 0xef
 800184a:	2160      	movs	r1, #96	; 0x60
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f004 f89b 	bl	8005988 <VL53L0X_UpdateByte>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001856:	e001      	b.n	800185c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001858:	23fc      	movs	r3, #252	; 0xfc
 800185a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800185c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10f      	bne.n	8001884 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001876:	e005      	b.n	8001884 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	460b      	mov	r3, r1
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d905      	bls.n	80018b4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80018a8:	23fc      	movs	r3, #252	; 0xfc
 80018aa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e008      	b.n	80018c6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80018b4:	897b      	ldrh	r3, [r7, #10]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018be:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7dba      	ldrb	r2, [r7, #22]
 80018c4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80018c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	460b      	mov	r3, r1
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018f4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80018f6:	7dbb      	ldrb	r3, [r7, #22]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80018fc:	897b      	ldrh	r3, [r7, #10]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	330c      	adds	r3, #12
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e040      	b.n	800198e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800190c:	897b      	ldrh	r3, [r7, #10]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d830      	bhi.n	8001974 <VL53L0X_SetLimitCheckValue+0x9c>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <VL53L0X_SetLimitCheckValue+0x40>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001931 	.word	0x08001931
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194f 	.word	0x0800194f
 8001924:	08001957 	.word	0x08001957
 8001928:	0800195f 	.word	0x0800195f
 800192c:	0800195f 	.word	0x0800195f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001936:	e01f      	b.n	8001978 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	2144      	movs	r1, #68	; 0x44
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f003 fff6 	bl	8005934 <VL53L0X_WrWord>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800194c:	e014      	b.n	8001978 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001954:	e010      	b.n	8001978 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800195c:	e00c      	b.n	8001978 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	2164      	movs	r1, #100	; 0x64
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f003 ffe3 	bl	8005934 <VL53L0X_WrWord>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001972:	e001      	b.n	8001978 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001974:	23fc      	movs	r3, #252	; 0xfc
 8001976:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d106      	bne.n	800198e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	330c      	adds	r3, #12
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800198e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop

0800199c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	460b      	mov	r3, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d847      	bhi.n	8001a48 <VL53L0X_GetLimitCheckValue+0xac>
 80019b8:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <VL53L0X_GetLimitCheckValue+0x24>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019e5 	.word	0x080019e5
 80019c8:	08001a0b 	.word	0x08001a0b
 80019cc:	08001a17 	.word	0x08001a17
 80019d0:	08001a23 	.word	0x08001a23
 80019d4:	08001a23 	.word	0x08001a23

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	77bb      	strb	r3, [r7, #30]
		break;
 80019e2:	e033      	b.n	8001a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80019e4:	f107 0316 	add.w	r3, r7, #22
 80019e8:	461a      	mov	r2, r3
 80019ea:	2144      	movs	r1, #68	; 0x44
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f004 f829 	bl	8005a44 <VL53L0X_RdWord>
 80019f2:	4603      	mov	r3, r0
 80019f4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80019f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80019fe:	8afb      	ldrh	r3, [r7, #22]
 8001a00:	025b      	lsls	r3, r3, #9
 8001a02:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	77bb      	strb	r3, [r7, #30]
		break;
 8001a08:	e020      	b.n	8001a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77bb      	strb	r3, [r7, #30]
		break;
 8001a14:	e01a      	b.n	8001a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	77bb      	strb	r3, [r7, #30]
		break;
 8001a20:	e014      	b.n	8001a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001a22:	f107 0316 	add.w	r3, r7, #22
 8001a26:	461a      	mov	r2, r3
 8001a28:	2164      	movs	r1, #100	; 0x64
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f004 f80a 	bl	8005a44 <VL53L0X_RdWord>
 8001a30:	4603      	mov	r3, r0
 8001a32:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001a34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001a3c:	8afb      	ldrh	r3, [r7, #22]
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	77bb      	strb	r3, [r7, #30]
		break;
 8001a46:	e001      	b.n	8001a4c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a48:	23fc      	movs	r3, #252	; 0xfc
 8001a4a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d12a      	bne.n	8001aaa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001a54:	7fbb      	ldrb	r3, [r7, #30]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d124      	bne.n	8001aa4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d110      	bne.n	8001a82 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001a80:	e013      	b.n	8001aaa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001aa2:	e002      	b.n	8001aaa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop

08001ab8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001ac6:	f107 030e 	add.w	r3, r7, #14
 8001aca:	461a      	mov	r2, r3
 8001acc:	2101      	movs	r1, #1
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f003 ff8e 	bl	80059f0 <VL53L0X_RdByte>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10e      	bne.n	8001afe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001ae0:	7bba      	ldrb	r2, [r7, #14]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da03      	bge.n	8001af8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e002      	b.n	8001afe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001b28:	f107 030e 	add.w	r3, r7, #14
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fbd2 	bl	80012d8 <VL53L0X_GetDeviceMode>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d104      	bne.n	8001b50 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f898 	bl	8001c7c <VL53L0X_StartMeasurement>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d104      	bne.n	8001b62 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f001 fb3f 	bl	80031dc <VL53L0X_measurement_poll_for_completion>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001b94:	2301      	movs	r3, #1
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f001 fae1 	bl	8003162 <VL53L0X_perform_ref_calibration>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001bc6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001bc8:	7dbb      	ldrb	r3, [r7, #22]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d005      	beq.n	8001bda <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001bce:	7dbb      	ldrb	r3, [r7, #22]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d002      	beq.n	8001bda <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001bd4:	7dbb      	ldrb	r3, [r7, #22]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d147      	bne.n	8001c6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	f107 0210 	add.w	r2, r7, #16
 8001be2:	2101      	movs	r1, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fbc3 	bl	8002370 <VL53L0X_GetInterruptThresholds>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001bf4:	d803      	bhi.n	8001bfe <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001bf6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001bf8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001bfc:	d935      	bls.n	8001c6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d131      	bne.n	8001c6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001c0c:	491a      	ldr	r1, [pc, #104]	; (8001c78 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f002 ff56 	bl	8004ac0 <VL53L0X_load_tuning_settings>
 8001c14:	4603      	mov	r3, r0
 8001c16:	75fb      	strb	r3, [r7, #23]
 8001c18:	e027      	b.n	8001c6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	21ff      	movs	r1, #255	; 0xff
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f003 fe64 	bl	80058ec <VL53L0X_WrByte>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2170      	movs	r1, #112	; 0x70
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f003 fe5a 	bl	80058ec <VL53L0X_WrByte>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001c42:	2200      	movs	r2, #0
 8001c44:	21ff      	movs	r1, #255	; 0xff
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f003 fe50 	bl	80058ec <VL53L0X_WrByte>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f003 fe46 	bl	80058ec <VL53L0X_WrByte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8001c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200000f8 	.word	0x200000f8

08001c7c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001c8c:	f107 030e 	add.w	r3, r7, #14
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fb20 	bl	80012d8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f003 fe25 	bl	80058ec <VL53L0X_WrByte>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	21ff      	movs	r1, #255	; 0xff
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f003 fe1e 	bl	80058ec <VL53L0X_WrByte>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f003 fe17 	bl	80058ec <VL53L0X_WrByte>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2191      	movs	r1, #145	; 0x91
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f003 fe0d 	bl	80058ec <VL53L0X_WrByte>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f003 fe06 	bl	80058ec <VL53L0X_WrByte>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	21ff      	movs	r1, #255	; 0xff
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f003 fdff 	bl	80058ec <VL53L0X_WrByte>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f003 fdf8 	bl	80058ec <VL53L0X_WrByte>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d054      	beq.n	8001db0 <VL53L0X_StartMeasurement+0x134>
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	dc6c      	bgt.n	8001de4 <VL53L0X_StartMeasurement+0x168>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <VL53L0X_StartMeasurement+0x98>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d034      	beq.n	8001d7c <VL53L0X_StartMeasurement+0x100>
 8001d12:	e067      	b.n	8001de4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2100      	movs	r1, #0
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f003 fde7 	bl	80058ec <VL53L0X_WrByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8001d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d15d      	bne.n	8001dea <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8001d38:	f107 030d 	add.w	r3, r7, #13
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f003 fe55 	bl	80059f0 <VL53L0X_RdByte>
 8001d46:	4603      	mov	r3, r0
 8001d48:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8001d50:	7b7a      	ldrb	r2, [r7, #13]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	4013      	ands	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8001d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d6c:	d3e1      	bcc.n	8001d32 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d74:	d339      	bcc.n	8001dea <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8001d76:	23f9      	movs	r3, #249	; 0xf9
 8001d78:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8001d7a:	e036      	b.n	8001dea <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001d84:	2101      	movs	r1, #1
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ff12 	bl	8001bb0 <VL53L0X_CheckAndLoadInterruptSettings>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001d90:	2202      	movs	r2, #2
 8001d92:	2100      	movs	r1, #0
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f003 fda9 	bl	80058ec <VL53L0X_WrByte>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8001d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d123      	bne.n	8001dee <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001dae:	e01e      	b.n	8001dee <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001db8:	2101      	movs	r1, #1
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fef8 	bl	8001bb0 <VL53L0X_CheckAndLoadInterruptSettings>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f003 fd8f 	bl	80058ec <VL53L0X_WrByte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8001dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10b      	bne.n	8001df2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001de2:	e006      	b.n	8001df2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001de4:	23f8      	movs	r3, #248	; 0xf8
 8001de6:	75fb      	strb	r3, [r7, #23]
 8001de8:	e004      	b.n	8001df4 <VL53L0X_StartMeasurement+0x178>
		break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <VL53L0X_StartMeasurement+0x178>
		break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <VL53L0X_StartMeasurement+0x178>
		break;
 8001df2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001e14:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d112      	bne.n	8001e42 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fb1a 	bl	800245c <VL53L0X_GetInterruptMaskStatus>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d103      	bne.n	8001e3a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e01c      	b.n	8001e74 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e018      	b.n	8001e74 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8001e42:	f107 030d 	add.w	r3, r7, #13
 8001e46:	461a      	mov	r2, r3
 8001e48:	2114      	movs	r1, #20
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f003 fdd0 	bl	80059f0 <VL53L0X_RdByte>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10b      	bne.n	8001e74 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e002      	b.n	8001e74 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b096      	sub	sp, #88	; 0x58
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8001e90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e94:	230c      	movs	r3, #12
 8001e96:	2114      	movs	r1, #20
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f003 fcfb 	bl	8005894 <VL53L0X_ReadMulti>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8001ea4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 80d1 	bne.w	8002050 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8001eba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8001ed6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	025b      	lsls	r3, r3, #9
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ef2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8001ef4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8001f0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f0e:	025b      	lsls	r3, r3, #9
 8001f10:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8001f16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001f32:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8001f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8001f42:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8001f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8001f4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f54:	d046      	beq.n	8001fe4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8001f56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f58:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f64:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <VL53L0X_GetRangingMeasurementData+0x244>)
 8001f66:	fb82 1203 	smull	r1, r2, r2, r3
 8001f6a:	1192      	asrs	r2, r2, #6
 8001f6c:	17db      	asrs	r3, r3, #31
 8001f6e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8001f70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7f1b      	ldrb	r3, [r3, #28]
 8001f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8001f82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d02c      	beq.n	8001fe4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8001f8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001f8c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	121a      	asrs	r2, r3, #8
					<= 0) {
 8001f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10d      	bne.n	8001fb8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8001f9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8001fa4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8001fa8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001fac:	e016      	b.n	8001fdc <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8001fae:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8001fb2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001fb6:	e011      	b.n	8001fdc <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8001fb8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fbe:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8001fc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001fc4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8001fcc:	121b      	asrs	r3, r3, #8
 8001fce:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8001fd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8001fdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fe0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8001fe4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8001fec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8001ff8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	019b      	lsls	r3, r3, #6
 8002000:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	75da      	strb	r2, [r3, #23]
 8002006:	e006      	b.n	8002016 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800200e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002016:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800201a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800201e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f003 f9e5 	bl	80053fc <VL53L0X_get_pal_range_status>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800203a:	4313      	orrs	r3, r2
 800203c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002040:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002048:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002050:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12f      	bne.n	80020b8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f107 040c 	add.w	r4, r7, #12
 800205e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8002062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002066:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800206a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002072:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8002078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002080:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8002086:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800208c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8002092:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8002098:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800209e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80020a8:	f107 050c 	add.w	r5, r7, #12
 80020ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3750      	adds	r7, #80	; 0x50
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80020d6:	2100      	movs	r1, #0
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff f8d1 	bl	8001280 <VL53L0X_SetDeviceMode>
 80020de:	4603      	mov	r3, r0
 80020e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d104      	bne.n	80020f4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fd16 	bl	8001b1c <VL53L0X_PerformSingleMeasurement>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff febe 	bl	8001e80 <VL53L0X_GetRangingMeasurementData>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8002108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002110:	2100      	movs	r1, #0
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f962 	bl	80023dc <VL53L0X_ClearInterruptMask>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	70fb      	strb	r3, [r7, #3]
 800213a:	460b      	mov	r3, r1
 800213c:	70bb      	strb	r3, [r7, #2]
 800213e:	4613      	mov	r3, r2
 8002140:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800214c:	23f6      	movs	r3, #246	; 0xf6
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e107      	b.n	8002362 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002152:	78bb      	ldrb	r3, [r7, #2]
 8002154:	2b14      	cmp	r3, #20
 8002156:	d110      	bne.n	800217a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002158:	7e3b      	ldrb	r3, [r7, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800215e:	2310      	movs	r3, #16
 8002160:	73bb      	strb	r3, [r7, #14]
 8002162:	e001      	b.n	8002168 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8002164:	2301      	movs	r3, #1
 8002166:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	461a      	mov	r2, r3
 800216c:	2184      	movs	r1, #132	; 0x84
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f003 fbbc 	bl	80058ec <VL53L0X_WrByte>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e0f3      	b.n	8002362 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800217a:	78bb      	ldrb	r3, [r7, #2]
 800217c:	2b15      	cmp	r3, #21
 800217e:	f040 8097 	bne.w	80022b0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002182:	2201      	movs	r2, #1
 8002184:	21ff      	movs	r1, #255	; 0xff
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f003 fbb0 	bl	80058ec <VL53L0X_WrByte>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	4313      	orrs	r3, r2
 8002194:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f003 fba6 	bl	80058ec <VL53L0X_WrByte>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80021aa:	2200      	movs	r2, #0
 80021ac:	21ff      	movs	r1, #255	; 0xff
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f003 fb9c 	bl	80058ec <VL53L0X_WrByte>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80021be:	2201      	movs	r2, #1
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f003 fb92 	bl	80058ec <VL53L0X_WrByte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80021d2:	2202      	movs	r2, #2
 80021d4:	2185      	movs	r1, #133	; 0x85
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f003 fb88 	bl	80058ec <VL53L0X_WrByte>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80021e6:	2204      	movs	r2, #4
 80021e8:	21ff      	movs	r1, #255	; 0xff
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f003 fb7e 	bl	80058ec <VL53L0X_WrByte>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80021fa:	2200      	movs	r2, #0
 80021fc:	21cd      	movs	r1, #205	; 0xcd
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f003 fb74 	bl	80058ec <VL53L0X_WrByte>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4313      	orrs	r3, r2
 800220c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800220e:	2211      	movs	r2, #17
 8002210:	21cc      	movs	r1, #204	; 0xcc
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f003 fb6a 	bl	80058ec <VL53L0X_WrByte>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	4313      	orrs	r3, r2
 8002220:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002222:	2207      	movs	r2, #7
 8002224:	21ff      	movs	r1, #255	; 0xff
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f003 fb60 	bl	80058ec <VL53L0X_WrByte>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	4313      	orrs	r3, r2
 8002234:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002236:	2200      	movs	r2, #0
 8002238:	21be      	movs	r1, #190	; 0xbe
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f003 fb56 	bl	80058ec <VL53L0X_WrByte>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4313      	orrs	r3, r2
 8002248:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800224a:	2206      	movs	r2, #6
 800224c:	21ff      	movs	r1, #255	; 0xff
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f003 fb4c 	bl	80058ec <VL53L0X_WrByte>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4313      	orrs	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800225e:	2209      	movs	r2, #9
 8002260:	21cc      	movs	r1, #204	; 0xcc
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f003 fb42 	bl	80058ec <VL53L0X_WrByte>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	4313      	orrs	r3, r2
 8002270:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002272:	2200      	movs	r2, #0
 8002274:	21ff      	movs	r1, #255	; 0xff
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f003 fb38 	bl	80058ec <VL53L0X_WrByte>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	4313      	orrs	r3, r2
 8002284:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002286:	2201      	movs	r2, #1
 8002288:	21ff      	movs	r1, #255	; 0xff
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f003 fb2e 	bl	80058ec <VL53L0X_WrByte>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f003 fb24 	bl	80058ec <VL53L0X_WrByte>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e058      	b.n	8002362 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d121      	bne.n	80022fc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d81b      	bhi.n	80022f6 <VL53L0X_SetGpioConfig+0x1ce>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <VL53L0X_SetGpioConfig+0x19c>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	080022d9 	.word	0x080022d9
 80022c8:	080022df 	.word	0x080022df
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022eb 	.word	0x080022eb
 80022d4:	080022f1 	.word	0x080022f1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80022d8:	2300      	movs	r3, #0
 80022da:	73bb      	strb	r3, [r7, #14]
				break;
 80022dc:	e00f      	b.n	80022fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80022de:	2301      	movs	r3, #1
 80022e0:	73bb      	strb	r3, [r7, #14]
				break;
 80022e2:	e00c      	b.n	80022fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80022e4:	2302      	movs	r3, #2
 80022e6:	73bb      	strb	r3, [r7, #14]
				break;
 80022e8:	e009      	b.n	80022fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80022ea:	2303      	movs	r3, #3
 80022ec:	73bb      	strb	r3, [r7, #14]
				break;
 80022ee:	e006      	b.n	80022fe <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80022f0:	2304      	movs	r3, #4
 80022f2:	73bb      	strb	r3, [r7, #14]
				break;
 80022f4:	e003      	b.n	80022fe <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80022f6:	23f5      	movs	r3, #245	; 0xf5
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e000      	b.n	80022fe <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80022fc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	461a      	mov	r2, r3
 800230a:	210a      	movs	r1, #10
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f003 faed 	bl	80058ec <VL53L0X_WrByte>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800231e:	7e3b      	ldrb	r3, [r7, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	73bb      	strb	r3, [r7, #14]
 8002328:	e001      	b.n	800232e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800232a:	2310      	movs	r3, #16
 800232c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	22ef      	movs	r2, #239	; 0xef
 8002332:	2184      	movs	r1, #132	; 0x84
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f003 fb27 	bl	8005988 <VL53L0X_UpdateByte>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	787a      	ldrb	r2, [r7, #1]
 800234a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002356:	2100      	movs	r1, #0
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f83f 	bl	80023dc <VL53L0X_ClearInterruptMask>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop

08002370 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	460b      	mov	r3, r1
 800237e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	461a      	mov	r2, r3
 800238a:	210e      	movs	r1, #14
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f003 fb59 	bl	8005a44 <VL53L0X_RdWord>
 8002392:	4603      	mov	r3, r0
 8002394:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002396:	8abb      	ldrh	r3, [r7, #20]
 8002398:	045b      	lsls	r3, r3, #17
 800239a:	461a      	mov	r2, r3
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <VL53L0X_GetInterruptThresholds+0x68>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80023a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10f      	bne.n	80023cc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	461a      	mov	r2, r3
 80023b2:	210c      	movs	r1, #12
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f003 fb45 	bl	8005a44 <VL53L0X_RdWord>
 80023ba:	4603      	mov	r3, r0
 80023bc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80023be:	8abb      	ldrh	r3, [r7, #20]
 80023c0:	045b      	lsls	r3, r3, #17
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <VL53L0X_GetInterruptThresholds+0x68>)
 80023c6:	4013      	ands	r3, r2
		*pThresholdHigh =
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80023cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	1ffe0000 	.word	0x1ffe0000

080023dc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80023ee:	2201      	movs	r2, #1
 80023f0:	210b      	movs	r1, #11
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f003 fa7a 	bl	80058ec <VL53L0X_WrByte>
 80023f8:	4603      	mov	r3, r0
 80023fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80023fc:	2200      	movs	r2, #0
 80023fe:	210b      	movs	r1, #11
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f003 fa73 	bl	80058ec <VL53L0X_WrByte>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	4313      	orrs	r3, r2
 800240e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002410:	f107 030d 	add.w	r3, r7, #13
 8002414:	461a      	mov	r2, r3
 8002416:	2113      	movs	r1, #19
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f003 fae9 	bl	80059f0 <VL53L0X_RdByte>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	4313      	orrs	r3, r2
 8002426:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	3301      	adds	r3, #1
 800242c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800242e:	7b7b      	ldrb	r3, [r7, #13]
 8002430:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8002438:	7bbb      	ldrb	r3, [r7, #14]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d803      	bhi.n	8002446 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0d3      	beq.n	80023ee <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800244c:	23f4      	movs	r3, #244	; 0xf4
 800244e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800246a:	f107 030e 	add.w	r3, r7, #14
 800246e:	461a      	mov	r2, r3
 8002470:	2113      	movs	r1, #19
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f003 fabc 	bl	80059f0 <VL53L0X_RdByte>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800247c:	7bbb      	ldrb	r3, [r7, #14]
 800247e:	f003 0207 	and.w	r2, r3, #7
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8002486:	7bbb      	ldrb	r3, [r7, #14]
 8002488:	f003 0318 	and.w	r3, r3, #24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8002490:	23fa      	movs	r3, #250	; 0xfa
 8002492:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fa03 	bl	80028c0 <VL53L0X_perform_ref_spad_management>
 80024ba:	4603      	mov	r3, r0
 80024bc:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80024be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80024d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80024dc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	461a      	mov	r2, r3
 80024ea:	2128      	movs	r1, #40	; 0x28
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f003 faa9 	bl	8005a44 <VL53L0X_RdWord>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11e      	bne.n	800253c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80024fe:	893b      	ldrh	r3, [r7, #8]
 8002500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002504:	b29b      	uxth	r3, r3
 8002506:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002508:	893b      	ldrh	r3, [r7, #8]
 800250a:	461a      	mov	r2, r3
 800250c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	dd0b      	ble.n	800252c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	b29b      	uxth	r3, r3
 800251c:	b21b      	sxth	r3, r3
 800251e:	461a      	mov	r2, r3
					* 250;
 8002520:	23fa      	movs	r3, #250	; 0xfa
 8002522:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e007      	b.n	800253c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800252c:	893b      	ldrh	r3, [r7, #8]
 800252e:	b21b      	sxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	23fa      	movs	r3, #250	; 0xfa
 8002534:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800253c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8002556:	2308      	movs	r3, #8
 8002558:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	fbb3 f2f2 	udiv	r2, r3, r2
 8002578:	69b9      	ldr	r1, [r7, #24]
 800257a:	fb01 f202 	mul.w	r2, r1, r2
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	e030      	b.n	80025ea <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	d11e      	bne.n	80025dc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800259e:	7ffa      	ldrb	r2, [r7, #31]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	fa42 f303 	asr.w	r3, r2, r3
 80025a6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80025ac:	e016      	b.n	80025dc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <get_next_good_spad+0x88>
				success = 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	fb02 f203 	mul.w	r2, r2, r3
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	4413      	add	r3, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	601a      	str	r2, [r3, #0]
				break;
 80025ce:	e009      	b.n	80025e4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	3301      	adds	r3, #1
 80025da:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3e4      	bcc.n	80025ae <get_next_good_spad+0x66>
				coarseIndex++) {
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3301      	adds	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d202      	bcs.n	80025f8 <get_next_good_spad+0xb0>
 80025f2:	7fbb      	ldrb	r3, [r7, #30]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0c7      	beq.n	8002588 <get_next_good_spad+0x40>
		}
	}
}
 80025f8:	bf00      	nop
 80025fa:	372c      	adds	r7, #44	; 0x2c
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <is_aperture+0x30>)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <is_aperture+0x22>
		isAperture = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	200002b0 	.word	0x200002b0

08002638 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002644:	2300      	movs	r3, #0
 8002646:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8002648:	2308      	movs	r3, #8
 800264a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	fbb3 f2f2 	udiv	r2, r3, r2
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	fb01 f202 	mul.w	r2, r1, r2
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002670:	23ce      	movs	r3, #206	; 0xce
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e010      	b.n	8002698 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b25a      	sxtb	r2, r3
 8002680:	2101      	movs	r1, #1
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	b25b      	sxtb	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	b259      	sxtb	r1, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4413      	add	r3, r2
 8002694:	b2ca      	uxtb	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]

	return status;
 8002698:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3724      	adds	r7, #36	; 0x24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80026b2:	2306      	movs	r3, #6
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	21b0      	movs	r1, #176	; 0xb0
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f003 f8bb 	bl	8005834 <VL53L0X_WriteMulti>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80026d8:	2306      	movs	r3, #6
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	21b0      	movs	r1, #176	; 0xb0
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f003 f8d8 	bl	8005894 <VL53L0X_ReadMulti>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	460b      	mov	r3, r1
 8002702:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800270a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800270e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002710:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
 8002716:	e02b      	b.n	8002770 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff11 	bl	8002548 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d103      	bne.n	8002736 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800272e:	23ce      	movs	r3, #206	; 0xce
 8002730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002734:	e020      	b.n	8002778 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	461a      	mov	r2, r3
 800273a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800273c:	4413      	add	r3, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff60 	bl	8002604 <is_aperture>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800274e:	23ce      	movs	r3, #206	; 0xce
 8002750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002754:	e010      	b.n	8002778 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800275e:	6838      	ldr	r0, [r7, #0]
 8002760:	f7ff ff6a 	bl	8002638 <enable_spad_bit>
		currentSpad++;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	3301      	adds	r3, #1
 8002768:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	3301      	adds	r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002774:	429a      	cmp	r2, r3
 8002776:	d3cf      	bcc.n	8002718 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800277e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff ff8d 	bl	80026a8 <set_ref_spad_map>
 800278e:	4603      	mov	r3, r0
 8002790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8002794:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002798:	2b00      	cmp	r3, #0
 800279a:	d121      	bne.n	80027e0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff ff93 	bl	80026ce <get_ref_spad_map>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80027b2:	e011      	b.n	80027d8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	4413      	add	r3, r2
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	f107 0114 	add.w	r1, r7, #20
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	440b      	add	r3, r1
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d003      	beq.n	80027d2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80027ca:	23ce      	movs	r3, #206	; 0xce
 80027cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80027d0:	e006      	b.n	80027e0 <enable_ref_spads+0xec>
			}
			i++;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3e9      	bcc.n	80027b4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80027e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3730      	adds	r7, #48	; 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800280c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002814:	22c0      	movs	r2, #192	; 0xc0
 8002816:	2101      	movs	r1, #1
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f003 f867 	bl	80058ec <VL53L0X_WrByte>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800282c:	f107 0308 	add.w	r3, r7, #8
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fc48 	bl	80020c8 <VL53L0X_PerformSingleRangingMeasurement>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800283e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002846:	2201      	movs	r2, #1
 8002848:	21ff      	movs	r1, #255	; 0xff
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f003 f84e 	bl	80058ec <VL53L0X_WrByte>
 8002850:	4603      	mov	r3, r0
 8002852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002856:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	21b6      	movs	r1, #182	; 0xb6
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f003 f8ee 	bl	8005a44 <VL53L0X_RdWord>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800286e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002876:	2200      	movs	r2, #0
 8002878:	21ff      	movs	r1, #255	; 0xff
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f003 f836 	bl	80058ec <VL53L0X_WrByte>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800288a:	2b00      	cmp	r3, #0
 800288c:	d112      	bne.n	80028b4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800288e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002892:	461a      	mov	r2, r3
 8002894:	2101      	movs	r1, #1
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f003 f828 	bl	80058ec <VL53L0X_WrByte>
 800289c:	4603      	mov	r3, r0
 800289e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80028a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80028b0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80028b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b09d      	sub	sp, #116	; 0x74
 80028c4:	af06      	add	r7, sp, #24
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80028d2:	23b4      	movs	r3, #180	; 0xb4
 80028d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80028d8:	2303      	movs	r3, #3
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80028dc:	232c      	movs	r3, #44	; 0x2c
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80028ec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80028f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80028fa:	2306      	movs	r3, #6
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002924:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002926:	2300      	movs	r3, #0
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
 800292a:	e009      	b.n	8002940 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002930:	4413      	add	r3, r2
 8002932:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293c:	3301      	adds	r3, #1
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	429a      	cmp	r2, r3
 8002946:	d3f1      	bcc.n	800292c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002948:	2201      	movs	r2, #1
 800294a:	21ff      	movs	r1, #255	; 0xff
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f002 ffcd 	bl	80058ec <VL53L0X_WrByte>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002960:	2200      	movs	r2, #0
 8002962:	214f      	movs	r1, #79	; 0x4f
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f002 ffc1 	bl	80058ec <VL53L0X_WrByte>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002970:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002978:	222c      	movs	r2, #44	; 0x2c
 800297a:	214e      	movs	r1, #78	; 0x4e
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f002 ffb5 	bl	80058ec <VL53L0X_WrByte>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002988:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002990:	2200      	movs	r2, #0
 8002992:	21ff      	movs	r1, #255	; 0xff
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f002 ffa9 	bl	80058ec <VL53L0X_WrByte>
 800299a:	4603      	mov	r3, r0
 800299c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80029a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80029a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80029ac:	461a      	mov	r2, r3
 80029ae:	21b6      	movs	r1, #182	; 0xb6
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f002 ff9b 	bl	80058ec <VL53L0X_WrByte>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80029bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f002 ff8f 	bl	80058ec <VL53L0X_WrByte>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80029d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80029dc:	f107 0210 	add.w	r2, r7, #16
 80029e0:	f107 0111 	add.w	r1, r7, #17
 80029e4:	2300      	movs	r3, #0
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fbbb 	bl	8003162 <VL53L0X_perform_ref_calibration>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80029f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d121      	bne.n	8002a3e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002a16:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002a1a:	f107 0218 	add.w	r2, r7, #24
 8002a1e:	9204      	str	r2, [sp, #16]
 8002a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a22:	9203      	str	r2, [sp, #12]
 8002a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a26:	9202      	str	r2, [sp, #8]
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4623      	mov	r3, r4
 8002a30:	4602      	mov	r2, r0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff fe5e 	bl	80026f4 <enable_ref_spads>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002a3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d174      	bne.n	8002b30 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002a4a:	f107 0312 	add.w	r3, r7, #18
 8002a4e:	4619      	mov	r1, r3
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff fecb 	bl	80027ec <perform_ref_signal_measurement>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002a5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d161      	bne.n	8002b28 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002a64:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002a66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d25d      	bcs.n	8002b28 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a70:	e009      	b.n	8002a86 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a82:	3301      	adds	r3, #1
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3f1      	bcc.n	8002a72 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002a8e:	e002      	b.n	8002a96 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a92:	3301      	adds	r3, #1
 8002a94:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002a96:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fdb0 	bl	8002604 <is_aperture>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002aaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3ee      	bcc.n	8002a90 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8002ac6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002aca:	f107 0218 	add.w	r2, r7, #24
 8002ace:	9204      	str	r2, [sp, #16]
 8002ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ad2:	9203      	str	r2, [sp, #12]
 8002ad4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4623      	mov	r3, r4
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff fe06 	bl	80026f4 <enable_ref_spads>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002aee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11b      	bne.n	8002b2e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002afa:	f107 0312 	add.w	r3, r7, #18
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fe73 	bl	80027ec <perform_ref_signal_measurement>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002b0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10c      	bne.n	8002b2e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002b14:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002b16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d208      	bcs.n	8002b2e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002b26:	e002      	b.n	8002b2e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	e000      	b.n	8002b30 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002b2e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002b30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 80af 	bne.w	8002c98 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002b3a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002b3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	f240 80aa 	bls.w	8002c98 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 fc84 	bl	8008468 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002b60:	8a7b      	ldrh	r3, [r7, #18]
 8002b62:	461a      	mov	r2, r3
 8002b64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bfb8      	it	lt
 8002b6c:	425b      	neglt	r3, r3
 8002b6e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8002b76:	e086      	b.n	8002c86 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b86:	f7ff fcdf 	bl	8002548 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d103      	bne.n	8002b9a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b92:	23ce      	movs	r3, #206	; 0xce
 8002b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8002b98:	e07e      	b.n	8002c98 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002b9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fd2e 	bl	8002604 <is_aperture>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8002bb8:	e06e      	b.n	8002c98 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8002bca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fd32 	bl	8002638 <enable_spad_bit>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002bda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be4:	3301      	adds	r3, #1
 8002be6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8002bee:	4619      	mov	r1, r3
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd59 	bl	80026a8 <set_ref_spad_map>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002bfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d146      	bne.n	8002c92 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002c04:	f107 0312 	add.w	r3, r7, #18
 8002c08:	4619      	mov	r1, r3
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff fdee 	bl	80027ec <perform_ref_signal_measurement>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002c16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d13b      	bne.n	8002c96 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002c1e:	8a7b      	ldrh	r3, [r7, #18]
 8002c20:	461a      	mov	r2, r3
 8002c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bfb8      	it	lt
 8002c2a:	425b      	neglt	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8002c2e:	8a7b      	ldrh	r3, [r7, #18]
 8002c30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d21c      	bcs.n	8002c70 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d914      	bls.n	8002c68 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff fd2f 	bl	80026a8 <set_ref_spad_map>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8002c56:	f107 011c 	add.w	r1, r7, #28
 8002c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fc03 	bl	8008468 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	3b01      	subs	r3, #1
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002c6e:	e00a      	b.n	8002c86 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c80:	4618      	mov	r0, r3
 8002c82:	f005 fbf1 	bl	8008468 <memcpy>
		while (!complete) {
 8002c86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f43f af74 	beq.w	8002b78 <VL53L0X_perform_ref_spad_management+0x2b8>
 8002c90:	e002      	b.n	8002c98 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002c96:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d115      	bne.n	8002ccc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ca4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002cac:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8002ccc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	375c      	adds	r7, #92	; 0x5c
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}

08002cd8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b093      	sub	sp, #76	; 0x4c
 8002cdc:	af06      	add	r7, sp, #24
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8002cf0:	23b4      	movs	r3, #180	; 0xb4
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8002cfa:	232c      	movs	r3, #44	; 0x2c
 8002cfc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002cfe:	2201      	movs	r2, #1
 8002d00:	21ff      	movs	r1, #255	; 0xff
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f002 fdf2 	bl	80058ec <VL53L0X_WrByte>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002d0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8002d16:	2200      	movs	r2, #0
 8002d18:	214f      	movs	r1, #79	; 0x4f
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f002 fde6 	bl	80058ec <VL53L0X_WrByte>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002d26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8002d2e:	222c      	movs	r2, #44	; 0x2c
 8002d30:	214e      	movs	r1, #78	; 0x4e
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f002 fdda 	bl	80058ec <VL53L0X_WrByte>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002d3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d46:	2200      	movs	r2, #0
 8002d48:	21ff      	movs	r1, #255	; 0xff
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f002 fdce 	bl	80058ec <VL53L0X_WrByte>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002d56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8002d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d62:	461a      	mov	r2, r3
 8002d64:	21b6      	movs	r1, #182	; 0xb6
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f002 fdc0 	bl	80058ec <VL53L0X_WrByte>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e009      	b.n	8002d8c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	3301      	adds	r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d3f1      	bcc.n	8002d78 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d011      	beq.n	8002dbe <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002d9a:	e002      	b.n	8002da2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	3301      	adds	r3, #1
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002da2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	4413      	add	r3, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fc2a 	bl	8002604 <is_aperture>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <VL53L0X_set_reference_spads+0xe6>
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3ee      	bcc.n	8002d9c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8002dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dce:	79f9      	ldrb	r1, [r7, #7]
 8002dd0:	f107 0214 	add.w	r2, r7, #20
 8002dd4:	9204      	str	r2, [sp, #16]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	9203      	str	r2, [sp, #12]
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	9202      	str	r2, [sp, #8]
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4623      	mov	r3, r4
 8002de6:	4602      	mov	r2, r0
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fc83 	bl	80026f4 <enable_ref_spads>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8002df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10c      	bne.n	8002e16 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8002e16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3734      	adds	r7, #52	; 0x34
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f002 fd50 	bl	80058ec <VL53L0X_WrByte>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f9bf 	bl	80031dc <VL53L0X_measurement_poll_for_completion>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fab5 	bl	80023dc <VL53L0X_ClearInterruptMask>
 8002e72:	4603      	mov	r3, r0
 8002e74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f002 fd32 	bl	80058ec <VL53L0X_WrByte>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8002e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	70fb      	strb	r3, [r7, #3]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70bb      	strb	r3, [r7, #2]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	21ff      	movs	r1, #255	; 0xff
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f002 fd14 	bl	80058ec <VL53L0X_WrByte>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f002 fd0a 	bl	80058ec <VL53L0X_WrByte>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	21ff      	movs	r1, #255	; 0xff
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f002 fd00 	bl	80058ec <VL53L0X_WrByte>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01e      	beq.n	8002f3a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8002efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	21cb      	movs	r1, #203	; 0xcb
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f002 fd71 	bl	80059f0 <VL53L0X_RdByte>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8002f18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02a      	beq.n	8002f76 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8002f20:	f107 030e 	add.w	r3, r7, #14
 8002f24:	461a      	mov	r2, r3
 8002f26:	21ee      	movs	r1, #238	; 0xee
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f002 fd61 	bl	80059f0 <VL53L0X_RdByte>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e01d      	b.n	8002f76 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8002f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8002f42:	78bb      	ldrb	r3, [r7, #2]
 8002f44:	461a      	mov	r2, r3
 8002f46:	21cb      	movs	r1, #203	; 0xcb
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f002 fccf 	bl	80058ec <VL53L0X_WrByte>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8002f58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	21ee      	movs	r1, #238	; 0xee
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f002 fd0e 	bl	8005988 <VL53L0X_UpdateByte>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002f76:	2201      	movs	r2, #1
 8002f78:	21ff      	movs	r1, #255	; 0xff
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f002 fcb6 	bl	80058ec <VL53L0X_WrByte>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f002 fcac 	bl	80058ec <VL53L0X_WrByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	21ff      	movs	r1, #255	; 0xff
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f002 fca2 	bl	80058ec <VL53L0X_WrByte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002fb2:	7bbb      	ldrb	r3, [r7, #14]
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	701a      	strb	r2, [r3, #0]

	return Status;
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08a      	sub	sp, #40	; 0x28
 8002fce:	af04      	add	r7, sp, #16
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	71fb      	strb	r3, [r7, #7]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8002ff4:	79bb      	ldrb	r3, [r7, #6]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003000:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8003002:	2201      	movs	r2, #1
 8003004:	2101      	movs	r1, #1
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f002 fc70 	bl	80058ec <VL53L0X_WrByte>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff ff01 	bl	8002e22 <VL53L0X_perform_single_ref_calibration>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d115      	bne.n	8003058 <VL53L0X_perform_vhv_calibration+0x8e>
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d112      	bne.n	8003058 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003032:	7d39      	ldrb	r1, [r7, #20]
 8003034:	7d7a      	ldrb	r2, [r7, #21]
 8003036:	2300      	movs	r3, #0
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	2301      	movs	r3, #1
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	f107 0313 	add.w	r3, r7, #19
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	2101      	movs	r1, #1
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ff23 	bl	8002e98 <VL53L0X_ref_calibration_io>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]
 8003056:	e002      	b.n	800305e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800305e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d112      	bne.n	800308c <VL53L0X_perform_vhv_calibration+0xc2>
 8003066:	79bb      	ldrb	r3, [r7, #6]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00f      	beq.n	800308c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800306c:	7dbb      	ldrb	r3, [r7, #22]
 800306e:	461a      	mov	r2, r3
 8003070:	2101      	movs	r1, #1
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f002 fc3a 	bl	80058ec <VL53L0X_WrByte>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800307c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	7dba      	ldrb	r2, [r7, #22]
 8003088:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800308c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af04      	add	r7, sp, #16
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	460b      	mov	r3, r1
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80030ca:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80030cc:	2202      	movs	r2, #2
 80030ce:	2101      	movs	r1, #1
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f002 fc0b 	bl	80058ec <VL53L0X_WrByte>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80030da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80030e2:	2100      	movs	r1, #0
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fe9c 	bl	8002e22 <VL53L0X_perform_single_ref_calibration>
 80030ea:	4603      	mov	r3, r0
 80030ec:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80030ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <VL53L0X_perform_phase_calibration+0x8a>
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d112      	bne.n	8003122 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80030fc:	7d39      	ldrb	r1, [r7, #20]
 80030fe:	7d7a      	ldrb	r2, [r7, #21]
 8003100:	2301      	movs	r3, #1
 8003102:	9303      	str	r3, [sp, #12]
 8003104:	2300      	movs	r3, #0
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	f107 0313 	add.w	r3, r7, #19
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	460b      	mov	r3, r1
 8003114:	2101      	movs	r1, #1
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff febe 	bl	8002e98 <VL53L0X_ref_calibration_io>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]
 8003120:	e002      	b.n	8003128 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d112      	bne.n	8003156 <VL53L0X_perform_phase_calibration+0xbe>
 8003130:	79bb      	ldrb	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00f      	beq.n	8003156 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003136:	7dbb      	ldrb	r3, [r7, #22]
 8003138:	461a      	mov	r2, r3
 800313a:	2101      	movs	r1, #1
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f002 fbd5 	bl	80058ec <VL53L0X_WrByte>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	7dba      	ldrb	r2, [r7, #22]
 8003152:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003170:	2300      	movs	r3, #0
 8003172:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800317e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	2300      	movs	r3, #0
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff ff1f 	bl	8002fca <VL53L0X_perform_vhv_calibration>
 800318c:	4603      	mov	r3, r0
 800318e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d107      	bne.n	80031a8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	2300      	movs	r3, #0
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ff7a 	bl	8003098 <VL53L0X_perform_phase_calibration>
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80031a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10f      	bne.n	80031d0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80031b0:	7dbb      	ldrb	r3, [r7, #22]
 80031b2:	461a      	mov	r2, r3
 80031b4:	2101      	movs	r1, #1
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f002 fb98 	bl	80058ec <VL53L0X_WrByte>
 80031bc:	4603      	mov	r3, r0
 80031be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80031c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	7dba      	ldrb	r2, [r7, #22]
 80031cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80031d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80031f0:	f107 030f 	add.w	r3, r7, #15
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fe02 	bl	8001e00 <VL53L0X_GetMeasurementDataReady>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8003200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d110      	bne.n	800322a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d00f      	beq.n	800322e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3301      	adds	r3, #1
 8003212:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800321a:	d302      	bcc.n	8003222 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800321c:	23f9      	movs	r3, #249	; 0xf9
 800321e:	75fb      	strb	r3, [r7, #23]
			break;
 8003220:	e006      	b.n	8003230 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f002 fc82 	bl	8005b2c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003228:	e7e2      	b.n	80031f0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800322e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8003230:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	3301      	adds	r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003298:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800329a:	e002      	b.n	80032a2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d8f8      	bhi.n	800329c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80032aa:	e017      	b.n	80032dc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4413      	add	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d30b      	bcc.n	80032d0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4413      	add	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e002      	b.n	80032d6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e4      	bne.n	80032ac <VL53L0X_isqrt+0x24>
	}

	return res;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2183      	movs	r1, #131	; 0x83
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f002 faf3 	bl	80058ec <VL53L0X_WrByte>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	4313      	orrs	r3, r2
 800330e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8003310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11e      	bne.n	8003356 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800331c:	f107 030f 	add.w	r3, r7, #15
 8003320:	461a      	mov	r2, r3
 8003322:	2183      	movs	r1, #131	; 0x83
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f002 fb63 	bl	80059f0 <VL53L0X_RdByte>
 800332a:	4603      	mov	r3, r0
 800332c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <VL53L0X_device_read_strobe+0x5a>
 8003334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	3301      	adds	r3, #1
 8003340:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003348:	d3e8      	bcc.n	800331c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003350:	d301      	bcc.n	8003356 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003352:	23f9      	movs	r3, #249	; 0xf9
 8003354:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8003356:	2201      	movs	r2, #1
 8003358:	2183      	movs	r1, #131	; 0x83
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f002 fac6 	bl	80058ec <VL53L0X_WrByte>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	4313      	orrs	r3, r2
 8003368:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800336a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b098      	sub	sp, #96	; 0x60
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80033a6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80033be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80033c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	f000 8408 	beq.w	8003bdc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80033cc:	2201      	movs	r2, #1
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f002 fa8b 	bl	80058ec <VL53L0X_WrByte>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033de:	4313      	orrs	r3, r2
 80033e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80033e4:	2201      	movs	r2, #1
 80033e6:	21ff      	movs	r1, #255	; 0xff
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f002 fa7f 	bl	80058ec <VL53L0X_WrByte>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f002 fa73 	bl	80058ec <VL53L0X_WrByte>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800340e:	4313      	orrs	r3, r2
 8003410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003414:	2206      	movs	r2, #6
 8003416:	21ff      	movs	r1, #255	; 0xff
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f002 fa67 	bl	80058ec <VL53L0X_WrByte>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003426:	4313      	orrs	r3, r2
 8003428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800342c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003430:	461a      	mov	r2, r3
 8003432:	2183      	movs	r1, #131	; 0x83
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f002 fadb 	bl	80059f0 <VL53L0X_RdByte>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003442:	4313      	orrs	r3, r2
 8003444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	2183      	movs	r1, #131	; 0x83
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f002 fa48 	bl	80058ec <VL53L0X_WrByte>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003464:	4313      	orrs	r3, r2
 8003466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800346a:	2207      	movs	r2, #7
 800346c:	21ff      	movs	r1, #255	; 0xff
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f002 fa3c 	bl	80058ec <VL53L0X_WrByte>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800347c:	4313      	orrs	r3, r2
 800347e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003482:	2201      	movs	r2, #1
 8003484:	2181      	movs	r1, #129	; 0x81
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f002 fa30 	bl	80058ec <VL53L0X_WrByte>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003494:	4313      	orrs	r3, r2
 8003496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f002 fb46 	bl	8005b2c <VL53L0X_PollingDelay>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80034ae:	2201      	movs	r2, #1
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f002 fa1a 	bl	80058ec <VL53L0X_WrByte>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8098 	beq.w	8003602 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80034d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034d6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8091 	bne.w	8003602 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80034e0:	226b      	movs	r2, #107	; 0x6b
 80034e2:	2194      	movs	r1, #148	; 0x94
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f002 fa01 	bl	80058ec <VL53L0X_WrByte>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fef9 	bl	80032f0 <VL53L0X_device_read_strobe>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003506:	4313      	orrs	r3, r2
 8003508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800350c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003510:	461a      	mov	r2, r3
 8003512:	2190      	movs	r1, #144	; 0x90
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f002 facd 	bl	8005ab4 <VL53L0X_RdDWord>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003522:	4313      	orrs	r3, r2
 8003524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003532:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	0bdb      	lsrs	r3, r3, #15
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003544:	2224      	movs	r2, #36	; 0x24
 8003546:	2194      	movs	r1, #148	; 0x94
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f002 f9cf 	bl	80058ec <VL53L0X_WrByte>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003556:	4313      	orrs	r3, r2
 8003558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fec7 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800356a:	4313      	orrs	r3, r2
 800356c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003574:	461a      	mov	r2, r3
 8003576:	2190      	movs	r1, #144	; 0x90
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f002 fa9b 	bl	8005ab4 <VL53L0X_RdDWord>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003586:	4313      	orrs	r3, r2
 8003588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	0e1b      	lsrs	r3, r3, #24
 8003590:	b2db      	uxtb	r3, r3
 8003592:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	b2db      	uxtb	r3, r3
 800359a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80035aa:	2225      	movs	r2, #37	; 0x25
 80035ac:	2194      	movs	r1, #148	; 0x94
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f002 f99c 	bl	80058ec <VL53L0X_WrByte>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035bc:	4313      	orrs	r3, r2
 80035be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fe94 	bl	80032f0 <VL53L0X_device_read_strobe>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035da:	461a      	mov	r2, r3
 80035dc:	2190      	movs	r1, #144	; 0x90
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f002 fa68 	bl	8005ab4 <VL53L0X_RdDWord>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	0e1b      	lsrs	r3, r3, #24
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8189 	beq.w	8003920 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800360e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003612:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8182 	bne.w	8003920 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800361c:	2202      	movs	r2, #2
 800361e:	2194      	movs	r1, #148	; 0x94
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f002 f963 	bl	80058ec <VL53L0X_WrByte>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800362e:	4313      	orrs	r3, r2
 8003630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fe5b 	bl	80032f0 <VL53L0X_device_read_strobe>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003642:	4313      	orrs	r3, r2
 8003644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003648:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800364c:	461a      	mov	r2, r3
 800364e:	2190      	movs	r1, #144	; 0x90
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f002 f9cd 	bl	80059f0 <VL53L0X_RdByte>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800365e:	4313      	orrs	r3, r2
 8003660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003664:	227b      	movs	r2, #123	; 0x7b
 8003666:	2194      	movs	r1, #148	; 0x94
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f002 f93f 	bl	80058ec <VL53L0X_WrByte>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003676:	4313      	orrs	r3, r2
 8003678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fe37 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800368a:	4313      	orrs	r3, r2
 800368c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003690:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003694:	461a      	mov	r2, r3
 8003696:	2190      	movs	r1, #144	; 0x90
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f002 f9a9 	bl	80059f0 <VL53L0X_RdByte>
 800369e:	4603      	mov	r3, r0
 80036a0:	461a      	mov	r2, r3
 80036a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80036ac:	2277      	movs	r2, #119	; 0x77
 80036ae:	2194      	movs	r1, #148	; 0x94
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f002 f91b 	bl	80058ec <VL53L0X_WrByte>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036be:	4313      	orrs	r3, r2
 80036c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fe13 	bl	80032f0 <VL53L0X_device_read_strobe>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80036d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036dc:	461a      	mov	r2, r3
 80036de:	2190      	movs	r1, #144	; 0x90
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f002 f9e7 	bl	8005ab4 <VL53L0X_RdDWord>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	0e5b      	lsrs	r3, r3, #25
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	0c9b      	lsrs	r3, r3, #18
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370c:	b2db      	uxtb	r3, r3
 800370e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	0adb      	lsrs	r3, r3, #11
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371a:	b2db      	uxtb	r3, r3
 800371c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003728:	b2db      	uxtb	r3, r3
 800372a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	b2db      	uxtb	r3, r3
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800373e:	2278      	movs	r2, #120	; 0x78
 8003740:	2194      	movs	r1, #148	; 0x94
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f002 f8d2 	bl	80058ec <VL53L0X_WrByte>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003750:	4313      	orrs	r3, r2
 8003752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fdca 	bl	80032f0 <VL53L0X_device_read_strobe>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003764:	4313      	orrs	r3, r2
 8003766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800376a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800376e:	461a      	mov	r2, r3
 8003770:	2190      	movs	r1, #144	; 0x90
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f002 f99e 	bl	8005ab4 <VL53L0X_RdDWord>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003780:	4313      	orrs	r3, r2
 8003782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	0f5b      	lsrs	r3, r3, #29
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8003792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003796:	4413      	add	r3, r2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	0d9b      	lsrs	r3, r3, #22
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	0bdb      	lsrs	r3, r3, #15
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80037e6:	2279      	movs	r2, #121	; 0x79
 80037e8:	2194      	movs	r1, #148	; 0x94
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f002 f87e 	bl	80058ec <VL53L0X_WrByte>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fd76 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800380c:	4313      	orrs	r3, r2
 800380e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003816:	461a      	mov	r2, r3
 8003818:	2190      	movs	r1, #144	; 0x90
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f002 f94a 	bl	8005ab4 <VL53L0X_RdDWord>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003828:	4313      	orrs	r3, r2
 800382a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003838:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800383a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800383e:	4413      	add	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	0cdb      	lsrs	r3, r3, #19
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384e:	b2db      	uxtb	r3, r3
 8003850:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	0b1b      	lsrs	r3, r3, #12
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385c:	b2db      	uxtb	r3, r3
 800385e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386a:	b2db      	uxtb	r3, r3
 800386c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	b2db      	uxtb	r3, r3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003880:	227a      	movs	r2, #122	; 0x7a
 8003882:	2194      	movs	r1, #148	; 0x94
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f002 f831 	bl	80058ec <VL53L0X_WrByte>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003892:	4313      	orrs	r3, r2
 8003894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fd29 	bl	80032f0 <VL53L0X_device_read_strobe>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80038ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038b0:	461a      	mov	r2, r3
 80038b2:	2190      	movs	r1, #144	; 0x90
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f002 f8fd 	bl	8005ab4 <VL53L0X_RdDWord>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	0f9b      	lsrs	r3, r3, #30
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80038d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038d8:	4413      	add	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	0ddb      	lsrs	r3, r3, #23
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	0a5b      	lsrs	r3, r3, #9
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80f1 	beq.w	8003b0e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800392c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003930:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 80ea 	bne.w	8003b0e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800393a:	227b      	movs	r2, #123	; 0x7b
 800393c:	2194      	movs	r1, #148	; 0x94
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f001 ffd4 	bl	80058ec <VL53L0X_WrByte>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800394c:	4313      	orrs	r3, r2
 800394e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fccc 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003960:	4313      	orrs	r3, r2
 8003962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800396a:	461a      	mov	r2, r3
 800396c:	2190      	movs	r1, #144	; 0x90
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f002 f8a0 	bl	8005ab4 <VL53L0X_RdDWord>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800397c:	4313      	orrs	r3, r2
 800397e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003982:	227c      	movs	r2, #124	; 0x7c
 8003984:	2194      	movs	r1, #148	; 0x94
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f001 ffb0 	bl	80058ec <VL53L0X_WrByte>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003994:	4313      	orrs	r3, r2
 8003996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fca8 	bl	80032f0 <VL53L0X_device_read_strobe>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80039ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b2:	461a      	mov	r2, r3
 80039b4:	2190      	movs	r1, #144	; 0x90
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f002 f87c 	bl	8005ab4 <VL53L0X_RdDWord>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80039ca:	2273      	movs	r2, #115	; 0x73
 80039cc:	2194      	movs	r1, #148	; 0x94
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 ff8c 	bl	80058ec <VL53L0X_WrByte>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039dc:	4313      	orrs	r3, r2
 80039de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fc84 	bl	80032f0 <VL53L0X_device_read_strobe>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039fa:	461a      	mov	r2, r3
 80039fc:	2190      	movs	r1, #144	; 0x90
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f002 f858 	bl	8005ab4 <VL53L0X_RdDWord>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003a1a:	2274      	movs	r2, #116	; 0x74
 8003a1c:	2194      	movs	r1, #148	; 0x94
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f001 ff64 	bl	80058ec <VL53L0X_WrByte>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fc5c 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2190      	movs	r1, #144	; 0x90
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f002 f830 	bl	8005ab4 <VL53L0X_RdDWord>
 8003a54:	4603      	mov	r3, r0
 8003a56:	461a      	mov	r2, r3
 8003a58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003a66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003a6c:	2275      	movs	r2, #117	; 0x75
 8003a6e:	2194      	movs	r1, #148	; 0x94
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f001 ff3b 	bl	80058ec <VL53L0X_WrByte>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fc33 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2190      	movs	r1, #144	; 0x90
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f002 f807 	bl	8005ab4 <VL53L0X_RdDWord>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003abc:	2276      	movs	r2, #118	; 0x76
 8003abe:	2194      	movs	r1, #148	; 0x94
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f001 ff13 	bl	80058ec <VL53L0X_WrByte>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fc0b 	bl	80032f0 <VL53L0X_device_read_strobe>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aec:	461a      	mov	r2, r3
 8003aee:	2190      	movs	r1, #144	; 0x90
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 ffdf 	bl	8005ab4 <VL53L0X_RdDWord>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2181      	movs	r1, #129	; 0x81
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 feea 	bl	80058ec <VL53L0X_WrByte>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003b26:	2206      	movs	r2, #6
 8003b28:	21ff      	movs	r1, #255	; 0xff
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 fede 	bl	80058ec <VL53L0X_WrByte>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003b3e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003b42:	461a      	mov	r2, r3
 8003b44:	2183      	movs	r1, #131	; 0x83
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f001 ff52 	bl	80059f0 <VL53L0X_RdByte>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003b5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	2183      	movs	r1, #131	; 0x83
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f001 febf 	bl	80058ec <VL53L0X_WrByte>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	21ff      	movs	r1, #255	; 0xff
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f001 feb3 	bl	80058ec <VL53L0X_WrByte>
 8003b86:	4603      	mov	r3, r0
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003b94:	2201      	movs	r2, #1
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f001 fea7 	bl	80058ec <VL53L0X_WrByte>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bac:	2200      	movs	r2, #0
 8003bae:	21ff      	movs	r1, #255	; 0xff
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f001 fe9b 	bl	80058ec <VL53L0X_WrByte>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 fe8f 	bl	80058ec <VL53L0X_WrByte>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003bdc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f040 808f 	bne.w	8003d04 <VL53L0X_get_info_from_device+0x98e>
 8003be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bea:	2b07      	cmp	r3, #7
 8003bec:	f000 808a 	beq.w	8003d04 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d024      	beq.n	8003c44 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bfe:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11e      	bne.n	8003c44 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003c0c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003c16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1e:	e00e      	b.n	8003c3e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8003c20:	f107 0208 	add.w	r2, r7, #8
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	4413      	add	r3, r2
 8003c28:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8003c34:	460a      	mov	r2, r1
 8003c36:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	dded      	ble.n	8003c20 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d018      	beq.n	8003c80 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c52:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d112      	bne.n	8003c80 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c64:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	33f3      	adds	r3, #243	; 0xf3
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003c74:	f107 0310 	add.w	r3, r7, #16
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c7c:	f004 fc2a 	bl	80084d4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d030      	beq.n	8003cec <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003c8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c8e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d12a      	bne.n	8003cec <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca8:	025b      	lsls	r3, r3, #9
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8003cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d011      	beq.n	8003ce4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8003cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8003cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8003cd4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8003cd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003cdc:	425b      	negs	r3, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8003ce4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8003cec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8003cfa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d04:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3760      	adds	r7, #96	; 0x60
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8003d1c:	f240 6277 	movw	r2, #1655	; 0x677
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8003d28:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003d2c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003d6c:	e005      	b.n	8003d7a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	3301      	adds	r3, #1
 8003d78:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f4      	bne.n	8003d6e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8003d92:	4413      	add	r3, r2
 8003d94:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8003d96:	8afb      	ldrh	r3, [r7, #22]

}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	0a12      	lsrs	r2, r2, #8
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4619      	mov	r1, r3
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff ff92 	bl	8003d10 <VL53L0X_calc_macro_period_ps>
 8003dec:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <VL53L0X_calc_timeout_mclks+0x50>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e04:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	441a      	add	r2, r3
	timeout_period_mclks =
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8003e16:	69fb      	ldr	r3, [r7, #28]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003e38:	787b      	ldrb	r3, [r7, #1]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff67 	bl	8003d10 <VL53L0X_calc_macro_period_ps>
 8003e42:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <VL53L0X_calc_timeout_us+0x50>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <VL53L0X_calc_timeout_us+0x50>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8003e6a:	697b      	ldr	r3, [r7, #20]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	10624dd3 	.word	0x10624dd3

08003e78 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	; 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	460b      	mov	r3, r1
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <get_sequence_step_timeout+0x38>
 8003ea4:	7afb      	ldrb	r3, [r7, #11]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d002      	beq.n	8003eb0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d128      	bne.n	8003f02 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003eb0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7fd fa7d 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8003ec4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8003ecc:	f107 0320 	add.w	r3, r7, #32
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2146      	movs	r1, #70	; 0x46
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f001 fd8b 	bl	80059f0 <VL53L0X_RdByte>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8003ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff5c 	bl	8003da4 <VL53L0X_decode_timeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003ef0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff93 	bl	8003e24 <VL53L0X_calc_timeout_us>
 8003efe:	62b8      	str	r0, [r7, #40]	; 0x28
 8003f00:	e092      	b.n	8004028 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8003f02:	7afb      	ldrb	r3, [r7, #11]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d135      	bne.n	8003f74 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003f08:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2100      	movs	r1, #0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7fd fa51 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8003f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8081 	bne.w	8004028 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003f26:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7fd fa42 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8003f3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8003f42:	f107 031e 	add.w	r3, r7, #30
 8003f46:	461a      	mov	r2, r3
 8003f48:	2151      	movs	r1, #81	; 0x51
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f001 fd7a 	bl	8005a44 <VL53L0X_RdWord>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003f56:	8bfb      	ldrh	r3, [r7, #30]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff23 	bl	8003da4 <VL53L0X_decode_timeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003f62:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f68:	4619      	mov	r1, r3
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff ff5a 	bl	8003e24 <VL53L0X_calc_timeout_us>
 8003f70:	62b8      	str	r0, [r7, #40]	; 0x28
 8003f72:	e059      	b.n	8004028 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d156      	bne.n	8004028 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7fd fb25 	bl	80015d0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01d      	beq.n	8003fcc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003f90:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8003f94:	461a      	mov	r2, r3
 8003f96:	2100      	movs	r1, #0
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7fd fa0d 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8003fa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8003fac:	f107 031e 	add.w	r3, r7, #30
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2151      	movs	r1, #81	; 0x51
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f001 fd45 	bl	8005a44 <VL53L0X_RdWord>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003fc0:	8bfb      	ldrh	r3, [r7, #30]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff feee 	bl	8003da4 <VL53L0X_decode_timeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003fcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d109      	bne.n	8003fe8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003fd4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2101      	movs	r1, #1
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7fd f9eb 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8003fe8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10f      	bne.n	8004010 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8003ff0:	f107 031c 	add.w	r3, r7, #28
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2171      	movs	r1, #113	; 0x71
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f001 fd23 	bl	8005a44 <VL53L0X_RdWord>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004004:	8bbb      	ldrh	r3, [r7, #28]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fecc 	bl	8003da4 <VL53L0X_decode_timeout>
 800400c:	4603      	mov	r3, r0
 800400e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004018:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800401c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800401e:	4619      	mov	r1, r3
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff feff 	bl	8003e24 <VL53L0X_calc_timeout_us>
 8004026:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402c:	601a      	str	r2, [r3, #0]

	return Status;
 800402e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004032:	4618      	mov	r0, r3
 8004034:	3730      	adds	r7, #48	; 0x30
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08a      	sub	sp, #40	; 0x28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	460b      	mov	r3, r1
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <set_sequence_step_timeout+0x26>
 8004054:	7afb      	ldrb	r3, [r7, #11]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d138      	bne.n	80040d2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004060:	f107 031b 	add.w	r3, r7, #27
 8004064:	461a      	mov	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7fd f9a5 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8004074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11a      	bne.n	80040b2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800407c:	7efb      	ldrb	r3, [r7, #27]
 800407e:	461a      	mov	r2, r3
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fea4 	bl	8003dd0 <VL53L0X_calc_timeout_mclks>
 8004088:	4603      	mov	r3, r0
 800408a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800408c:	8bbb      	ldrh	r3, [r7, #28]
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d903      	bls.n	800409c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004094:	23ff      	movs	r3, #255	; 0xff
 8004096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800409a:	e004      	b.n	80040a6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800409c:	8bbb      	ldrh	r3, [r7, #28]
 800409e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80040a0:	3b01      	subs	r3, #1
 80040a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80040b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80ab 	bne.w	8004212 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80040bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040c0:	461a      	mov	r2, r3
 80040c2:	2146      	movs	r1, #70	; 0x46
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f001 fc11 	bl	80058ec <VL53L0X_WrByte>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80040d0:	e09f      	b.n	8004212 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d135      	bne.n	8004144 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80040d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11b      	bne.n	8004118 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040e0:	f107 031b 	add.w	r3, r7, #27
 80040e4:	461a      	mov	r2, r3
 80040e6:	2100      	movs	r1, #0
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fd f965 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80040f4:	7efb      	ldrb	r3, [r7, #27]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fe68 	bl	8003dd0 <VL53L0X_calc_timeout_mclks>
 8004100:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8004102:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8004104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fe20 	bl	8003d4c <VL53L0X_encode_timeout>
 800410c:	4603      	mov	r3, r0
 800410e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004110:	8b3a      	ldrh	r2, [r7, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004118:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800411c:	2b00      	cmp	r3, #0
 800411e:	d108      	bne.n	8004132 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8004120:	8b3b      	ldrh	r3, [r7, #24]
 8004122:	461a      	mov	r2, r3
 8004124:	2151      	movs	r1, #81	; 0x51
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f001 fc04 	bl	8005934 <VL53L0X_WrWord>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004132:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004136:	2b00      	cmp	r3, #0
 8004138:	d16b      	bne.n	8004212 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004142:	e066      	b.n	8004212 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004144:	7afb      	ldrb	r3, [r7, #11]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d160      	bne.n	800420c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800414a:	f107 0310 	add.w	r3, r7, #16
 800414e:	4619      	mov	r1, r3
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7fd fa3d 	bl	80015d0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01d      	beq.n	800419c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004160:	f107 031b 	add.w	r3, r7, #27
 8004164:	461a      	mov	r2, r3
 8004166:	2100      	movs	r1, #0
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7fd f925 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8004174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10f      	bne.n	800419c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800417c:	f107 0318 	add.w	r3, r7, #24
 8004180:	461a      	mov	r2, r3
 8004182:	2151      	movs	r1, #81	; 0x51
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f001 fc5d 	bl	8005a44 <VL53L0X_RdWord>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8004190:	8b3b      	ldrh	r3, [r7, #24]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fe06 	bl	8003da4 <VL53L0X_decode_timeout>
 8004198:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800419a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800419c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80041a4:	f107 031b 	add.w	r3, r7, #27
 80041a8:	461a      	mov	r2, r3
 80041aa:	2101      	movs	r1, #1
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7fd f903 	bl	80013b8 <VL53L0X_GetVcselPulsePeriod>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80041b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d128      	bne.n	8004212 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80041c0:	7efb      	ldrb	r3, [r7, #27]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7ff fe02 	bl	8003dd0 <VL53L0X_calc_timeout_mclks>
 80041cc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80041ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	4413      	add	r3, r2
 80041d4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80041d6:	6a38      	ldr	r0, [r7, #32]
 80041d8:	f7ff fdb8 	bl	8003d4c <VL53L0X_encode_timeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80041e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d108      	bne.n	80041fa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80041e8:	8bfb      	ldrh	r3, [r7, #30]
 80041ea:	461a      	mov	r2, r3
 80041ec:	2171      	movs	r1, #113	; 0x71
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f001 fba0 	bl	8005934 <VL53L0X_WrWord>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80041fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800420a:	e002      	b.n	8004212 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800420c:	23fc      	movs	r3, #252	; 0xfc
 800420e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8004212:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b08a      	sub	sp, #40	; 0x28
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	70fb      	strb	r3, [r7, #3]
 800422a:	4613      	mov	r3, r2
 800422c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8004234:	230c      	movs	r3, #12
 8004236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800423a:	2312      	movs	r3, #18
 800423c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8004246:	230e      	movs	r3, #14
 8004248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8004250:	78bb      	ldrb	r3, [r7, #2]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800425c:	23fc      	movs	r3, #252	; 0xfc
 800425e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004262:	e020      	b.n	80042a6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <VL53L0X_set_vcsel_pulse_period+0x68>
 800426a:	78ba      	ldrb	r2, [r7, #2]
 800426c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004270:	429a      	cmp	r2, r3
 8004272:	d304      	bcc.n	800427e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8004274:	78ba      	ldrb	r2, [r7, #2]
 8004276:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800427a:	429a      	cmp	r2, r3
 800427c:	d903      	bls.n	8004286 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800427e:	23fc      	movs	r3, #252	; 0xfc
 8004280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004284:	e00f      	b.n	80042a6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10c      	bne.n	80042a6 <VL53L0X_set_vcsel_pulse_period+0x88>
 800428c:	78ba      	ldrb	r2, [r7, #2]
 800428e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004292:	429a      	cmp	r2, r3
 8004294:	d304      	bcc.n	80042a0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8004296:	78ba      	ldrb	r2, [r7, #2]
 8004298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80042a0:	23fc      	movs	r3, #252	; 0xfc
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80042a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80042ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042b2:	e239      	b.n	8004728 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d150      	bne.n	800435c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80042ba:	78bb      	ldrb	r3, [r7, #2]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d110      	bne.n	80042e2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80042c0:	2218      	movs	r2, #24
 80042c2:	2157      	movs	r1, #87	; 0x57
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f001 fb11 	bl	80058ec <VL53L0X_WrByte>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80042d0:	2208      	movs	r2, #8
 80042d2:	2156      	movs	r1, #86	; 0x56
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f001 fb09 	bl	80058ec <VL53L0X_WrByte>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042e0:	e17f      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80042e2:	78bb      	ldrb	r3, [r7, #2]
 80042e4:	2b0e      	cmp	r3, #14
 80042e6:	d110      	bne.n	800430a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80042e8:	2230      	movs	r2, #48	; 0x30
 80042ea:	2157      	movs	r1, #87	; 0x57
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 fafd 	bl	80058ec <VL53L0X_WrByte>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80042f8:	2208      	movs	r2, #8
 80042fa:	2156      	movs	r1, #86	; 0x56
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 faf5 	bl	80058ec <VL53L0X_WrByte>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004308:	e16b      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800430a:	78bb      	ldrb	r3, [r7, #2]
 800430c:	2b10      	cmp	r3, #16
 800430e:	d110      	bne.n	8004332 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8004310:	2240      	movs	r2, #64	; 0x40
 8004312:	2157      	movs	r1, #87	; 0x57
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 fae9 	bl	80058ec <VL53L0X_WrByte>
 800431a:	4603      	mov	r3, r0
 800431c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8004320:	2208      	movs	r2, #8
 8004322:	2156      	movs	r1, #86	; 0x56
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 fae1 	bl	80058ec <VL53L0X_WrByte>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004330:	e157      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8004332:	78bb      	ldrb	r3, [r7, #2]
 8004334:	2b12      	cmp	r3, #18
 8004336:	f040 8154 	bne.w	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800433a:	2250      	movs	r2, #80	; 0x50
 800433c:	2157      	movs	r1, #87	; 0x57
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f001 fad4 	bl	80058ec <VL53L0X_WrByte>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800434a:	2208      	movs	r2, #8
 800434c:	2156      	movs	r1, #86	; 0x56
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f001 facc 	bl	80058ec <VL53L0X_WrByte>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800435a:	e142      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	2b01      	cmp	r3, #1
 8004360:	f040 813f 	bne.w	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8004364:	78bb      	ldrb	r3, [r7, #2]
 8004366:	2b08      	cmp	r3, #8
 8004368:	d14c      	bne.n	8004404 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800436a:	2210      	movs	r2, #16
 800436c:	2148      	movs	r1, #72	; 0x48
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f001 fabc 	bl	80058ec <VL53L0X_WrByte>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800437a:	2208      	movs	r2, #8
 800437c:	2147      	movs	r1, #71	; 0x47
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f001 fab4 	bl	80058ec <VL53L0X_WrByte>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800438a:	2202      	movs	r2, #2
 800438c:	2132      	movs	r1, #50	; 0x32
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 faac 	bl	80058ec <VL53L0X_WrByte>
 8004394:	4603      	mov	r3, r0
 8004396:	461a      	mov	r2, r3
 8004398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800439c:	4313      	orrs	r3, r2
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80043a2:	220c      	movs	r2, #12
 80043a4:	2130      	movs	r1, #48	; 0x30
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f001 faa0 	bl	80058ec <VL53L0X_WrByte>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80043ba:	2201      	movs	r2, #1
 80043bc:	21ff      	movs	r1, #255	; 0xff
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f001 fa94 	bl	80058ec <VL53L0X_WrByte>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80043d2:	2230      	movs	r2, #48	; 0x30
 80043d4:	2130      	movs	r1, #48	; 0x30
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 fa88 	bl	80058ec <VL53L0X_WrByte>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80043ea:	2200      	movs	r2, #0
 80043ec:	21ff      	movs	r1, #255	; 0xff
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fa7c 	bl	80058ec <VL53L0X_WrByte>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004402:	e0ee      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8004404:	78bb      	ldrb	r3, [r7, #2]
 8004406:	2b0a      	cmp	r3, #10
 8004408:	d14c      	bne.n	80044a4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800440a:	2228      	movs	r2, #40	; 0x28
 800440c:	2148      	movs	r1, #72	; 0x48
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f001 fa6c 	bl	80058ec <VL53L0X_WrByte>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800441a:	2208      	movs	r2, #8
 800441c:	2147      	movs	r1, #71	; 0x47
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f001 fa64 	bl	80058ec <VL53L0X_WrByte>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800442a:	2203      	movs	r2, #3
 800442c:	2132      	movs	r1, #50	; 0x32
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f001 fa5c 	bl	80058ec <VL53L0X_WrByte>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800443c:	4313      	orrs	r3, r2
 800443e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8004442:	2209      	movs	r2, #9
 8004444:	2130      	movs	r1, #48	; 0x30
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 fa50 	bl	80058ec <VL53L0X_WrByte>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004454:	4313      	orrs	r3, r2
 8004456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800445a:	2201      	movs	r2, #1
 800445c:	21ff      	movs	r1, #255	; 0xff
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f001 fa44 	bl	80058ec <VL53L0X_WrByte>
 8004464:	4603      	mov	r3, r0
 8004466:	461a      	mov	r2, r3
 8004468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800446c:	4313      	orrs	r3, r2
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004472:	2220      	movs	r2, #32
 8004474:	2130      	movs	r1, #48	; 0x30
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 fa38 	bl	80058ec <VL53L0X_WrByte>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004484:	4313      	orrs	r3, r2
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800448a:	2200      	movs	r2, #0
 800448c:	21ff      	movs	r1, #255	; 0xff
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fa2c 	bl	80058ec <VL53L0X_WrByte>
 8004494:	4603      	mov	r3, r0
 8004496:	461a      	mov	r2, r3
 8004498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800449c:	4313      	orrs	r3, r2
 800449e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044a2:	e09e      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80044a4:	78bb      	ldrb	r3, [r7, #2]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d14c      	bne.n	8004544 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80044aa:	2238      	movs	r2, #56	; 0x38
 80044ac:	2148      	movs	r1, #72	; 0x48
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 fa1c 	bl	80058ec <VL53L0X_WrByte>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80044ba:	2208      	movs	r2, #8
 80044bc:	2147      	movs	r1, #71	; 0x47
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 fa14 	bl	80058ec <VL53L0X_WrByte>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80044ca:	2203      	movs	r2, #3
 80044cc:	2132      	movs	r1, #50	; 0x32
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f001 fa0c 	bl	80058ec <VL53L0X_WrByte>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044dc:	4313      	orrs	r3, r2
 80044de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80044e2:	2208      	movs	r2, #8
 80044e4:	2130      	movs	r1, #48	; 0x30
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 fa00 	bl	80058ec <VL53L0X_WrByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80044fa:	2201      	movs	r2, #1
 80044fc:	21ff      	movs	r1, #255	; 0xff
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f001 f9f4 	bl	80058ec <VL53L0X_WrByte>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800450c:	4313      	orrs	r3, r2
 800450e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004512:	2220      	movs	r2, #32
 8004514:	2130      	movs	r1, #48	; 0x30
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f001 f9e8 	bl	80058ec <VL53L0X_WrByte>
 800451c:	4603      	mov	r3, r0
 800451e:	461a      	mov	r2, r3
 8004520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004524:	4313      	orrs	r3, r2
 8004526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800452a:	2200      	movs	r2, #0
 800452c:	21ff      	movs	r1, #255	; 0xff
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 f9dc 	bl	80058ec <VL53L0X_WrByte>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800453c:	4313      	orrs	r3, r2
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004542:	e04e      	b.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8004544:	78bb      	ldrb	r3, [r7, #2]
 8004546:	2b0e      	cmp	r3, #14
 8004548:	d14b      	bne.n	80045e2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800454a:	2248      	movs	r2, #72	; 0x48
 800454c:	2148      	movs	r1, #72	; 0x48
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 f9cc 	bl	80058ec <VL53L0X_WrByte>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800455a:	2208      	movs	r2, #8
 800455c:	2147      	movs	r1, #71	; 0x47
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f001 f9c4 	bl	80058ec <VL53L0X_WrByte>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800456a:	2203      	movs	r2, #3
 800456c:	2132      	movs	r1, #50	; 0x32
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 f9bc 	bl	80058ec <VL53L0X_WrByte>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800457c:	4313      	orrs	r3, r2
 800457e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8004582:	2207      	movs	r2, #7
 8004584:	2130      	movs	r1, #48	; 0x30
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 f9b0 	bl	80058ec <VL53L0X_WrByte>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004594:	4313      	orrs	r3, r2
 8004596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800459a:	2201      	movs	r2, #1
 800459c:	21ff      	movs	r1, #255	; 0xff
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 f9a4 	bl	80058ec <VL53L0X_WrByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80045b2:	2220      	movs	r2, #32
 80045b4:	2130      	movs	r1, #48	; 0x30
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f001 f998 	bl	80058ec <VL53L0X_WrByte>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80045ca:	2200      	movs	r2, #0
 80045cc:	21ff      	movs	r1, #255	; 0xff
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 f98c 	bl	80058ec <VL53L0X_WrByte>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045dc:	4313      	orrs	r3, r2
 80045de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80045e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d17f      	bne.n	80046ea <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80045ea:	78bb      	ldrb	r3, [r7, #2]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fe38 	bl	8003262 <VL53L0X_encode_vcsel_period>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d045      	beq.n	800468e <VL53L0X_set_vcsel_pulse_period+0x470>
 8004602:	e06e      	b.n	80046e2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	461a      	mov	r2, r3
 800460a:	2103      	movs	r1, #3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fc33 	bl	8003e78 <get_sequence_step_timeout>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	461a      	mov	r2, r3
 8004626:	2102      	movs	r1, #2
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fc25 	bl	8003e78 <get_sequence_step_timeout>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004634:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800463c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004640:	461a      	mov	r2, r3
 8004642:	2150      	movs	r1, #80	; 0x50
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 f951 	bl	80058ec <VL53L0X_WrByte>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004654:	2b00      	cmp	r3, #0
 8004656:	d108      	bne.n	800466a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	461a      	mov	r2, r3
 800465c:	2103      	movs	r1, #3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fceb 	bl	800403a <set_sequence_step_timeout>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800466a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	461a      	mov	r2, r3
 8004676:	2102      	movs	r1, #2
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fcde 	bl	800403a <set_sequence_step_timeout>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	78ba      	ldrb	r2, [r7, #2]
 8004688:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800468c:	e02e      	b.n	80046ec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800468e:	f107 0318 	add.w	r3, r7, #24
 8004692:	461a      	mov	r2, r3
 8004694:	2104      	movs	r1, #4
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fbee 	bl	8003e78 <get_sequence_step_timeout>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80046a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80046aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80046ae:	461a      	mov	r2, r3
 80046b0:	2170      	movs	r1, #112	; 0x70
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 f91a 	bl	80058ec <VL53L0X_WrByte>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80046be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	461a      	mov	r2, r3
 80046ca:	2104      	movs	r1, #4
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fcb4 	bl	800403a <set_sequence_step_timeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	78ba      	ldrb	r2, [r7, #2]
 80046dc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80046e0:	e004      	b.n	80046ec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80046e2:	23fc      	movs	r3, #252	; 0xfc
 80046e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80046e8:	e000      	b.n	80046ec <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80046ea:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80046ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80046fa:	69f9      	ldr	r1, [r7, #28]
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fc fe1d 	bl	800133c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8004708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8004710:	f107 010f 	add.w	r1, r7, #15
 8004714:	2301      	movs	r3, #1
 8004716:	2200      	movs	r2, #0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fe fcbd 	bl	8003098 <VL53L0X_perform_phase_calibration>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8004724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	460b      	mov	r3, r1
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004748:	2b01      	cmp	r3, #1
 800474a:	d00a      	beq.n	8004762 <VL53L0X_get_vcsel_pulse_period+0x32>
 800474c:	e013      	b.n	8004776 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800474e:	f107 0316 	add.w	r3, r7, #22
 8004752:	461a      	mov	r2, r3
 8004754:	2150      	movs	r1, #80	; 0x50
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f001 f94a 	bl	80059f0 <VL53L0X_RdByte>
 800475c:	4603      	mov	r3, r0
 800475e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004760:	e00b      	b.n	800477a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004762:	f107 0316 	add.w	r3, r7, #22
 8004766:	461a      	mov	r2, r3
 8004768:	2170      	movs	r1, #112	; 0x70
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f001 f940 	bl	80059f0 <VL53L0X_RdByte>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004774:	e001      	b.n	800477a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004776:	23fc      	movs	r3, #252	; 0xfc
 8004778:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800477a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004782:	7dbb      	ldrb	r3, [r7, #22]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fd59 	bl	800323c <VL53L0X_decode_vcsel_period>
 800478a:	4603      	mov	r3, r0
 800478c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	701a      	strb	r2, [r3, #0]

	return Status;
 8004792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b092      	sub	sp, #72	; 0x48
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80047ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80047b2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80047b4:	f240 7376 	movw	r3, #1910	; 0x776
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80047ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80047c0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80047c6:	f240 234e 	movw	r3, #590	; 0x24e
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80047cc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80047d2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80047d8:	f240 2326 	movw	r3, #550	; 0x226
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80047e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80047e6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d205      	bcs.n	8004800 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047f4:	23fc      	movs	r3, #252	; 0xfc
 80047f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80047fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80047fe:	e0aa      	b.n	8004956 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8004800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800480c:	f107 0314 	add.w	r3, r7, #20
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fedc 	bl	80015d0 <VL53L0X_GetSequenceStepEnables>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800481e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004822:	2b00      	cmp	r3, #0
 8004824:	d15b      	bne.n	80048de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8004826:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8004828:	2b00      	cmp	r3, #0
 800482a:	d105      	bne.n	8004838 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800482c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8004832:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8004834:	2b00      	cmp	r3, #0
 8004836:	d052      	beq.n	80048de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	461a      	mov	r2, r3
 800483e:	2102      	movs	r1, #2
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fb19 	bl	8003e78 <get_sequence_step_timeout>
 8004846:	4603      	mov	r3, r0
 8004848:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800484c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8004854:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004858:	e07d      	b.n	8004956 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800485a:	7d3b      	ldrb	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00f      	beq.n	8004880 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004860:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004864:	4413      	add	r3, r2
 8004866:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486c:	429a      	cmp	r2, r3
 800486e:	d204      	bcs.n	800487a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
 8004878:	e002      	b.n	8004880 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800487a:	23fc      	movs	r3, #252	; 0xfc
 800487c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004880:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8004888:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800488c:	e063      	b.n	8004956 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800488e:	7dbb      	ldrb	r3, [r7, #22]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d011      	beq.n	80048b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	4413      	add	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d204      	bcs.n	80048b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80048a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
 80048ae:	e016      	b.n	80048de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048b0:	23fc      	movs	r3, #252	; 0xfc
 80048b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80048b6:	e012      	b.n	80048de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80048b8:	7d7b      	ldrb	r3, [r7, #21]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00f      	beq.n	80048de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c2:	4413      	add	r3, r2
 80048c4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d204      	bcs.n	80048d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80048ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	643b      	str	r3, [r7, #64]	; 0x40
 80048d6:	e002      	b.n	80048de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048d8:	23fc      	movs	r3, #252	; 0xfc
 80048da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80048de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80048e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80048ea:	e034      	b.n	8004956 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d019      	beq.n	8004926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	461a      	mov	r2, r3
 80048f8:	2103      	movs	r1, #3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fabc 	bl	8003e78 <get_sequence_step_timeout>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490a:	4413      	add	r3, r2
 800490c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004912:	429a      	cmp	r2, r3
 8004914:	d204      	bcs.n	8004920 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
 800491e:	e002      	b.n	8004926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004920:	23fc      	movs	r3, #252	; 0xfc
 8004922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8004926:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800492a:	2b00      	cmp	r3, #0
 800492c:	d111      	bne.n	8004952 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800492e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00e      	beq.n	8004952 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8004934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800493c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800493e:	2104      	movs	r1, #4
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fb7a 	bl	800403a <set_sequence_step_timeout>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004952:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8004956:	4618      	mov	r0, r3
 8004958:	3748      	adds	r7, #72	; 0x48
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b090      	sub	sp, #64	; 0x40
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004968:	2300      	movs	r3, #0
 800496a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800496e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004972:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004974:	f240 7376 	movw	r3, #1910	; 0x776
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800497a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004980:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004986:	f240 234e 	movw	r3, #590	; 0x24e
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800498c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004992:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004998:	f240 2326 	movw	r3, #550	; 0x226
 800499c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80049a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	441a      	add	r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80049ac:	f107 0318 	add.w	r3, r7, #24
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc fe0c 	bl	80015d0 <VL53L0X_GetSequenceStepEnables>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80049be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80049c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80049ca:	e075      	b.n	8004ab8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80049cc:	7e3b      	ldrb	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80049d2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80049d8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d030      	beq.n	8004a40 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80049de:	f107 0310 	add.w	r3, r7, #16
 80049e2:	461a      	mov	r2, r3
 80049e4:	2102      	movs	r1, #2
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fa46 	bl	8003e78 <get_sequence_step_timeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80049f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d122      	bne.n	8004a40 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80049fa:	7e3b      	ldrb	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004a04:	6939      	ldr	r1, [r7, #16]
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004a0a:	441a      	add	r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8004a10:	7ebb      	ldrb	r3, [r7, #26]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8004a1a:	6939      	ldr	r1, [r7, #16]
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	440b      	add	r3, r1
 8004a20:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004a22:	441a      	add	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e00a      	b.n	8004a40 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8004a2a:	7e7b      	ldrb	r3, [r7, #25]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004a34:	6939      	ldr	r1, [r7, #16]
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004a3a:	441a      	add	r2, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d114      	bne.n	8004a72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8004a48:	7efb      	ldrb	r3, [r7, #27]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d011      	beq.n	8004a72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	461a      	mov	r2, r3
 8004a54:	2103      	movs	r1, #3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fa0e 	bl	8003e78 <get_sequence_step_timeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004a6c:	441a      	add	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d114      	bne.n	8004aa4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004a7a:	7f3b      	ldrb	r3, [r7, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d011      	beq.n	8004aa4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	461a      	mov	r2, r3
 8004a86:	2104      	movs	r1, #4
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff f9f5 	bl	8003e78 <get_sequence_step_timeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8004a98:	6979      	ldr	r1, [r7, #20]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004a9e:	441a      	add	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004aa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d103      	bne.n	8004ab4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ab4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3740      	adds	r7, #64	; 0x40
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004ad2:	e0c6      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	74fb      	strb	r3, [r7, #19]
		Index++;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	2bff      	cmp	r3, #255	; 0xff
 8004ae8:	f040 808d 	bne.w	8004c06 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	747b      	strb	r3, [r7, #17]
			Index++;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8004afc:	7c7b      	ldrb	r3, [r7, #17]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d87e      	bhi.n	8004c00 <VL53L0X_load_tuning_settings+0x140>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <VL53L0X_load_tuning_settings+0x48>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b53 	.word	0x08004b53
 8004b10:	08004b8d 	.word	0x08004b8d
 8004b14:	08004bc7 	.word	0x08004bc7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	743b      	strb	r3, [r7, #16]
				Index++;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3301      	adds	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3301      	adds	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004b38:	7c3b      	ldrb	r3, [r7, #16]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	89ba      	ldrh	r2, [r7, #12]
 8004b4c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8004b50:	e087      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	743b      	strb	r3, [r7, #16]
				Index++;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004b72:	7c3b      	ldrb	r3, [r7, #16]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	89ba      	ldrh	r2, [r7, #12]
 8004b86:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8004b8a:	e06a      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	743b      	strb	r3, [r7, #16]
				Index++;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004bac:	7c3b      	ldrb	r3, [r7, #16]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	89ba      	ldrh	r2, [r7, #12]
 8004bc0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8004bc4:	e04d      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	743b      	strb	r3, [r7, #16]
				Index++;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	4413      	add	r3, r2
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3301      	adds	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004be6:	7c3b      	ldrb	r3, [r7, #16]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	89ba      	ldrh	r2, [r7, #12]
 8004bfa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8004bfe:	e030      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c00:	23fc      	movs	r3, #252	; 0xfc
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e02d      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d828      	bhi.n	8004c5e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	74bb      	strb	r3, [r7, #18]
			Index++;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e00f      	b.n	8004c42 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	4413      	add	r3, r2
 8004c28:	7819      	ldrb	r1, [r3, #0]
 8004c2a:	f107 0208 	add.w	r2, r7, #8
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4413      	add	r3, r2
 8004c32:	460a      	mov	r2, r1
 8004c34:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	dbeb      	blt.n	8004c22 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	f107 0208 	add.w	r2, r7, #8
 8004c50:	7cb9      	ldrb	r1, [r7, #18]
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fdee 	bl	8005834 <VL53L0X_WriteMulti>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e001      	b.n	8004c62 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c5e:	23fc      	movs	r3, #252	; 0xfc
 8004c60:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <VL53L0X_load_tuning_settings+0x1b8>
 8004c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f43f af2e 	beq.w	8004ad4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8004c9a:	f107 0313 	add.w	r3, r7, #19
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7fc fd21 	bl	80016e8 <VL53L0X_GetXTalkCompensationEnable>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8004caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d111      	bne.n	8004cd6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8004cb2:	7cfb      	ldrb	r3, [r7, #19]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00e      	beq.n	8004cd6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	8a9b      	ldrh	r3, [r3, #20]
 8004cc2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3380      	adds	r3, #128	; 0x80
 8004cd0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8004cd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b086      	sub	sp, #24
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8004cfa:	f107 0310 	add.w	r3, r7, #16
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff ffbe 	bl	8004c84 <VL53L0X_get_total_xtalk_rate>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8004d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]

	return Status;
 8004d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09a      	sub	sp, #104	; 0x68
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8004d3a:	2312      	movs	r3, #18
 8004d3c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8004d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d42:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8004d44:	2342      	movs	r3, #66	; 0x42
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8004d48:	2306      	movs	r3, #6
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8004d4c:	2307      	movs	r3, #7
 8004d4e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	3380      	adds	r3, #128	; 0x80
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01a      	beq.n	8004dc2 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	029b      	lsls	r3, r3, #10
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8004d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d98:	4413      	add	r3, r2
 8004d9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8004d9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8004da6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8004db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db2:	fb03 f303 	mul.w	r3, r3, r3
 8004db6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8004db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	fb03 f303 	mul.w	r3, r3, r3
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8004dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8004de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dea:	085a      	lsrs	r2, r3, #1
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	441a      	add	r2, r3
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d302      	bcc.n	8004e10 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <VL53L0X_calc_dmax+0x230>)
 8004e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0e:	e015      	b.n	8004e3c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8004e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e12:	085a      	lsrs	r2, r3, #1
 8004e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e16:	441a      	add	r2, r3
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8004e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8004e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8004e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e36:	fb03 f303 	mul.w	r3, r3, r3
 8004e3a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3e:	039b      	lsls	r3, r3, #14
 8004e40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004e44:	4a46      	ldr	r2, [pc, #280]	; (8004f60 <VL53L0X_calc_dmax+0x234>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	fb03 f303 	mul.w	r3, r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8004e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e58:	fb03 f303 	mul.w	r3, r3, r3
 8004e5c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	3308      	adds	r3, #8
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004e80:	0b9b      	lsrs	r3, r3, #14
 8004e82:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8004e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e88:	4413      	add	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8004e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4413      	add	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	039b      	lsls	r3, r3, #14
 8004ea4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4413      	add	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004eca:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <VL53L0X_calc_dmax+0x234>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	099b      	lsrs	r3, r3, #6
 8004ed2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <VL53L0X_calc_dmax+0x234>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8004eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eec:	3380      	adds	r3, #128	; 0x80
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	085a      	lsrs	r2, r3, #1
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	441a      	add	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f08:	e001      	b.n	8004f0e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8004f0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004f10:	f7fe f9ba 	bl	8003288 <VL53L0X_isqrt>
 8004f14:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	085a      	lsrs	r2, r3, #1
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	441a      	add	r2, r3
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2c:	e001      	b.n	8004f32 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8004f32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004f34:	f7fe f9a8 	bl	8003288 <VL53L0X_isqrt>
 8004f38:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8004f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d902      	bls.n	8004f4e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8004f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f4c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8004f4e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3768      	adds	r7, #104	; 0x68
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	fff00000 	.word	0xfff00000
 8004f60:	10624dd3 	.word	0x10624dd3

08004f64 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b0b4      	sub	sp, #208	; 0xd0
 8004f68:	af04      	add	r7, sp, #16
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8004f72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8004f7a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8004f82:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8004f86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8004f8a:	f241 235c 	movw	r3, #4700	; 0x125c
 8004f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8004f92:	4b9e      	ldr	r3, [pc, #632]	; (800520c <VL53L0X_calc_sigma_estimate+0x2a8>)
 8004f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8004f98:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8004f9e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8004fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8004fac:	4b98      	ldr	r3, [pc, #608]	; (8005210 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8004fae:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8004fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8004fb6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8004fba:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8004fbc:	f240 6377 	movw	r3, #1655	; 0x677
 8004fc0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8004fe4:	f107 0310 	add.w	r3, r7, #16
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fe78 	bl	8004ce2 <VL53L0X_get_total_signal_rate>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff fe3f 	bl	8004c84 <VL53L0X_get_total_xtalk_rate>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005030:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	429a      	cmp	r2, r3
 8005038:	d902      	bls.n	8005040 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800503a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005040:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005044:	2b00      	cmp	r3, #0
 8005046:	d168      	bne.n	800511a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800504e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005058:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800505c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005060:	461a      	mov	r2, r3
 8005062:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7fe feb2 	bl	8003dd0 <VL53L0X_calc_timeout_mclks>
 800506c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800507e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005082:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005086:	461a      	mov	r2, r3
 8005088:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7fe fe9f 	bl	8003dd0 <VL53L0X_calc_timeout_mclks>
 8005092:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8005094:	2303      	movs	r3, #3
 8005096:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800509a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d102      	bne.n	80050a8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80050a2:	2302      	movs	r3, #2
 80050a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80050a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ac:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80050ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	02db      	lsls	r3, r3, #11
 80050b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80050bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050c4:	4a53      	ldr	r2, [pc, #332]	; (8005214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80050d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80050de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050e6:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3380      	adds	r3, #128	; 0x80
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800510c:	3380      	adds	r3, #128	; 0x80
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800511a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8005122:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005126:	e15e      	b.n	80053e6 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8005128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005134:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800513c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e14c      	b.n	80053e2 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8005150:	2301      	movs	r3, #1
 8005152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8005156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800515a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800515c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515e:	041a      	lsls	r2, r3, #16
 8005160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800516a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800516e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005170:	429a      	cmp	r2, r3
 8005172:	d902      	bls.n	800517a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8005174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800517a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800517e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800518a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe f876 	bl	8003288 <VL53L0X_isqrt>
 800519c:	4603      	mov	r3, r0
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	891b      	ldrh	r3, [r3, #8]
 80051a6:	461a      	mov	r2, r3
 80051a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80051b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80051b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051b8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80051ba:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80051bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80051c0:	4a14      	ldr	r2, [pc, #80]	; (8005214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80051ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051d2:	4a10      	ldr	r2, [pc, #64]	; (8005214 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	099b      	lsrs	r3, r3, #6
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80051e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfb8      	it	lt
 80051ee:	425b      	neglt	r3, r3
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	7e1b      	ldrb	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8005200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005208:	e033      	b.n	8005272 <VL53L0X_calc_sigma_estimate+0x30e>
 800520a:	bf00      	nop
 800520c:	028f87ae 	.word	0x028f87ae
 8005210:	0006999a 	.word	0x0006999a
 8005214:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800521a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800522c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005230:	fb02 f303 	mul.w	r3, r2, r3
 8005234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800523c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800523e:	4413      	add	r3, r2
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8005246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800524a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800524e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8005252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800525c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005260:	fb03 f303 	mul.w	r3, r3, r3
 8005264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800526c:	0b9b      	lsrs	r3, r3, #14
 800526e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8005272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005284:	0c1b      	lsrs	r3, r3, #16
 8005286:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	fb03 f303 	mul.w	r3, r3, r3
 800528e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8005290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	fb03 f303 	mul.w	r3, r3, r3
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80052a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	4413      	add	r3, r2
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80052b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b2:	f7fd ffe9 	bl	8003288 <VL53L0X_isqrt>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	3332      	adds	r3, #50	; 0x32
 80052c2:	4a4b      	ldr	r2, [pc, #300]	; (80053f0 <VL53L0X_calc_sigma_estimate+0x48c>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	095a      	lsrs	r2, r3, #5
 80052ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80052d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052d8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
 80052e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80052e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80052ec:	3308      	adds	r3, #8
 80052ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80052f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052f6:	4a3f      	ldr	r2, [pc, #252]	; (80053f4 <VL53L0X_calc_sigma_estimate+0x490>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	0b5b      	lsrs	r3, r3, #13
 80052fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8005302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005308:	429a      	cmp	r2, r3
 800530a:	d902      	bls.n	8005312 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800530c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800530e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8005312:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800531a:	4413      	add	r3, r2
 800531c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8005320:	4a35      	ldr	r2, [pc, #212]	; (80053f8 <VL53L0X_calc_sigma_estimate+0x494>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800532e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005332:	441a      	add	r2, r3
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	4618      	mov	r0, r3
 800533c:	f7fd ffa4 	bl	8003288 <VL53L0X_isqrt>
 8005340:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800534e:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <VL53L0X_calc_sigma_estimate+0x494>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800535c:	fb03 f303 	mul.w	r3, r3, r3
 8005360:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fb03 f303 	mul.w	r3, r3, r3
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800536a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	4413      	add	r3, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd ff89 	bl	8003288 <VL53L0X_isqrt>
 8005376:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8005386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <VL53L0X_calc_sigma_estimate+0x43c>
 800538c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <VL53L0X_calc_sigma_estimate+0x43c>
 8005394:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800539c:	429a      	cmp	r2, r3
 800539e:	d903      	bls.n	80053a8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80053a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80053ae:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80053ba:	6939      	ldr	r1, [r7, #16]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053c4:	9302      	str	r3, [sp, #8]
 80053c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fca8 	bl	8004d2c <VL53L0X_calc_dmax>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053e2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	37c0      	adds	r7, #192	; 0xc0
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	51eb851f 	.word	0x51eb851f
 80053f4:	d1b71759 	.word	0xd1b71759
 80053f8:	10624dd3 	.word	0x10624dd3

080053fc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b090      	sub	sp, #64	; 0x40
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	461a      	mov	r2, r3
 8005408:	460b      	mov	r3, r1
 800540a:	72fb      	strb	r3, [r7, #11]
 800540c:	4613      	mov	r3, r2
 800540e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005410:	2300      	movs	r3, #0
 8005412:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	10db      	asrs	r3, r3, #3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800545c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <VL53L0X_get_pal_range_status+0x98>
 8005464:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005468:	2b05      	cmp	r3, #5
 800546a:	d013      	beq.n	8005494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800546c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005470:	2b07      	cmp	r3, #7
 8005472:	d00f      	beq.n	8005494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8005474:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d00b      	beq.n	8005494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800547c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005480:	2b0d      	cmp	r3, #13
 8005482:	d007      	beq.n	8005494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8005484:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005488:	2b0e      	cmp	r3, #14
 800548a:	d003      	beq.n	8005494 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800548c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005490:	2b0f      	cmp	r3, #15
 8005492:	d103      	bne.n	800549c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800549a:	e002      	b.n	80054a2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80054a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80054aa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80054ae:	461a      	mov	r2, r3
 80054b0:	2100      	movs	r1, #0
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7fc f9ec 	bl	8001890 <VL53L0X_GetLimitCheckEnable>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80054be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02e      	beq.n	8005524 <VL53L0X_get_pal_range_status+0x128>
 80054c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d12a      	bne.n	8005524 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80054ce:	f107 0310 	add.w	r3, r7, #16
 80054d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80054d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fd43 	bl	8004f64 <VL53L0X_calc_sigma_estimate>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80054e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80054f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d113      	bne.n	8005524 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80054fc:	f107 0320 	add.w	r3, r7, #32
 8005500:	461a      	mov	r2, r3
 8005502:	2100      	movs	r1, #0
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7fc fa49 	bl	800199c <VL53L0X_GetLimitCheckValue>
 800550a:	4603      	mov	r3, r0
 800550c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d006      	beq.n	8005524 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800551a:	429a      	cmp	r2, r3
 800551c:	d902      	bls.n	8005524 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005524:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800552c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8005530:	461a      	mov	r2, r3
 8005532:	2102      	movs	r1, #2
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7fc f9ab 	bl	8001890 <VL53L0X_GetLimitCheckEnable>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8005540:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005544:	2b00      	cmp	r3, #0
 8005546:	d044      	beq.n	80055d2 <VL53L0X_get_pal_range_status+0x1d6>
 8005548:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800554c:	2b00      	cmp	r3, #0
 800554e:	d140      	bne.n	80055d2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005550:	f107 031c 	add.w	r3, r7, #28
 8005554:	461a      	mov	r2, r3
 8005556:	2102      	movs	r1, #2
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7fc fa1f 	bl	800199c <VL53L0X_GetLimitCheckValue>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8005564:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800556c:	2201      	movs	r2, #1
 800556e:	21ff      	movs	r1, #255	; 0xff
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f9bb 	bl	80058ec <VL53L0X_WrByte>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800557c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8005584:	f107 0316 	add.w	r3, r7, #22
 8005588:	461a      	mov	r2, r3
 800558a:	21b6      	movs	r1, #182	; 0xb6
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fa59 	bl	8005a44 <VL53L0X_RdWord>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005598:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055a0:	2200      	movs	r2, #0
 80055a2:	21ff      	movs	r1, #255	; 0xff
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f9a1 	bl	80058ec <VL53L0X_WrByte>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80055b0:	8afb      	ldrh	r3, [r7, #22]
 80055b2:	025b      	lsls	r3, r3, #9
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d006      	beq.n	80055d2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80055c4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d902      	bls.n	80055d2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80055d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80055da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055de:	461a      	mov	r2, r3
 80055e0:	2103      	movs	r1, #3
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7fc f954 	bl	8001890 <VL53L0X_GetLimitCheckEnable>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80055ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d023      	beq.n	800563e <VL53L0X_get_pal_range_status+0x242>
 80055f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11f      	bne.n	800563e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
 8005608:	e005      	b.n	8005616 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	021a      	lsls	r2, r3, #8
 800560e:	893b      	ldrh	r3, [r7, #8]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005616:	f107 0318 	add.w	r3, r7, #24
 800561a:	461a      	mov	r2, r3
 800561c:	2103      	movs	r1, #3
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7fc f9bc 	bl	800199c <VL53L0X_GetLimitCheckValue>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d006      	beq.n	800563e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8005630:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8005632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005634:	429a      	cmp	r2, r3
 8005636:	d202      	bcs.n	800563e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800563e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005642:	2b00      	cmp	r3, #0
 8005644:	d14a      	bne.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8005646:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800564a:	2b01      	cmp	r3, #1
 800564c:	d103      	bne.n	8005656 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800564e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e042      	b.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8005656:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800565a:	2b01      	cmp	r3, #1
 800565c:	d007      	beq.n	800566e <VL53L0X_get_pal_range_status+0x272>
 800565e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005662:	2b02      	cmp	r3, #2
 8005664:	d003      	beq.n	800566e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8005666:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800566a:	2b03      	cmp	r3, #3
 800566c:	d103      	bne.n	8005676 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	2205      	movs	r2, #5
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	e032      	b.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8005676:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800567a:	2b06      	cmp	r3, #6
 800567c:	d003      	beq.n	8005686 <VL53L0X_get_pal_range_status+0x28a>
 800567e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005682:	2b09      	cmp	r3, #9
 8005684:	d103      	bne.n	800568e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8005686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005688:	2204      	movs	r2, #4
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e026      	b.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800568e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005692:	2b08      	cmp	r3, #8
 8005694:	d007      	beq.n	80056a6 <VL53L0X_get_pal_range_status+0x2aa>
 8005696:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800569a:	2b0a      	cmp	r3, #10
 800569c:	d003      	beq.n	80056a6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800569e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d103      	bne.n	80056ae <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80056a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a8:	2203      	movs	r2, #3
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	e016      	b.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80056ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d003      	beq.n	80056be <VL53L0X_get_pal_range_status+0x2c2>
 80056b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d103      	bne.n	80056c6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80056be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e00a      	b.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80056c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d103      	bne.n	80056d6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80056ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e002      	b.n	80056dc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80056dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80056e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e6:	2200      	movs	r2, #0
 80056e8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80056ea:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80056ee:	461a      	mov	r2, r3
 80056f0:	2101      	movs	r1, #1
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7fc f8cc 	bl	8001890 <VL53L0X_GetLimitCheckEnable>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80056fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005702:	2b00      	cmp	r3, #0
 8005704:	d14f      	bne.n	80057a6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8005706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <VL53L0X_get_pal_range_status+0x31a>
 800570e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005712:	2b01      	cmp	r3, #1
 8005714:	d103      	bne.n	800571e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571c:	e002      	b.n	8005724 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800572a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800572e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005732:	2b04      	cmp	r3, #4
 8005734:	d003      	beq.n	800573e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8005736:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005744:	e002      	b.n	800574c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005752:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8005756:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <VL53L0X_get_pal_range_status+0x36a>
 800575e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d103      	bne.n	800576e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576c:	e002      	b.n	8005774 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800577a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800577e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <VL53L0X_get_pal_range_status+0x392>
 8005786:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800578a:	2b01      	cmp	r3, #1
 800578c:	d103      	bne.n	8005796 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005794:	e002      	b.n	800579c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80057a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3740      	adds	r7, #64	; 0x40
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b088      	sub	sp, #32
 80057b6:	af02      	add	r7, sp, #8
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	330a      	adds	r3, #10
 80057c2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80057d0:	b299      	uxth	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	f001 f83d 	bl	800685c <HAL_I2C_Master_Transmit>
 80057e2:	4603      	mov	r3, r0
 80057e4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80057e6:	693b      	ldr	r3, [r7, #16]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	330a      	adds	r3, #10
 8005800:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	b299      	uxth	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	b29a      	uxth	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4613      	mov	r3, r2
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	f001 f919 	bl	8006a58 <HAL_I2C_Master_Receive>
 8005826:	4603      	mov	r3, r0
 8005828:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800582a:	693b      	ldr	r3, [r7, #16]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	460b      	mov	r3, r1
 8005842:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b3f      	cmp	r3, #63	; 0x3f
 800584c:	d902      	bls.n	8005854 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800584e:	f06f 0303 	mvn.w	r3, #3
 8005852:	e016      	b.n	8005882 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8005854:	4a0d      	ldr	r2, [pc, #52]	; (800588c <VL53L0X_WriteMulti+0x58>)
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	480c      	ldr	r0, [pc, #48]	; (8005890 <VL53L0X_WriteMulti+0x5c>)
 8005860:	f002 fe02 	bl	8008468 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	461a      	mov	r2, r3
 800586a:	4908      	ldr	r1, [pc, #32]	; (800588c <VL53L0X_WriteMulti+0x58>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff ffa0 	bl	80057b2 <_I2CWrite>
 8005872:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800587a:	23ec      	movs	r3, #236	; 0xec
 800587c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800587e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000590 	.word	0x20000590
 8005890:	20000591 	.word	0x20000591

08005894 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	460b      	mov	r3, r1
 80058a2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80058a8:	f107 030b 	add.w	r3, r7, #11
 80058ac:	2201      	movs	r2, #1
 80058ae:	4619      	mov	r1, r3
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff ff7e 	bl	80057b2 <_I2CWrite>
 80058b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80058be:	23ec      	movs	r3, #236	; 0xec
 80058c0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80058c2:	e00c      	b.n	80058de <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff91 	bl	80057f0 <_I2CRead>
 80058ce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80058d6:	23ec      	movs	r3, #236	; 0xec
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e000      	b.n	80058de <VL53L0X_ReadMulti+0x4a>
    }
done:
 80058dc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80058de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
 80058f8:	4613      	mov	r3, r2
 80058fa:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005900:	4a0b      	ldr	r2, [pc, #44]	; (8005930 <VL53L0X_WrByte+0x44>)
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <VL53L0X_WrByte+0x44>)
 8005908:	78bb      	ldrb	r3, [r7, #2]
 800590a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800590c:	2202      	movs	r2, #2
 800590e:	4908      	ldr	r1, [pc, #32]	; (8005930 <VL53L0X_WrByte+0x44>)
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ff4e 	bl	80057b2 <_I2CWrite>
 8005916:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800591e:	23ec      	movs	r3, #236	; 0xec
 8005920:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000590 	.word	0x20000590

08005934 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
 8005940:	4613      	mov	r3, r2
 8005942:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005948:	4a0e      	ldr	r2, [pc, #56]	; (8005984 <VL53L0X_WrWord+0x50>)
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800594e:	883b      	ldrh	r3, [r7, #0]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	b29b      	uxth	r3, r3
 8005954:	b2da      	uxtb	r2, r3
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <VL53L0X_WrWord+0x50>)
 8005958:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800595a:	883b      	ldrh	r3, [r7, #0]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <VL53L0X_WrWord+0x50>)
 8005960:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005962:	2203      	movs	r2, #3
 8005964:	4907      	ldr	r1, [pc, #28]	; (8005984 <VL53L0X_WrWord+0x50>)
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff ff23 	bl	80057b2 <_I2CWrite>
 800596c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005974:	23ec      	movs	r3, #236	; 0xec
 8005976:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000590 	.word	0x20000590

08005988 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	461a      	mov	r2, r3
 8005996:	4603      	mov	r3, r0
 8005998:	70fb      	strb	r3, [r7, #3]
 800599a:	460b      	mov	r3, r1
 800599c:	70bb      	strb	r3, [r7, #2]
 800599e:	4613      	mov	r3, r2
 80059a0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80059a6:	f107 020e 	add.w	r2, r7, #14
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f81e 	bl	80059f0 <VL53L0X_RdByte>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80059b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d110      	bne.n	80059e2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80059c0:	7bba      	ldrb	r2, [r7, #14]
 80059c2:	78bb      	ldrb	r3, [r7, #2]
 80059c4:	4013      	ands	r3, r2
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	787b      	ldrb	r3, [r7, #1]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80059d0:	7bba      	ldrb	r2, [r7, #14]
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff ff88 	bl	80058ec <VL53L0X_WrByte>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]
 80059e0:	e000      	b.n	80059e4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80059e2:	bf00      	nop
done:
    return Status;
 80059e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	460b      	mov	r3, r1
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005a02:	f107 030b 	add.w	r3, r7, #11
 8005a06:	2201      	movs	r2, #1
 8005a08:	4619      	mov	r1, r3
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff fed1 	bl	80057b2 <_I2CWrite>
 8005a10:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a18:	23ec      	movs	r3, #236	; 0xec
 8005a1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005a1c:	e00c      	b.n	8005a38 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005a1e:	2201      	movs	r2, #1
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fee4 	bl	80057f0 <_I2CRead>
 8005a28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a30:	23ec      	movs	r3, #236	; 0xec
 8005a32:	75fb      	strb	r3, [r7, #23]
 8005a34:	e000      	b.n	8005a38 <VL53L0X_RdByte+0x48>
    }
done:
 8005a36:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005a56:	f107 030b 	add.w	r3, r7, #11
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff fea7 	bl	80057b2 <_I2CWrite>
 8005a64:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a6c:	23ec      	movs	r3, #236	; 0xec
 8005a6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005a70:	e017      	b.n	8005aa2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005a72:	2202      	movs	r2, #2
 8005a74:	490e      	ldr	r1, [pc, #56]	; (8005ab0 <VL53L0X_RdWord+0x6c>)
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff feba 	bl	80057f0 <_I2CRead>
 8005a7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a84:	23ec      	movs	r3, #236	; 0xec
 8005a86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005a88:	e00b      	b.n	8005aa2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <VL53L0X_RdWord+0x6c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <VL53L0X_RdWord+0x6c>)
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000590 	.word	0x20000590

08005ab4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	460b      	mov	r3, r1
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005ac6:	f107 030b 	add.w	r3, r7, #11
 8005aca:	2201      	movs	r2, #1
 8005acc:	4619      	mov	r1, r3
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fe6f 	bl	80057b2 <_I2CWrite>
 8005ad4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005adc:	23ec      	movs	r3, #236	; 0xec
 8005ade:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005ae0:	e01b      	b.n	8005b1a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	4910      	ldr	r1, [pc, #64]	; (8005b28 <VL53L0X_RdDWord+0x74>)
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff fe82 	bl	80057f0 <_I2CRead>
 8005aec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005af4:	23ec      	movs	r3, #236	; 0xec
 8005af6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005af8:	e00f      	b.n	8005b1a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <VL53L0X_RdDWord+0x74>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	061a      	lsls	r2, r3, #24
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <VL53L0X_RdDWord+0x74>)
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	441a      	add	r2, r3
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <VL53L0X_RdDWord+0x74>)
 8005b0a:	789b      	ldrb	r3, [r3, #2]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	4413      	add	r3, r2
 8005b10:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <VL53L0X_RdDWord+0x74>)
 8005b12:	78d2      	ldrb	r2, [r2, #3]
 8005b14:	441a      	add	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8005b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000590 	.word	0x20000590

08005b2c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f000 faa3 	bl	8006084 <HAL_Delay>
    return status;
 8005b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"JMEr%d", err);
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4905      	ldr	r1, [pc, #20]	; (8005b70 <HandleError+0x24>)
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f002 fc99 	bl	8008494 <siprintf>
    F411_SetDisplayString(msg);
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f824 	bl	8005bb4 <F411_SetDisplayString>
    while(1){};
 8005b6c:	e7fe      	b.n	8005b6c <HandleError+0x20>
 8005b6e:	bf00      	nop
 8005b70:	08008d04 	.word	0x08008d04

08005b74 <VL53L0X_ResetId>:





int VL53L0X_ResetId(int DevNo, int state) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
    int status=0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
/// AFAIRE RESET


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b88:	4809      	ldr	r0, [pc, #36]	; (8005bb0 <VL53L0X_ResetId+0x3c>)
 8005b8a:	f000 fd09 	bl	80065a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005b8e:	2064      	movs	r0, #100	; 0x64
 8005b90:	f000 fa78 	bl	8006084 <HAL_Delay>
    if( state )
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <VL53L0X_ResetId+0x32>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ba0:	4803      	ldr	r0, [pc, #12]	; (8005bb0 <VL53L0X_ResetId+0x3c>)
 8005ba2:	f000 fcfd 	bl	80065a0 <HAL_GPIO_WritePin>

    return status;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40020000 	.word	0x40020000

08005bb4 <F411_SetDisplayString>:

extern UART_HandleTypeDef huart2;

int F411_SetDisplayString(const char *str) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

	int status=1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
	 HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 0xFFFF);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fa fb0d 	bl	80001e0 <strlen>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4803      	ldr	r0, [pc, #12]	; (8005be0 <F411_SetDisplayString+0x2c>)
 8005bd2:	f002 f956 	bl	8007e82 <HAL_UART_Transmit>

    return status;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000548 	.word	0x20000548

08005be4 <DetectSensors>:





int DetectSensors(int SetDisplay) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
    int status;
    int FinalAddress;

    debug_printf("Detect Sensor");
    /* Reset all */
    nDevPresent = 0;
 8005bec:	4b4c      	ldr	r3, [pc, #304]	; (8005d20 <DetectSensors+0x13c>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]


        status = VL53L0X_ResetId(0, 0);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f7ff ffbd 	bl	8005b74 <VL53L0X_ResetId>
 8005bfa:	61f8      	str	r0, [r7, #28]


i =0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    /* detect all sensors (even on-board)*/
  //  for (i = 0; i < 1; i++) {
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	4a46      	ldr	r2, [pc, #280]	; (8005d24 <DetectSensors+0x140>)
 8005c0c:	4413      	add	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2252      	movs	r2, #82	; 0x52
 8005c14:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = 0;  // // FAIRE FONCTION RESET
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]
        VL53L0X_ResetId( pDev->Id, 1);        HAL_Delay(2);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ffa1 	bl	8005b74 <VL53L0X_ResetId>
 8005c32:	2002      	movs	r0, #2
 8005c34:	f000 fa26 	bl	8006084 <HAL_Delay>
        FinalAddress=0x52+(i+1+1)*2;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	332b      	adds	r3, #43	; 0x2b
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <DetectSensors+0x70>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2188      	movs	r1, #136	; 0x88
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	f7ff fe4e 	bl	80058ec <VL53L0X_WrByte>
 8005c50:	4603      	mov	r3, r0
 8005c52:	61fb      	str	r3, [r7, #28]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8005c54:	f107 030e 	add.w	r3, r7, #14
 8005c58:	461a      	mov	r2, r3
 8005c5a:	21c0      	movs	r1, #192	; 0xc0
 8005c5c:	6978      	ldr	r0, [r7, #20]
 8005c5e:	f7ff fef1 	bl	8005a44 <VL53L0X_RdWord>
 8005c62:	4603      	mov	r3, r0
 8005c64:	61fb      	str	r3, [r7, #28]
            if (status) {
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d142      	bne.n	8005cf2 <DetectSensors+0x10e>
                debug_printf("#%d Read id fail\n", i);
                break;
            }
            if (Id == 0xEEAA) {
 8005c6c:	89fb      	ldrh	r3, [r7, #14]
 8005c6e:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d13a      	bne.n	8005cec <DetectSensors+0x108>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6978      	ldr	r0, [r7, #20]
 8005c7e:	f7fa ff71 	bl	8000b64 <VL53L0X_SetDeviceAddress>
 8005c82:	4603      	mov	r3, r0
 8005c84:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d134      	bne.n	8005cf6 <DetectSensors+0x112>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
                    break;
                }
                pDev->I2cDevAddr = FinalAddress;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8005c96:	f107 030e 	add.w	r3, r7, #14
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	21c0      	movs	r1, #192	; 0xc0
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f7ff fed0 	bl	8005a44 <VL53L0X_RdWord>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d125      	bne.n	8005cfa <DetectSensors+0x116>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
					break;
				}

                status = VL53L0X_DataInit(pDev);
 8005cae:	6978      	ldr	r0, [r7, #20]
 8005cb0:	f7fa ff70 	bl	8000b94 <VL53L0X_DataInit>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	61fb      	str	r3, [r7, #28]
                if( status == 0 ){
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11f      	bne.n	8005cfe <DetectSensors+0x11a>
                    pDev->Present = 1;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
                nDevPresent++;
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <DetectSensors+0x13c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <DetectSensors+0x13c>)
 8005cce:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << (i+1);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <DetectSensors+0x144>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <DetectSensors+0x144>)
 8005ce0:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8005cea:	e009      	b.n	8005d00 <DetectSensors+0x11c>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
                status = 1;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e006      	b.n	8005d00 <DetectSensors+0x11c>
                break;
 8005cf2:	bf00      	nop
 8005cf4:	e004      	b.n	8005d00 <DetectSensors+0x11c>
                    break;
 8005cf6:	bf00      	nop
 8005cf8:	e002      	b.n	8005d00 <DetectSensors+0x11c>
					break;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <DetectSensors+0x11c>
                    break;
 8005cfe:	bf00      	nop
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <DetectSensors+0x12e>
            VL53L0X_ResetId(i+1, 0);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff ff31 	bl	8005b74 <VL53L0X_ResetId>
        }
    //}
    return nDevPresent;
 8005d12:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <DetectSensors+0x13c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200004e4 	.word	0x200004e4
 8005d24:	200002c0 	.word	0x200002c0
 8005d28:	2000058c 	.word	0x2000058c

08005d2c <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8005d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8005d3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t timingBudget = 33000;
 8005d42:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t preRangeVcselPeriod = 14;
 8005d48:	230e      	movs	r3, #14
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t finalRangeVcselPeriod = 10;
 8005d4e:	230a      	movs	r3, #10
 8005d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

 //   for( i=0; i<3; i++){
	i=0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61fb      	str	r3, [r7, #28]
        if( VL53L0XDevs[i].Present){
 8005d58:	4a80      	ldr	r2, [pc, #512]	; (8005f5c <SetupSingleShot+0x230>)
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80f0 	beq.w	8005f52 <SetupSingleShot+0x226>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
 8005d7c:	4a77      	ldr	r2, [pc, #476]	; (8005f5c <SetupSingleShot+0x230>)
 8005d7e:	4413      	add	r3, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fb f86b 	bl	8000e5c <VL53L0X_StaticInit>
 8005d86:	4603      	mov	r3, r0
 8005d88:	61bb      	str	r3, [r7, #24]
            if( status ){
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	4a71      	ldr	r2, [pc, #452]	; (8005f5c <SetupSingleShot+0x230>)
 8005d96:	4413      	add	r3, r2
 8005d98:	f107 0216 	add.w	r2, r7, #22
 8005d9c:	f107 0117 	add.w	r1, r7, #23
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fb feef 	bl	8001b84 <VL53L0X_PerformRefCalibration>
 8005da6:	4603      	mov	r3, r0
 8005da8:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	4a69      	ldr	r2, [pc, #420]	; (8005f5c <SetupSingleShot+0x230>)
 8005db6:	4413      	add	r3, r2
 8005db8:	f107 020f 	add.w	r2, r7, #15
 8005dbc:	f107 0110 	add.w	r1, r7, #16
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fc fb6d 	bl	80024a0 <VL53L0X_PerformRefSpadManagement>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	4a61      	ldr	r2, [pc, #388]	; (8005f5c <SetupSingleShot+0x230>)
 8005dd6:	4413      	add	r3, r2
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fb fa50 	bl	8001280 <VL53L0X_SetDeviceMode>
 8005de0:	4603      	mov	r3, r0
 8005de2:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetDeviceMode failed\n");
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	4a5b      	ldr	r2, [pc, #364]	; (8005f5c <SetupSingleShot+0x230>)
 8005df0:	4413      	add	r3, r2
 8005df2:	2201      	movs	r2, #1
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fb fcbe 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	4a54      	ldr	r2, [pc, #336]	; (8005f5c <SetupSingleShot+0x230>)
 8005e0c:	4413      	add	r3, r2
 8005e0e:	2201      	movs	r2, #1
 8005e10:	2101      	movs	r1, #1
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fb fcb0 	bl	8001778 <VL53L0X_SetLimitCheckEnable>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d016      	beq.n	8005e50 <SetupSingleShot+0x124>
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	dc33      	bgt.n	8005e8e <SetupSingleShot+0x162>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <SetupSingleShot+0x104>
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d01f      	beq.n	8005e6e <SetupSingleShot+0x142>
 8005e2e:	e02e      	b.n	8005e8e <SetupSingleShot+0x162>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 8005e30:	f641 1399 	movw	r3, #6553	; 0x1999
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 8005e36:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
            	timingBudget = 33000;
 8005e3c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
            	preRangeVcselPeriod = 18;
 8005e42:	2312      	movs	r3, #18
 8005e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            	finalRangeVcselPeriod = 14;
 8005e48:	230e      	movs	r3, #14
 8005e4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            	break;
 8005e4e:	e01e      	b.n	8005e8e <SetupSingleShot+0x162>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8005e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(18*65536);
 8005e56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 200000;
 8005e5c:	4b40      	ldr	r3, [pc, #256]	; (8005f60 <SetupSingleShot+0x234>)
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 8005e60:	230e      	movs	r3, #14
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 8005e66:	230a      	movs	r3, #10
 8005e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 8005e6c:	e00f      	b.n	8005e8e <SetupSingleShot+0x162>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8005e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(32*65536);
 8005e74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 20000;
 8005e7a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 8005e80:	230e      	movs	r3, #14
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 8005e86:	230a      	movs	r3, #10
 8005e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 8005e8c:	bf00      	nop
            default:
            	debug_printf("Not Supported");
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <SetupSingleShot+0x230>)
 8005e9a:	4413      	add	r3, r2
 8005e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb fd19 	bl	80018d8 <VL53L0X_SetLimitCheckValue>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
 8005eb4:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <SetupSingleShot+0x230>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fb fd0b 	bl	80018d8 <VL53L0X_SetLimitCheckValue>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ecc:	fb02 f303 	mul.w	r3, r2, r3
 8005ed0:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <SetupSingleShot+0x230>)
 8005ed2:	4413      	add	r3, r2
 8005ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fb fa30 	bl	800133c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005edc:	4603      	mov	r3, r0
 8005ede:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <SetupSingleShot+0x230>)
 8005eec:	4413      	add	r3, r2
 8005eee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fb fa47 	bl	8001388 <VL53L0X_SetVcselPulsePeriod>
 8005efa:	4603      	mov	r3, r0
 8005efc:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <SetupSingleShot+0x230>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fb fa38 	bl	8001388 <VL53L0X_SetVcselPulsePeriod>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	4a0d      	ldr	r2, [pc, #52]	; (8005f5c <SetupSingleShot+0x230>)
 8005f28:	4413      	add	r3, r2
 8005f2a:	f107 0216 	add.w	r2, r7, #22
 8005f2e:	f107 0117 	add.w	r1, r7, #23
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fb fe26 	bl	8001b84 <VL53L0X_PerformRefCalibration>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration  failed\n");
			}

            VL53L0XDevs[i].LeakyFirst=1;
 8005f3c:	4a07      	ldr	r2, [pc, #28]	; (8005f5c <SetupSingleShot+0x230>)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
        }

}
 8005f52:	bf00      	nop
 8005f54:	3730      	adds	r7, #48	; 0x30
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200002c0 	.word	0x200002c0
 8005f60:	00030d40 	.word	0x00030d40

08005f64 <ResetAndDetectSensor>:





void ResetAndDetectSensor(int SetDisplay){
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fe39 	bl	8005be4 <DetectSensors>
 8005f72:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[0].Present==0) ){
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dd07      	ble.n	8005f8a <ResetAndDetectSensor+0x26>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d108      	bne.n	8005f92 <ResetAndDetectSensor+0x2e>
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <ResetAndDetectSensor+0x38>)
 8005f82:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8e:	f7ff fddd 	bl	8005b4c <HandleError>
    }
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200002c0 	.word	0x200002c0

08005fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_Init+0x40>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <HAL_Init+0x40>)
 8005faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_Init+0x40>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_Init+0x40>)
 8005fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_Init+0x40>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_Init+0x40>)
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fc8:	2003      	movs	r0, #3
 8005fca:	f000 f931 	bl	8006230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f000 f808 	bl	8005fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fd4:	f7fa fc60 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023c00 	.word	0x40023c00

08005fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_InitTick+0x54>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <HAL_InitTick+0x58>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f93b 	bl	800627e <HAL_SYSTICK_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e00e      	b.n	8006030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d80a      	bhi.n	800602e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006018:	2200      	movs	r2, #0
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	f000 f911 	bl	8006246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006024:	4a06      	ldr	r2, [pc, #24]	; (8006040 <HAL_InitTick+0x5c>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000000 	.word	0x20000000
 800603c:	20000454 	.word	0x20000454
 8006040:	20000450 	.word	0x20000450

08006044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_IncTick+0x20>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_IncTick+0x24>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4413      	add	r3, r2
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <HAL_IncTick+0x24>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000454 	.word	0x20000454
 8006068:	20000640 	.word	0x20000640

0800606c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return uwTick;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <HAL_GetTick+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000640 	.word	0x20000640

08006084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800608c:	f7ff ffee 	bl	800606c <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d005      	beq.n	80060aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <HAL_Delay+0x44>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060aa:	bf00      	nop
 80060ac:	f7ff ffde 	bl	800606c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d8f7      	bhi.n	80060ac <HAL_Delay+0x28>
  {
  }
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000454 	.word	0x20000454

080060cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <__NVIC_SetPriorityGrouping+0x44>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060e8:	4013      	ands	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060fe:	4a04      	ldr	r2, [pc, #16]	; (8006110 <__NVIC_SetPriorityGrouping+0x44>)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	60d3      	str	r3, [r2, #12]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <__NVIC_GetPriorityGrouping+0x18>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	f003 0307 	and.w	r3, r3, #7
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	e000ed00 	.word	0xe000ed00

08006130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	6039      	str	r1, [r7, #0]
 800613a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800613c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006140:	2b00      	cmp	r3, #0
 8006142:	db0a      	blt.n	800615a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	b2da      	uxtb	r2, r3
 8006148:	490c      	ldr	r1, [pc, #48]	; (800617c <__NVIC_SetPriority+0x4c>)
 800614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614e:	0112      	lsls	r2, r2, #4
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	440b      	add	r3, r1
 8006154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006158:	e00a      	b.n	8006170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	4908      	ldr	r1, [pc, #32]	; (8006180 <__NVIC_SetPriority+0x50>)
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	3b04      	subs	r3, #4
 8006168:	0112      	lsls	r2, r2, #4
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	440b      	add	r3, r1
 800616e:	761a      	strb	r2, [r3, #24]
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000e100 	.word	0xe000e100
 8006180:	e000ed00 	.word	0xe000ed00

08006184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f1c3 0307 	rsb	r3, r3, #7
 800619e:	2b04      	cmp	r3, #4
 80061a0:	bf28      	it	cs
 80061a2:	2304      	movcs	r3, #4
 80061a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3304      	adds	r3, #4
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	d902      	bls.n	80061b4 <NVIC_EncodePriority+0x30>
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	3b03      	subs	r3, #3
 80061b2:	e000      	b.n	80061b6 <NVIC_EncodePriority+0x32>
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b8:	f04f 32ff 	mov.w	r2, #4294967295
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43da      	mvns	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	401a      	ands	r2, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061cc:	f04f 31ff 	mov.w	r1, #4294967295
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	fa01 f303 	lsl.w	r3, r1, r3
 80061d6:	43d9      	mvns	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061dc:	4313      	orrs	r3, r2
         );
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061fc:	d301      	bcc.n	8006202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061fe:	2301      	movs	r3, #1
 8006200:	e00f      	b.n	8006222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <SysTick_Config+0x40>)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3b01      	subs	r3, #1
 8006208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800620a:	210f      	movs	r1, #15
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	f7ff ff8e 	bl	8006130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <SysTick_Config+0x40>)
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800621a:	4b04      	ldr	r3, [pc, #16]	; (800622c <SysTick_Config+0x40>)
 800621c:	2207      	movs	r2, #7
 800621e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	e000e010 	.word	0xe000e010

08006230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ff47 	bl	80060cc <__NVIC_SetPriorityGrouping>
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	4603      	mov	r3, r0
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006258:	f7ff ff5c 	bl	8006114 <__NVIC_GetPriorityGrouping>
 800625c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff8e 	bl	8006184 <NVIC_EncodePriority>
 8006268:	4602      	mov	r2, r0
 800626a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ff5d 	bl	8006130 <__NVIC_SetPriority>
}
 8006276:	bf00      	nop
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ffb0 	bl	80061ec <SysTick_Config>
 800628c:	4603      	mov	r3, r0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006298:	b480      	push	{r7}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e159      	b.n	8006568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062b4:	2201      	movs	r2, #1
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4013      	ands	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	f040 8148 	bne.w	8006562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d005      	beq.n	80062ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d130      	bne.n	800634c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	2203      	movs	r2, #3
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4313      	orrs	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006320:	2201      	movs	r2, #1
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f003 0201 	and.w	r2, r3, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d017      	beq.n	8006388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	2203      	movs	r2, #3
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4313      	orrs	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d123      	bne.n	80063dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	08da      	lsrs	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3208      	adds	r2, #8
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	220f      	movs	r2, #15
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	08da      	lsrs	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3208      	adds	r2, #8
 80063d6:	69b9      	ldr	r1, [r7, #24]
 80063d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 0203 	and.w	r2, r3, #3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4313      	orrs	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a2 	beq.w	8006562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	4b57      	ldr	r3, [pc, #348]	; (8006580 <HAL_GPIO_Init+0x2e8>)
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	4a56      	ldr	r2, [pc, #344]	; (8006580 <HAL_GPIO_Init+0x2e8>)
 8006428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800642c:	6453      	str	r3, [r2, #68]	; 0x44
 800642e:	4b54      	ldr	r3, [pc, #336]	; (8006580 <HAL_GPIO_Init+0x2e8>)
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800643a:	4a52      	ldr	r2, [pc, #328]	; (8006584 <HAL_GPIO_Init+0x2ec>)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	3302      	adds	r3, #2
 8006442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	220f      	movs	r2, #15
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4013      	ands	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a49      	ldr	r2, [pc, #292]	; (8006588 <HAL_GPIO_Init+0x2f0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d019      	beq.n	800649a <HAL_GPIO_Init+0x202>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a48      	ldr	r2, [pc, #288]	; (800658c <HAL_GPIO_Init+0x2f4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_GPIO_Init+0x1fe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a47      	ldr	r2, [pc, #284]	; (8006590 <HAL_GPIO_Init+0x2f8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00d      	beq.n	8006492 <HAL_GPIO_Init+0x1fa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a46      	ldr	r2, [pc, #280]	; (8006594 <HAL_GPIO_Init+0x2fc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <HAL_GPIO_Init+0x1f6>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a45      	ldr	r2, [pc, #276]	; (8006598 <HAL_GPIO_Init+0x300>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_GPIO_Init+0x1f2>
 8006486:	2304      	movs	r3, #4
 8006488:	e008      	b.n	800649c <HAL_GPIO_Init+0x204>
 800648a:	2307      	movs	r3, #7
 800648c:	e006      	b.n	800649c <HAL_GPIO_Init+0x204>
 800648e:	2303      	movs	r3, #3
 8006490:	e004      	b.n	800649c <HAL_GPIO_Init+0x204>
 8006492:	2302      	movs	r3, #2
 8006494:	e002      	b.n	800649c <HAL_GPIO_Init+0x204>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <HAL_GPIO_Init+0x204>
 800649a:	2300      	movs	r3, #0
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	f002 0203 	and.w	r2, r2, #3
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	4093      	lsls	r3, r2
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064ac:	4935      	ldr	r1, [pc, #212]	; (8006584 <HAL_GPIO_Init+0x2ec>)
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	3302      	adds	r3, #2
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064ba:	4b38      	ldr	r3, [pc, #224]	; (800659c <HAL_GPIO_Init+0x304>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064de:	4a2f      	ldr	r2, [pc, #188]	; (800659c <HAL_GPIO_Init+0x304>)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064e4:	4b2d      	ldr	r3, [pc, #180]	; (800659c <HAL_GPIO_Init+0x304>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006508:	4a24      	ldr	r2, [pc, #144]	; (800659c <HAL_GPIO_Init+0x304>)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800650e:	4b23      	ldr	r3, [pc, #140]	; (800659c <HAL_GPIO_Init+0x304>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006532:	4a1a      	ldr	r2, [pc, #104]	; (800659c <HAL_GPIO_Init+0x304>)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006538:	4b18      	ldr	r3, [pc, #96]	; (800659c <HAL_GPIO_Init+0x304>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	43db      	mvns	r3, r3
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4013      	ands	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800655c:	4a0f      	ldr	r2, [pc, #60]	; (800659c <HAL_GPIO_Init+0x304>)
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3301      	adds	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b0f      	cmp	r3, #15
 800656c:	f67f aea2 	bls.w	80062b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3724      	adds	r7, #36	; 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40023800 	.word	0x40023800
 8006584:	40013800 	.word	0x40013800
 8006588:	40020000 	.word	0x40020000
 800658c:	40020400 	.word	0x40020400
 8006590:	40020800 	.word	0x40020800
 8006594:	40020c00 	.word	0x40020c00
 8006598:	40021000 	.word	0x40021000
 800659c:	40013c00 	.word	0x40013c00

080065a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	807b      	strh	r3, [r7, #2]
 80065ac:	4613      	mov	r3, r2
 80065ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065b0:	787b      	ldrb	r3, [r7, #1]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065b6:	887a      	ldrh	r2, [r7, #2]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065bc:	e003      	b.n	80065c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065be:	887b      	ldrh	r3, [r7, #2]
 80065c0:	041a      	lsls	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	619a      	str	r2, [r3, #24]
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e12b      	b.n	800683e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fa f974 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	; 0x24
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006638:	f001 fbae 	bl	8007d98 <HAL_RCC_GetPCLK1Freq>
 800663c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a81      	ldr	r2, [pc, #516]	; (8006848 <HAL_I2C_Init+0x274>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d807      	bhi.n	8006658 <HAL_I2C_Init+0x84>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a80      	ldr	r2, [pc, #512]	; (800684c <HAL_I2C_Init+0x278>)
 800664c:	4293      	cmp	r3, r2
 800664e:	bf94      	ite	ls
 8006650:	2301      	movls	r3, #1
 8006652:	2300      	movhi	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e006      	b.n	8006666 <HAL_I2C_Init+0x92>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a7d      	ldr	r2, [pc, #500]	; (8006850 <HAL_I2C_Init+0x27c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	bf94      	ite	ls
 8006660:	2301      	movls	r3, #1
 8006662:	2300      	movhi	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0e7      	b.n	800683e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a78      	ldr	r2, [pc, #480]	; (8006854 <HAL_I2C_Init+0x280>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	0c9b      	lsrs	r3, r3, #18
 8006678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a6a      	ldr	r2, [pc, #424]	; (8006848 <HAL_I2C_Init+0x274>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d802      	bhi.n	80066a8 <HAL_I2C_Init+0xd4>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3301      	adds	r3, #1
 80066a6:	e009      	b.n	80066bc <HAL_I2C_Init+0xe8>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	4a69      	ldr	r2, [pc, #420]	; (8006858 <HAL_I2C_Init+0x284>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	3301      	adds	r3, #1
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	495c      	ldr	r1, [pc, #368]	; (8006848 <HAL_I2C_Init+0x274>)
 80066d8:	428b      	cmp	r3, r1
 80066da:	d819      	bhi.n	8006710 <HAL_I2C_Init+0x13c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1e59      	subs	r1, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066f0:	400b      	ands	r3, r1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_I2C_Init+0x138>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1e59      	subs	r1, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fbb1 f3f3 	udiv	r3, r1, r3
 8006704:	3301      	adds	r3, #1
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	e051      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 800670c:	2304      	movs	r3, #4
 800670e:	e04f      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d111      	bne.n	800673c <HAL_I2C_Init+0x168>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1e58      	subs	r0, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	440b      	add	r3, r1
 8006726:	fbb0 f3f3 	udiv	r3, r0, r3
 800672a:	3301      	adds	r3, #1
 800672c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e012      	b.n	8006762 <HAL_I2C_Init+0x18e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1e58      	subs	r0, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6859      	ldr	r1, [r3, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	0099      	lsls	r1, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006752:	3301      	adds	r3, #1
 8006754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Init+0x196>
 8006766:	2301      	movs	r3, #1
 8006768:	e022      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10e      	bne.n	8006790 <HAL_I2C_Init+0x1bc>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1e58      	subs	r0, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	440b      	add	r3, r1
 8006780:	fbb0 f3f3 	udiv	r3, r0, r3
 8006784:	3301      	adds	r3, #1
 8006786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	e00f      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e58      	subs	r0, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	0099      	lsls	r1, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a6:	3301      	adds	r3, #1
 80067a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	6809      	ldr	r1, [r1, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6911      	ldr	r1, [r2, #16]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	4311      	orrs	r1, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	000186a0 	.word	0x000186a0
 800684c:	001e847f 	.word	0x001e847f
 8006850:	003d08ff 	.word	0x003d08ff
 8006854:	431bde83 	.word	0x431bde83
 8006858:	10624dd3 	.word	0x10624dd3

0800685c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	460b      	mov	r3, r1
 800686a:	817b      	strh	r3, [r7, #10]
 800686c:	4613      	mov	r3, r2
 800686e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006870:	f7ff fbfc 	bl	800606c <HAL_GetTick>
 8006874:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b20      	cmp	r3, #32
 8006880:	f040 80e0 	bne.w	8006a44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2319      	movs	r3, #25
 800688a:	2201      	movs	r2, #1
 800688c:	4970      	ldr	r1, [pc, #448]	; (8006a50 <HAL_I2C_Master_Transmit+0x1f4>)
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fc58 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800689a:	2302      	movs	r3, #2
 800689c:	e0d3      	b.n	8006a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_I2C_Master_Transmit+0x50>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e0cc      	b.n	8006a46 <HAL_I2C_Master_Transmit+0x1ea>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d007      	beq.n	80068d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0201 	orr.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2221      	movs	r2, #33	; 0x21
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2210      	movs	r2, #16
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	893a      	ldrh	r2, [r7, #8]
 8006902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a50      	ldr	r2, [pc, #320]	; (8006a54 <HAL_I2C_Master_Transmit+0x1f8>)
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006914:	8979      	ldrh	r1, [r7, #10]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fac2 	bl	8006ea4 <I2C_MasterRequestWrite>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e08d      	b.n	8006a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006940:	e066      	b.n	8006a10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	6a39      	ldr	r1, [r7, #32]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fcd2 	bl	80072f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00d      	beq.n	800696e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b04      	cmp	r3, #4
 8006958:	d107      	bne.n	800696a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e06b      	b.n	8006a46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d11b      	bne.n	80069e4 <HAL_I2C_Master_Transmit+0x188>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d017      	beq.n	80069e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	6a39      	ldr	r1, [r7, #32]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fcc2 	bl	8007372 <I2C_WaitOnBTFFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d107      	bne.n	8006a0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e01a      	b.n	8006a46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d194      	bne.n	8006942 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e000      	b.n	8006a46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
  }
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	00100002 	.word	0x00100002
 8006a54:	ffff0000 	.word	0xffff0000

08006a58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	; 0x30
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	461a      	mov	r2, r3
 8006a64:	460b      	mov	r3, r1
 8006a66:	817b      	strh	r3, [r7, #10]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a6c:	f7ff fafe 	bl	800606c <HAL_GetTick>
 8006a70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	f040 820b 	bne.w	8006e96 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2319      	movs	r3, #25
 8006a86:	2201      	movs	r2, #1
 8006a88:	497c      	ldr	r1, [pc, #496]	; (8006c7c <HAL_I2C_Master_Receive+0x224>)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fb5a 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
 8006a98:	e1fe      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_I2C_Master_Receive+0x50>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e1f7      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d007      	beq.n	8006ace <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0201 	orr.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006adc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2222      	movs	r2, #34	; 0x22
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2210      	movs	r2, #16
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	893a      	ldrh	r2, [r7, #8]
 8006afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a5c      	ldr	r2, [pc, #368]	; (8006c80 <HAL_I2C_Master_Receive+0x228>)
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b10:	8979      	ldrh	r1, [r7, #10]
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fa46 	bl	8006fa8 <I2C_MasterRequestRead>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e1b8      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d113      	bne.n	8006b56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	623b      	str	r3, [r7, #32]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	623b      	str	r3, [r7, #32]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	623b      	str	r3, [r7, #32]
 8006b42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e18c      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d11b      	bne.n	8006b96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e16c      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d11b      	bne.n	8006bd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	e14c      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bfc:	e138      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	f200 80f1 	bhi.w	8006dea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d123      	bne.n	8006c58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fbed 	bl	80073f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e139      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c56:	e10b      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d14e      	bne.n	8006cfe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	2200      	movs	r2, #0
 8006c68:	4906      	ldr	r1, [pc, #24]	; (8006c84 <HAL_I2C_Master_Receive+0x22c>)
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fa6a 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e10e      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
 8006c7a:	bf00      	nop
 8006c7c:	00100002 	.word	0x00100002
 8006c80:	ffff0000 	.word	0xffff0000
 8006c84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cfc:	e0b8      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2200      	movs	r2, #0
 8006d06:	4966      	ldr	r1, [pc, #408]	; (8006ea0 <HAL_I2C_Master_Receive+0x448>)
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fa1b 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0bf      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	2200      	movs	r2, #0
 8006d62:	494f      	ldr	r1, [pc, #316]	; (8006ea0 <HAL_I2C_Master_Receive+0x448>)
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f9ed 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e091      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006de8:	e042      	b.n	8006e70 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fb00 	bl	80073f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e04c      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d118      	bne.n	8006e70 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f47f aec2 	bne.w	8006bfe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e000      	b.n	8006e98 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3728      	adds	r7, #40	; 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	00010004 	.word	0x00010004

08006ea4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d006      	beq.n	8006ece <I2C_MasterRequestWrite+0x2a>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d003      	beq.n	8006ece <I2C_MasterRequestWrite+0x2a>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ecc:	d108      	bne.n	8006ee0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e00b      	b.n	8006ef8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	2b12      	cmp	r3, #18
 8006ee6:	d107      	bne.n	8006ef8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f91d 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1e:	d103      	bne.n	8006f28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e035      	b.n	8006f98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f34:	d108      	bne.n	8006f48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f36:	897b      	ldrh	r3, [r7, #10]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f44:	611a      	str	r2, [r3, #16]
 8006f46:	e01b      	b.n	8006f80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f48:	897b      	ldrh	r3, [r7, #10]
 8006f4a:	11db      	asrs	r3, r3, #7
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0306 	and.w	r3, r3, #6
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f063 030f 	orn	r3, r3, #15
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	490e      	ldr	r1, [pc, #56]	; (8006fa0 <I2C_MasterRequestWrite+0xfc>)
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f943 	bl	80071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e010      	b.n	8006f98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f76:	897b      	ldrh	r3, [r7, #10]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	4907      	ldr	r1, [pc, #28]	; (8006fa4 <I2C_MasterRequestWrite+0x100>)
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f933 	bl	80071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	00010008 	.word	0x00010008
 8006fa4:	00010002 	.word	0x00010002

08006fa8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d006      	beq.n	8006fe2 <I2C_MasterRequestRead+0x3a>
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d003      	beq.n	8006fe2 <I2C_MasterRequestRead+0x3a>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fe0:	d108      	bne.n	8006ff4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e00b      	b.n	800700c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	2b11      	cmp	r3, #17
 8006ffa:	d107      	bne.n	800700c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800700a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f893 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00d      	beq.n	8007040 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	d103      	bne.n	800703c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e079      	b.n	8007134 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007048:	d108      	bne.n	800705c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800704a:	897b      	ldrh	r3, [r7, #10]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	611a      	str	r2, [r3, #16]
 800705a:	e05f      	b.n	800711c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800705c:	897b      	ldrh	r3, [r7, #10]
 800705e:	11db      	asrs	r3, r3, #7
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0306 	and.w	r3, r3, #6
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f063 030f 	orn	r3, r3, #15
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4930      	ldr	r1, [pc, #192]	; (800713c <I2C_MasterRequestRead+0x194>)
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f8b9 	bl	80071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e054      	b.n	8007134 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800708a:	897b      	ldrh	r3, [r7, #10]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	4929      	ldr	r1, [pc, #164]	; (8007140 <I2C_MasterRequestRead+0x198>)
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f8a9 	bl	80071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e044      	b.n	8007134 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f831 	bl	8007144 <I2C_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00d      	beq.n	8007104 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f6:	d103      	bne.n	8007100 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e017      	b.n	8007134 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007104:	897b      	ldrh	r3, [r7, #10]
 8007106:	11db      	asrs	r3, r3, #7
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0306 	and.w	r3, r3, #6
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f063 030e 	orn	r3, r3, #14
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4907      	ldr	r1, [pc, #28]	; (8007140 <I2C_MasterRequestRead+0x198>)
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f865 	bl	80071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	00010008 	.word	0x00010008
 8007140:	00010002 	.word	0x00010002

08007144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4613      	mov	r3, r2
 8007152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007154:	e025      	b.n	80071a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d021      	beq.n	80071a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715e:	f7fe ff85 	bl	800606c <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d302      	bcc.n	8007174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d116      	bne.n	80071a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f043 0220 	orr.w	r2, r3, #32
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e023      	b.n	80071ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d10d      	bne.n	80071c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	43da      	mvns	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4013      	ands	r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf0c      	ite	eq
 80071be:	2301      	moveq	r3, #1
 80071c0:	2300      	movne	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	e00c      	b.n	80071e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	43da      	mvns	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4013      	ands	r3, r2
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bf0c      	ite	eq
 80071da:	2301      	moveq	r3, #1
 80071dc:	2300      	movne	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d0b6      	beq.n	8007156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007200:	e051      	b.n	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800720c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007210:	d123      	bne.n	800725a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007220:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800722a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e046      	b.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d021      	beq.n	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fe ff03 	bl	800606c <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d116      	bne.n	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f043 0220 	orr.w	r2, r3, #32
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e020      	b.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	0c1b      	lsrs	r3, r3, #16
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d10c      	bne.n	80072ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	43da      	mvns	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf14      	ite	ne
 80072c2:	2301      	movne	r3, #1
 80072c4:	2300      	moveq	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	e00b      	b.n	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	43da      	mvns	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4013      	ands	r3, r2
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf14      	ite	ne
 80072dc:	2301      	movne	r3, #1
 80072de:	2300      	moveq	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d18d      	bne.n	8007202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072fc:	e02d      	b.n	800735a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f8ce 	bl	80074a0 <I2C_IsAcknowledgeFailed>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e02d      	b.n	800736a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d021      	beq.n	800735a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007316:	f7fe fea9 	bl	800606c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d116      	bne.n	800735a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f043 0220 	orr.w	r2, r3, #32
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e007      	b.n	800736a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d1ca      	bne.n	80072fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800737e:	e02d      	b.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f88d 	bl	80074a0 <I2C_IsAcknowledgeFailed>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e02d      	b.n	80073ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d021      	beq.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007398:	f7fe fe68 	bl	800606c <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d302      	bcc.n	80073ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d116      	bne.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	f043 0220 	orr.w	r2, r3, #32
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e007      	b.n	80073ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d1ca      	bne.n	8007380 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007400:	e042      	b.n	8007488 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	2b10      	cmp	r3, #16
 800740e:	d119      	bne.n	8007444 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0210 	mvn.w	r2, #16
 8007418:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e029      	b.n	8007498 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007444:	f7fe fe12 	bl	800606c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	429a      	cmp	r2, r3
 8007452:	d302      	bcc.n	800745a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d116      	bne.n	8007488 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	f043 0220 	orr.w	r2, r3, #32
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e007      	b.n	8007498 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d1b5      	bne.n	8007402 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b6:	d11b      	bne.n	80074f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	f043 0204 	orr.w	r2, r3, #4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e264      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d075      	beq.n	800760a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800751e:	4ba3      	ldr	r3, [pc, #652]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 030c 	and.w	r3, r3, #12
 8007526:	2b04      	cmp	r3, #4
 8007528:	d00c      	beq.n	8007544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800752a:	4ba0      	ldr	r3, [pc, #640]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007532:	2b08      	cmp	r3, #8
 8007534:	d112      	bne.n	800755c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007536:	4b9d      	ldr	r3, [pc, #628]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800753e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007542:	d10b      	bne.n	800755c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007544:	4b99      	ldr	r3, [pc, #612]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d05b      	beq.n	8007608 <HAL_RCC_OscConfig+0x108>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d157      	bne.n	8007608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e23f      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007564:	d106      	bne.n	8007574 <HAL_RCC_OscConfig+0x74>
 8007566:	4b91      	ldr	r3, [pc, #580]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a90      	ldr	r2, [pc, #576]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800756c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e01d      	b.n	80075b0 <HAL_RCC_OscConfig+0xb0>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800757c:	d10c      	bne.n	8007598 <HAL_RCC_OscConfig+0x98>
 800757e:	4b8b      	ldr	r3, [pc, #556]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a8a      	ldr	r2, [pc, #552]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	4b88      	ldr	r3, [pc, #544]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a87      	ldr	r2, [pc, #540]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	e00b      	b.n	80075b0 <HAL_RCC_OscConfig+0xb0>
 8007598:	4b84      	ldr	r3, [pc, #528]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a83      	ldr	r2, [pc, #524]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800759e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	4b81      	ldr	r3, [pc, #516]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a80      	ldr	r2, [pc, #512]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 80075aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d013      	beq.n	80075e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b8:	f7fe fd58 	bl	800606c <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075c0:	f7fe fd54 	bl	800606c <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	; 0x64
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e204      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075d2:	4b76      	ldr	r3, [pc, #472]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <HAL_RCC_OscConfig+0xc0>
 80075de:	e014      	b.n	800760a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e0:	f7fe fd44 	bl	800606c <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075e8:	f7fe fd40 	bl	800606c <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b64      	cmp	r3, #100	; 0x64
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e1f0      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075fa:	4b6c      	ldr	r3, [pc, #432]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f0      	bne.n	80075e8 <HAL_RCC_OscConfig+0xe8>
 8007606:	e000      	b.n	800760a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d063      	beq.n	80076de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007616:	4b65      	ldr	r3, [pc, #404]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 030c 	and.w	r3, r3, #12
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00b      	beq.n	800763a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007622:	4b62      	ldr	r3, [pc, #392]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800762a:	2b08      	cmp	r3, #8
 800762c:	d11c      	bne.n	8007668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800762e:	4b5f      	ldr	r3, [pc, #380]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d116      	bne.n	8007668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800763a:	4b5c      	ldr	r3, [pc, #368]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <HAL_RCC_OscConfig+0x152>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d001      	beq.n	8007652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e1c4      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007652:	4b56      	ldr	r3, [pc, #344]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4952      	ldr	r1, [pc, #328]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007662:	4313      	orrs	r3, r2
 8007664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007666:	e03a      	b.n	80076de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d020      	beq.n	80076b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007670:	4b4f      	ldr	r3, [pc, #316]	; (80077b0 <HAL_RCC_OscConfig+0x2b0>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007676:	f7fe fcf9 	bl	800606c <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800767e:	f7fe fcf5 	bl	800606c <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e1a5      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0f0      	beq.n	800767e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800769c:	4b43      	ldr	r3, [pc, #268]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4940      	ldr	r1, [pc, #256]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	600b      	str	r3, [r1, #0]
 80076b0:	e015      	b.n	80076de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076b2:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <HAL_RCC_OscConfig+0x2b0>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fe fcd8 	bl	800606c <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076c0:	f7fe fcd4 	bl	800606c <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e184      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076d2:	4b36      	ldr	r3, [pc, #216]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f0      	bne.n	80076c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d030      	beq.n	800774c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076f2:	4b30      	ldr	r3, [pc, #192]	; (80077b4 <HAL_RCC_OscConfig+0x2b4>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f8:	f7fe fcb8 	bl	800606c <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007700:	f7fe fcb4 	bl	800606c <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e164      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007712:	4b26      	ldr	r3, [pc, #152]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x200>
 800771e:	e015      	b.n	800774c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007720:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <HAL_RCC_OscConfig+0x2b4>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007726:	f7fe fca1 	bl	800606c <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800772c:	e008      	b.n	8007740 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800772e:	f7fe fc9d 	bl	800606c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e14d      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f0      	bne.n	800772e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80a0 	beq.w	800789a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10f      	bne.n	800778a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	4a0e      	ldr	r2, [pc, #56]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 8007774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007778:	6413      	str	r3, [r2, #64]	; 0x40
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <HAL_RCC_OscConfig+0x2ac>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCC_OscConfig+0x2b8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007792:	2b00      	cmp	r3, #0
 8007794:	d121      	bne.n	80077da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <HAL_RCC_OscConfig+0x2b8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a07      	ldr	r2, [pc, #28]	; (80077b8 <HAL_RCC_OscConfig+0x2b8>)
 800779c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077a2:	f7fe fc63 	bl	800606c <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a8:	e011      	b.n	80077ce <HAL_RCC_OscConfig+0x2ce>
 80077aa:	bf00      	nop
 80077ac:	40023800 	.word	0x40023800
 80077b0:	42470000 	.word	0x42470000
 80077b4:	42470e80 	.word	0x42470e80
 80077b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077bc:	f7fe fc56 	bl	800606c <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e106      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ce:	4b85      	ldr	r3, [pc, #532]	; (80079e4 <HAL_RCC_OscConfig+0x4e4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f0      	beq.n	80077bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d106      	bne.n	80077f0 <HAL_RCC_OscConfig+0x2f0>
 80077e2:	4b81      	ldr	r3, [pc, #516]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 80077e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e6:	4a80      	ldr	r2, [pc, #512]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	6713      	str	r3, [r2, #112]	; 0x70
 80077ee:	e01c      	b.n	800782a <HAL_RCC_OscConfig+0x32a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d10c      	bne.n	8007812 <HAL_RCC_OscConfig+0x312>
 80077f8:	4b7b      	ldr	r3, [pc, #492]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	4a7a      	ldr	r2, [pc, #488]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 80077fe:	f043 0304 	orr.w	r3, r3, #4
 8007802:	6713      	str	r3, [r2, #112]	; 0x70
 8007804:	4b78      	ldr	r3, [pc, #480]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	4a77      	ldr	r2, [pc, #476]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	6713      	str	r3, [r2, #112]	; 0x70
 8007810:	e00b      	b.n	800782a <HAL_RCC_OscConfig+0x32a>
 8007812:	4b75      	ldr	r3, [pc, #468]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	4a74      	ldr	r2, [pc, #464]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007818:	f023 0301 	bic.w	r3, r3, #1
 800781c:	6713      	str	r3, [r2, #112]	; 0x70
 800781e:	4b72      	ldr	r3, [pc, #456]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	4a71      	ldr	r2, [pc, #452]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007824:	f023 0304 	bic.w	r3, r3, #4
 8007828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d015      	beq.n	800785e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007832:	f7fe fc1b 	bl	800606c <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007838:	e00a      	b.n	8007850 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800783a:	f7fe fc17 	bl	800606c <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	f241 3288 	movw	r2, #5000	; 0x1388
 8007848:	4293      	cmp	r3, r2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e0c5      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007850:	4b65      	ldr	r3, [pc, #404]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0ee      	beq.n	800783a <HAL_RCC_OscConfig+0x33a>
 800785c:	e014      	b.n	8007888 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800785e:	f7fe fc05 	bl	800606c <HAL_GetTick>
 8007862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007864:	e00a      	b.n	800787c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007866:	f7fe fc01 	bl	800606c <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f241 3288 	movw	r2, #5000	; 0x1388
 8007874:	4293      	cmp	r3, r2
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e0af      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800787c:	4b5a      	ldr	r3, [pc, #360]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1ee      	bne.n	8007866 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800788e:	4b56      	ldr	r3, [pc, #344]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	4a55      	ldr	r2, [pc, #340]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 809b 	beq.w	80079da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078a4:	4b50      	ldr	r3, [pc, #320]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 030c 	and.w	r3, r3, #12
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d05c      	beq.n	800796a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d141      	bne.n	800793c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b8:	4b4c      	ldr	r3, [pc, #304]	; (80079ec <HAL_RCC_OscConfig+0x4ec>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078be:	f7fe fbd5 	bl	800606c <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c4:	e008      	b.n	80078d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078c6:	f7fe fbd1 	bl	800606c <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e081      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d8:	4b43      	ldr	r3, [pc, #268]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f0      	bne.n	80078c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	019b      	lsls	r3, r3, #6
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	3b01      	subs	r3, #1
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	431a      	orrs	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	061b      	lsls	r3, r3, #24
 8007908:	4937      	ldr	r1, [pc, #220]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 800790a:	4313      	orrs	r3, r2
 800790c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800790e:	4b37      	ldr	r3, [pc, #220]	; (80079ec <HAL_RCC_OscConfig+0x4ec>)
 8007910:	2201      	movs	r2, #1
 8007912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007914:	f7fe fbaa 	bl	800606c <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800791c:	f7fe fba6 	bl	800606c <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e056      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800792e:	4b2e      	ldr	r3, [pc, #184]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0f0      	beq.n	800791c <HAL_RCC_OscConfig+0x41c>
 800793a:	e04e      	b.n	80079da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793c:	4b2b      	ldr	r3, [pc, #172]	; (80079ec <HAL_RCC_OscConfig+0x4ec>)
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007942:	f7fe fb93 	bl	800606c <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007948:	e008      	b.n	800795c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800794a:	f7fe fb8f 	bl	800606c <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e03f      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795c:	4b22      	ldr	r3, [pc, #136]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f0      	bne.n	800794a <HAL_RCC_OscConfig+0x44a>
 8007968:	e037      	b.n	80079da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e032      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007976:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <HAL_RCC_OscConfig+0x4e8>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d028      	beq.n	80079d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d121      	bne.n	80079d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800799c:	429a      	cmp	r2, r3
 800799e:	d11a      	bne.n	80079d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079a6:	4013      	ands	r3, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d111      	bne.n	80079d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	3b01      	subs	r3, #1
 80079c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d107      	bne.n	80079d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d001      	beq.n	80079da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40007000 	.word	0x40007000
 80079e8:	40023800 	.word	0x40023800
 80079ec:	42470060 	.word	0x42470060

080079f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0cc      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a04:	4b68      	ldr	r3, [pc, #416]	; (8007ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d90c      	bls.n	8007a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a12:	4b65      	ldr	r3, [pc, #404]	; (8007ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1a:	4b63      	ldr	r3, [pc, #396]	; (8007ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e0b8      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d020      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a44:	4b59      	ldr	r3, [pc, #356]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	4a58      	ldr	r2, [pc, #352]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a5c:	4b53      	ldr	r3, [pc, #332]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	4a52      	ldr	r2, [pc, #328]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a68:	4b50      	ldr	r3, [pc, #320]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	494d      	ldr	r1, [pc, #308]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d044      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d107      	bne.n	8007a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8e:	4b47      	ldr	r3, [pc, #284]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d119      	bne.n	8007ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e07f      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d003      	beq.n	8007aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d107      	bne.n	8007abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aae:	4b3f      	ldr	r3, [pc, #252]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e06f      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007abe:	4b3b      	ldr	r3, [pc, #236]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e067      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ace:	4b37      	ldr	r3, [pc, #220]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f023 0203 	bic.w	r2, r3, #3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4934      	ldr	r1, [pc, #208]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ae0:	f7fe fac4 	bl	800606c <HAL_GetTick>
 8007ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae6:	e00a      	b.n	8007afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae8:	f7fe fac0 	bl	800606c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e04f      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007afe:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 020c 	and.w	r2, r3, #12
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d1eb      	bne.n	8007ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b10:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d20c      	bcs.n	8007b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1e:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b26:	4b20      	ldr	r3, [pc, #128]	; (8007ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d001      	beq.n	8007b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e032      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b44:	4b19      	ldr	r3, [pc, #100]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	4916      	ldr	r1, [pc, #88]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b62:	4b12      	ldr	r3, [pc, #72]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	490e      	ldr	r1, [pc, #56]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b76:	f000 f821 	bl	8007bbc <HAL_RCC_GetSysClockFreq>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	490a      	ldr	r1, [pc, #40]	; (8007bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8007b88:	5ccb      	ldrb	r3, [r1, r3]
 8007b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8e:	4a09      	ldr	r2, [pc, #36]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b92:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fe fa24 	bl	8005fe4 <HAL_InitTick>

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40023c00 	.word	0x40023c00
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	08008d20 	.word	0x08008d20
 8007bb4:	20000000 	.word	0x20000000
 8007bb8:	20000450 	.word	0x20000450

08007bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bd4:	4b67      	ldr	r3, [pc, #412]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f003 030c 	and.w	r3, r3, #12
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d00d      	beq.n	8007bfc <HAL_RCC_GetSysClockFreq+0x40>
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	f200 80bd 	bhi.w	8007d60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d003      	beq.n	8007bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bee:	e0b7      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bf0:	4b61      	ldr	r3, [pc, #388]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007bf2:	60bb      	str	r3, [r7, #8]
       break;
 8007bf4:	e0b7      	b.n	8007d66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bf6:	4b61      	ldr	r3, [pc, #388]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007bf8:	60bb      	str	r3, [r7, #8]
      break;
 8007bfa:	e0b4      	b.n	8007d66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bfc:	4b5d      	ldr	r3, [pc, #372]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c06:	4b5b      	ldr	r3, [pc, #364]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d04d      	beq.n	8007cae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c12:	4b58      	ldr	r3, [pc, #352]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	099b      	lsrs	r3, r3, #6
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c22:	f04f 0100 	mov.w	r1, #0
 8007c26:	ea02 0800 	and.w	r8, r2, r0
 8007c2a:	ea03 0901 	and.w	r9, r3, r1
 8007c2e:	4640      	mov	r0, r8
 8007c30:	4649      	mov	r1, r9
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	014b      	lsls	r3, r1, #5
 8007c3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c40:	0142      	lsls	r2, r0, #5
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	ebb0 0008 	subs.w	r0, r0, r8
 8007c4a:	eb61 0109 	sbc.w	r1, r1, r9
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	018b      	lsls	r3, r1, #6
 8007c58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c5c:	0182      	lsls	r2, r0, #6
 8007c5e:	1a12      	subs	r2, r2, r0
 8007c60:	eb63 0301 	sbc.w	r3, r3, r1
 8007c64:	f04f 0000 	mov.w	r0, #0
 8007c68:	f04f 0100 	mov.w	r1, #0
 8007c6c:	00d9      	lsls	r1, r3, #3
 8007c6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c72:	00d0      	lsls	r0, r2, #3
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	eb12 0208 	adds.w	r2, r2, r8
 8007c7c:	eb43 0309 	adc.w	r3, r3, r9
 8007c80:	f04f 0000 	mov.w	r0, #0
 8007c84:	f04f 0100 	mov.w	r1, #0
 8007c88:	0259      	lsls	r1, r3, #9
 8007c8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007c8e:	0250      	lsls	r0, r2, #9
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4610      	mov	r0, r2
 8007c96:	4619      	mov	r1, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	f7f8 faf6 	bl	8000290 <__aeabi_uldivmod>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4613      	mov	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e04a      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cae:	4b31      	ldr	r3, [pc, #196]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	099b      	lsrs	r3, r3, #6
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cbe:	f04f 0100 	mov.w	r1, #0
 8007cc2:	ea02 0400 	and.w	r4, r2, r0
 8007cc6:	ea03 0501 	and.w	r5, r3, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	014b      	lsls	r3, r1, #5
 8007cd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007cdc:	0142      	lsls	r2, r0, #5
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	1b00      	subs	r0, r0, r4
 8007ce4:	eb61 0105 	sbc.w	r1, r1, r5
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	018b      	lsls	r3, r1, #6
 8007cf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cf6:	0182      	lsls	r2, r0, #6
 8007cf8:	1a12      	subs	r2, r2, r0
 8007cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8007cfe:	f04f 0000 	mov.w	r0, #0
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	00d9      	lsls	r1, r3, #3
 8007d08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d0c:	00d0      	lsls	r0, r2, #3
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	1912      	adds	r2, r2, r4
 8007d14:	eb45 0303 	adc.w	r3, r5, r3
 8007d18:	f04f 0000 	mov.w	r0, #0
 8007d1c:	f04f 0100 	mov.w	r1, #0
 8007d20:	0299      	lsls	r1, r3, #10
 8007d22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d26:	0290      	lsls	r0, r2, #10
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4619      	mov	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	f7f8 faaa 	bl	8000290 <__aeabi_uldivmod>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4613      	mov	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d44:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	3301      	adds	r3, #1
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5c:	60bb      	str	r3, [r7, #8]
      break;
 8007d5e:	e002      	b.n	8007d66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d62:	60bb      	str	r3, [r7, #8]
      break;
 8007d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d66:	68bb      	ldr	r3, [r7, #8]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d72:	bf00      	nop
 8007d74:	40023800 	.word	0x40023800
 8007d78:	00f42400 	.word	0x00f42400
 8007d7c:	007a1200 	.word	0x007a1200

08007d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d86:	681b      	ldr	r3, [r3, #0]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000000 	.word	0x20000000

08007d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d9c:	f7ff fff0 	bl	8007d80 <HAL_RCC_GetHCLKFreq>
 8007da0:	4602      	mov	r2, r0
 8007da2:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	0a9b      	lsrs	r3, r3, #10
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	4903      	ldr	r1, [pc, #12]	; (8007dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dae:	5ccb      	ldrb	r3, [r1, r3]
 8007db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	08008d30 	.word	0x08008d30

08007dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dc4:	f7ff ffdc 	bl	8007d80 <HAL_RCC_GetHCLKFreq>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	0b5b      	lsrs	r3, r3, #13
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	4903      	ldr	r1, [pc, #12]	; (8007de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dd6:	5ccb      	ldrb	r3, [r1, r3]
 8007dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40023800 	.word	0x40023800
 8007de4:	08008d30 	.word	0x08008d30

08007de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e03f      	b.n	8007e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7f8 fdb2 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f929 	bl	8008084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b08a      	sub	sp, #40	; 0x28
 8007e86:	af02      	add	r7, sp, #8
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	603b      	str	r3, [r7, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d17c      	bne.n	8007f9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_UART_Transmit+0x2c>
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e075      	b.n	8007f9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_UART_Transmit+0x3e>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e06e      	b.n	8007f9e <HAL_UART_Transmit+0x11c>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2221      	movs	r2, #33	; 0x21
 8007ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ed6:	f7fe f8c9 	bl	800606c <HAL_GetTick>
 8007eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef0:	d108      	bne.n	8007f04 <HAL_UART_Transmit+0x82>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	61bb      	str	r3, [r7, #24]
 8007f02:	e003      	b.n	8007f0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f14:	e02a      	b.n	8007f6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2180      	movs	r1, #128	; 0x80
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f840 	bl	8007fa6 <UART_WaitOnFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e036      	b.n	8007f9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10b      	bne.n	8007f4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	3302      	adds	r3, #2
 8007f4a:	61bb      	str	r3, [r7, #24]
 8007f4c:	e007      	b.n	8007f5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1cf      	bne.n	8007f16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2140      	movs	r1, #64	; 0x40
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f810 	bl	8007fa6 <UART_WaitOnFlagUntilTimeout>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e006      	b.n	8007f9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e000      	b.n	8007f9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f9c:	2302      	movs	r3, #2
  }
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b090      	sub	sp, #64	; 0x40
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb6:	e050      	b.n	800805a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d04c      	beq.n	800805a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fc6:	f7fe f851 	bl	800606c <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d241      	bcs.n	800805a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	330c      	adds	r3, #12
 8007ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8007ff8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3314      	adds	r3, #20
 8008010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	613b      	str	r3, [r7, #16]
   return(result);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f023 0301 	bic.w	r3, r3, #1
 8008020:	63bb      	str	r3, [r7, #56]	; 0x38
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3314      	adds	r3, #20
 8008028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802a:	623a      	str	r2, [r7, #32]
 800802c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	69f9      	ldr	r1, [r7, #28]
 8008030:	6a3a      	ldr	r2, [r7, #32]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	61bb      	str	r3, [r7, #24]
   return(result);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e5      	bne.n	800800a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e00f      	b.n	800807a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4013      	ands	r3, r2
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	429a      	cmp	r2, r3
 8008068:	bf0c      	ite	eq
 800806a:	2301      	moveq	r3, #1
 800806c:	2300      	movne	r3, #0
 800806e:	b2db      	uxtb	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	429a      	cmp	r2, r3
 8008076:	d09f      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3740      	adds	r7, #64	; 0x40
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	b09f      	sub	sp, #124	; 0x7c
 800808a:	af00      	add	r7, sp, #0
 800808c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800808e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809a:	68d9      	ldr	r1, [r3, #12]
 800809c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	ea40 0301 	orr.w	r3, r0, r1
 80080a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80080be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080c8:	f021 010c 	bic.w	r1, r1, #12
 80080cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080d2:	430b      	orrs	r3, r1
 80080d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e2:	6999      	ldr	r1, [r3, #24]
 80080e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	ea40 0301 	orr.w	r3, r0, r1
 80080ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4bc5      	ldr	r3, [pc, #788]	; (8008408 <UART_SetConfig+0x384>)
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d004      	beq.n	8008102 <UART_SetConfig+0x7e>
 80080f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4bc3      	ldr	r3, [pc, #780]	; (800840c <UART_SetConfig+0x388>)
 80080fe:	429a      	cmp	r2, r3
 8008100:	d103      	bne.n	800810a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008102:	f7ff fe5d 	bl	8007dc0 <HAL_RCC_GetPCLK2Freq>
 8008106:	6778      	str	r0, [r7, #116]	; 0x74
 8008108:	e002      	b.n	8008110 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800810a:	f7ff fe45 	bl	8007d98 <HAL_RCC_GetPCLK1Freq>
 800810e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008118:	f040 80b6 	bne.w	8008288 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800811c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800811e:	461c      	mov	r4, r3
 8008120:	f04f 0500 	mov.w	r5, #0
 8008124:	4622      	mov	r2, r4
 8008126:	462b      	mov	r3, r5
 8008128:	1891      	adds	r1, r2, r2
 800812a:	6439      	str	r1, [r7, #64]	; 0x40
 800812c:	415b      	adcs	r3, r3
 800812e:	647b      	str	r3, [r7, #68]	; 0x44
 8008130:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008134:	1912      	adds	r2, r2, r4
 8008136:	eb45 0303 	adc.w	r3, r5, r3
 800813a:	f04f 0000 	mov.w	r0, #0
 800813e:	f04f 0100 	mov.w	r1, #0
 8008142:	00d9      	lsls	r1, r3, #3
 8008144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008148:	00d0      	lsls	r0, r2, #3
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	1911      	adds	r1, r2, r4
 8008150:	6639      	str	r1, [r7, #96]	; 0x60
 8008152:	416b      	adcs	r3, r5
 8008154:	667b      	str	r3, [r7, #100]	; 0x64
 8008156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	461a      	mov	r2, r3
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	1891      	adds	r1, r2, r2
 8008162:	63b9      	str	r1, [r7, #56]	; 0x38
 8008164:	415b      	adcs	r3, r3
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800816c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008170:	f7f8 f88e 	bl	8000290 <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4ba5      	ldr	r3, [pc, #660]	; (8008410 <UART_SetConfig+0x38c>)
 800817a:	fba3 2302 	umull	r2, r3, r3, r2
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	011e      	lsls	r6, r3, #4
 8008182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008184:	461c      	mov	r4, r3
 8008186:	f04f 0500 	mov.w	r5, #0
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	1891      	adds	r1, r2, r2
 8008190:	6339      	str	r1, [r7, #48]	; 0x30
 8008192:	415b      	adcs	r3, r3
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
 8008196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800819a:	1912      	adds	r2, r2, r4
 800819c:	eb45 0303 	adc.w	r3, r5, r3
 80081a0:	f04f 0000 	mov.w	r0, #0
 80081a4:	f04f 0100 	mov.w	r1, #0
 80081a8:	00d9      	lsls	r1, r3, #3
 80081aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081ae:	00d0      	lsls	r0, r2, #3
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	1911      	adds	r1, r2, r4
 80081b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80081b8:	416b      	adcs	r3, r5
 80081ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	461a      	mov	r2, r3
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	1891      	adds	r1, r2, r2
 80081c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80081ca:	415b      	adcs	r3, r3
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081d6:	f7f8 f85b 	bl	8000290 <__aeabi_uldivmod>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4b8c      	ldr	r3, [pc, #560]	; (8008410 <UART_SetConfig+0x38c>)
 80081e0:	fba3 1302 	umull	r1, r3, r3, r2
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	2164      	movs	r1, #100	; 0x64
 80081e8:	fb01 f303 	mul.w	r3, r1, r3
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	3332      	adds	r3, #50	; 0x32
 80081f2:	4a87      	ldr	r2, [pc, #540]	; (8008410 <UART_SetConfig+0x38c>)
 80081f4:	fba2 2303 	umull	r2, r3, r2, r3
 80081f8:	095b      	lsrs	r3, r3, #5
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008200:	441e      	add	r6, r3
 8008202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008204:	4618      	mov	r0, r3
 8008206:	f04f 0100 	mov.w	r1, #0
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	1894      	adds	r4, r2, r2
 8008210:	623c      	str	r4, [r7, #32]
 8008212:	415b      	adcs	r3, r3
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
 8008216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800821a:	1812      	adds	r2, r2, r0
 800821c:	eb41 0303 	adc.w	r3, r1, r3
 8008220:	f04f 0400 	mov.w	r4, #0
 8008224:	f04f 0500 	mov.w	r5, #0
 8008228:	00dd      	lsls	r5, r3, #3
 800822a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800822e:	00d4      	lsls	r4, r2, #3
 8008230:	4622      	mov	r2, r4
 8008232:	462b      	mov	r3, r5
 8008234:	1814      	adds	r4, r2, r0
 8008236:	653c      	str	r4, [r7, #80]	; 0x50
 8008238:	414b      	adcs	r3, r1
 800823a:	657b      	str	r3, [r7, #84]	; 0x54
 800823c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	461a      	mov	r2, r3
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	1891      	adds	r1, r2, r2
 8008248:	61b9      	str	r1, [r7, #24]
 800824a:	415b      	adcs	r3, r3
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008252:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008256:	f7f8 f81b 	bl	8000290 <__aeabi_uldivmod>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4b6c      	ldr	r3, [pc, #432]	; (8008410 <UART_SetConfig+0x38c>)
 8008260:	fba3 1302 	umull	r1, r3, r3, r2
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	2164      	movs	r1, #100	; 0x64
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	3332      	adds	r3, #50	; 0x32
 8008272:	4a67      	ldr	r2, [pc, #412]	; (8008410 <UART_SetConfig+0x38c>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f003 0207 	and.w	r2, r3, #7
 800827e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4432      	add	r2, r6
 8008284:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008286:	e0b9      	b.n	80083fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800828a:	461c      	mov	r4, r3
 800828c:	f04f 0500 	mov.w	r5, #0
 8008290:	4622      	mov	r2, r4
 8008292:	462b      	mov	r3, r5
 8008294:	1891      	adds	r1, r2, r2
 8008296:	6139      	str	r1, [r7, #16]
 8008298:	415b      	adcs	r3, r3
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082a0:	1912      	adds	r2, r2, r4
 80082a2:	eb45 0303 	adc.w	r3, r5, r3
 80082a6:	f04f 0000 	mov.w	r0, #0
 80082aa:	f04f 0100 	mov.w	r1, #0
 80082ae:	00d9      	lsls	r1, r3, #3
 80082b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082b4:	00d0      	lsls	r0, r2, #3
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	eb12 0804 	adds.w	r8, r2, r4
 80082be:	eb43 0905 	adc.w	r9, r3, r5
 80082c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	008b      	lsls	r3, r1, #2
 80082d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082da:	0082      	lsls	r2, r0, #2
 80082dc:	4640      	mov	r0, r8
 80082de:	4649      	mov	r1, r9
 80082e0:	f7f7 ffd6 	bl	8000290 <__aeabi_uldivmod>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4b49      	ldr	r3, [pc, #292]	; (8008410 <UART_SetConfig+0x38c>)
 80082ea:	fba3 2302 	umull	r2, r3, r3, r2
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	011e      	lsls	r6, r3, #4
 80082f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f4:	4618      	mov	r0, r3
 80082f6:	f04f 0100 	mov.w	r1, #0
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	1894      	adds	r4, r2, r2
 8008300:	60bc      	str	r4, [r7, #8]
 8008302:	415b      	adcs	r3, r3
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800830a:	1812      	adds	r2, r2, r0
 800830c:	eb41 0303 	adc.w	r3, r1, r3
 8008310:	f04f 0400 	mov.w	r4, #0
 8008314:	f04f 0500 	mov.w	r5, #0
 8008318:	00dd      	lsls	r5, r3, #3
 800831a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800831e:	00d4      	lsls	r4, r2, #3
 8008320:	4622      	mov	r2, r4
 8008322:	462b      	mov	r3, r5
 8008324:	1814      	adds	r4, r2, r0
 8008326:	64bc      	str	r4, [r7, #72]	; 0x48
 8008328:	414b      	adcs	r3, r1
 800832a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	4618      	mov	r0, r3
 8008332:	f04f 0100 	mov.w	r1, #0
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	008b      	lsls	r3, r1, #2
 8008340:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008344:	0082      	lsls	r2, r0, #2
 8008346:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800834a:	f7f7 ffa1 	bl	8000290 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4b2f      	ldr	r3, [pc, #188]	; (8008410 <UART_SetConfig+0x38c>)
 8008354:	fba3 1302 	umull	r1, r3, r3, r2
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	2164      	movs	r1, #100	; 0x64
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	3332      	adds	r3, #50	; 0x32
 8008366:	4a2a      	ldr	r2, [pc, #168]	; (8008410 <UART_SetConfig+0x38c>)
 8008368:	fba2 2303 	umull	r2, r3, r2, r3
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008372:	441e      	add	r6, r3
 8008374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008376:	4618      	mov	r0, r3
 8008378:	f04f 0100 	mov.w	r1, #0
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	1894      	adds	r4, r2, r2
 8008382:	603c      	str	r4, [r7, #0]
 8008384:	415b      	adcs	r3, r3
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800838c:	1812      	adds	r2, r2, r0
 800838e:	eb41 0303 	adc.w	r3, r1, r3
 8008392:	f04f 0400 	mov.w	r4, #0
 8008396:	f04f 0500 	mov.w	r5, #0
 800839a:	00dd      	lsls	r5, r3, #3
 800839c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083a0:	00d4      	lsls	r4, r2, #3
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	eb12 0a00 	adds.w	sl, r2, r0
 80083aa:	eb43 0b01 	adc.w	fp, r3, r1
 80083ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f04f 0100 	mov.w	r1, #0
 80083b8:	f04f 0200 	mov.w	r2, #0
 80083bc:	f04f 0300 	mov.w	r3, #0
 80083c0:	008b      	lsls	r3, r1, #2
 80083c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083c6:	0082      	lsls	r2, r0, #2
 80083c8:	4650      	mov	r0, sl
 80083ca:	4659      	mov	r1, fp
 80083cc:	f7f7 ff60 	bl	8000290 <__aeabi_uldivmod>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <UART_SetConfig+0x38c>)
 80083d6:	fba3 1302 	umull	r1, r3, r3, r2
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	2164      	movs	r1, #100	; 0x64
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	3332      	adds	r3, #50	; 0x32
 80083e8:	4a09      	ldr	r2, [pc, #36]	; (8008410 <UART_SetConfig+0x38c>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4432      	add	r2, r6
 80083fa:	609a      	str	r2, [r3, #8]
}
 80083fc:	bf00      	nop
 80083fe:	377c      	adds	r7, #124	; 0x7c
 8008400:	46bd      	mov	sp, r7
 8008402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008406:	bf00      	nop
 8008408:	40011000 	.word	0x40011000
 800840c:	40011400 	.word	0x40011400
 8008410:	51eb851f 	.word	0x51eb851f

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	; (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000458 	.word	0x20000458

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	; (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	; (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	; (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	; (8008464 <__libc_init_array+0x44>)
 8008434:	f000 fc56 	bl	8008ce4 <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	08008d74 	.word	0x08008d74
 800845c:	08008d74 	.word	0x08008d74
 8008460:	08008d74 	.word	0x08008d74
 8008464:	08008d78 	.word	0x08008d78

08008468 <memcpy>:
 8008468:	440a      	add	r2, r1
 800846a:	4291      	cmp	r1, r2
 800846c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008470:	d100      	bne.n	8008474 <memcpy+0xc>
 8008472:	4770      	bx	lr
 8008474:	b510      	push	{r4, lr}
 8008476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800847a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800847e:	4291      	cmp	r1, r2
 8008480:	d1f9      	bne.n	8008476 <memcpy+0xe>
 8008482:	bd10      	pop	{r4, pc}

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <siprintf>:
 8008494:	b40e      	push	{r1, r2, r3}
 8008496:	b500      	push	{lr}
 8008498:	b09c      	sub	sp, #112	; 0x70
 800849a:	ab1d      	add	r3, sp, #116	; 0x74
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	9006      	str	r0, [sp, #24]
 80084a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084a4:	4809      	ldr	r0, [pc, #36]	; (80084cc <siprintf+0x38>)
 80084a6:	9107      	str	r1, [sp, #28]
 80084a8:	9104      	str	r1, [sp, #16]
 80084aa:	4909      	ldr	r1, [pc, #36]	; (80084d0 <siprintf+0x3c>)
 80084ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b0:	9105      	str	r1, [sp, #20]
 80084b2:	6800      	ldr	r0, [r0, #0]
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	a902      	add	r1, sp, #8
 80084b8:	f000 f870 	bl	800859c <_svfiprintf_r>
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
 80084c2:	b01c      	add	sp, #112	; 0x70
 80084c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c8:	b003      	add	sp, #12
 80084ca:	4770      	bx	lr
 80084cc:	20000458 	.word	0x20000458
 80084d0:	ffff0208 	.word	0xffff0208

080084d4 <strcpy>:
 80084d4:	4603      	mov	r3, r0
 80084d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084da:	f803 2b01 	strb.w	r2, [r3], #1
 80084de:	2a00      	cmp	r2, #0
 80084e0:	d1f9      	bne.n	80084d6 <strcpy+0x2>
 80084e2:	4770      	bx	lr

080084e4 <__ssputs_r>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	688e      	ldr	r6, [r1, #8]
 80084ea:	429e      	cmp	r6, r3
 80084ec:	4682      	mov	sl, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4690      	mov	r8, r2
 80084f2:	461f      	mov	r7, r3
 80084f4:	d838      	bhi.n	8008568 <__ssputs_r+0x84>
 80084f6:	898a      	ldrh	r2, [r1, #12]
 80084f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084fc:	d032      	beq.n	8008564 <__ssputs_r+0x80>
 80084fe:	6825      	ldr	r5, [r4, #0]
 8008500:	6909      	ldr	r1, [r1, #16]
 8008502:	eba5 0901 	sub.w	r9, r5, r1
 8008506:	6965      	ldr	r5, [r4, #20]
 8008508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800850c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008510:	3301      	adds	r3, #1
 8008512:	444b      	add	r3, r9
 8008514:	106d      	asrs	r5, r5, #1
 8008516:	429d      	cmp	r5, r3
 8008518:	bf38      	it	cc
 800851a:	461d      	movcc	r5, r3
 800851c:	0553      	lsls	r3, r2, #21
 800851e:	d531      	bpl.n	8008584 <__ssputs_r+0xa0>
 8008520:	4629      	mov	r1, r5
 8008522:	f000 fb39 	bl	8008b98 <_malloc_r>
 8008526:	4606      	mov	r6, r0
 8008528:	b950      	cbnz	r0, 8008540 <__ssputs_r+0x5c>
 800852a:	230c      	movs	r3, #12
 800852c:	f8ca 3000 	str.w	r3, [sl]
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008540:	6921      	ldr	r1, [r4, #16]
 8008542:	464a      	mov	r2, r9
 8008544:	f7ff ff90 	bl	8008468 <memcpy>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800854e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	6126      	str	r6, [r4, #16]
 8008556:	6165      	str	r5, [r4, #20]
 8008558:	444e      	add	r6, r9
 800855a:	eba5 0509 	sub.w	r5, r5, r9
 800855e:	6026      	str	r6, [r4, #0]
 8008560:	60a5      	str	r5, [r4, #8]
 8008562:	463e      	mov	r6, r7
 8008564:	42be      	cmp	r6, r7
 8008566:	d900      	bls.n	800856a <__ssputs_r+0x86>
 8008568:	463e      	mov	r6, r7
 800856a:	4632      	mov	r2, r6
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	4641      	mov	r1, r8
 8008570:	f000 faa8 	bl	8008ac4 <memmove>
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	1b9b      	subs	r3, r3, r6
 800857a:	4432      	add	r2, r6
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6022      	str	r2, [r4, #0]
 8008580:	2000      	movs	r0, #0
 8008582:	e7db      	b.n	800853c <__ssputs_r+0x58>
 8008584:	462a      	mov	r2, r5
 8008586:	f000 fb61 	bl	8008c4c <_realloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	2800      	cmp	r0, #0
 800858e:	d1e1      	bne.n	8008554 <__ssputs_r+0x70>
 8008590:	6921      	ldr	r1, [r4, #16]
 8008592:	4650      	mov	r0, sl
 8008594:	f000 fab0 	bl	8008af8 <_free_r>
 8008598:	e7c7      	b.n	800852a <__ssputs_r+0x46>
	...

0800859c <_svfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	4698      	mov	r8, r3
 80085a2:	898b      	ldrh	r3, [r1, #12]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	b09d      	sub	sp, #116	; 0x74
 80085a8:	4607      	mov	r7, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	4614      	mov	r4, r2
 80085ae:	d50e      	bpl.n	80085ce <_svfiprintf_r+0x32>
 80085b0:	690b      	ldr	r3, [r1, #16]
 80085b2:	b963      	cbnz	r3, 80085ce <_svfiprintf_r+0x32>
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	f000 faef 	bl	8008b98 <_malloc_r>
 80085ba:	6028      	str	r0, [r5, #0]
 80085bc:	6128      	str	r0, [r5, #16]
 80085be:	b920      	cbnz	r0, 80085ca <_svfiprintf_r+0x2e>
 80085c0:	230c      	movs	r3, #12
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	e0d1      	b.n	800876e <_svfiprintf_r+0x1d2>
 80085ca:	2340      	movs	r3, #64	; 0x40
 80085cc:	616b      	str	r3, [r5, #20]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9309      	str	r3, [sp, #36]	; 0x24
 80085d2:	2320      	movs	r3, #32
 80085d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80085dc:	2330      	movs	r3, #48	; 0x30
 80085de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008788 <_svfiprintf_r+0x1ec>
 80085e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085e6:	f04f 0901 	mov.w	r9, #1
 80085ea:	4623      	mov	r3, r4
 80085ec:	469a      	mov	sl, r3
 80085ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f2:	b10a      	cbz	r2, 80085f8 <_svfiprintf_r+0x5c>
 80085f4:	2a25      	cmp	r2, #37	; 0x25
 80085f6:	d1f9      	bne.n	80085ec <_svfiprintf_r+0x50>
 80085f8:	ebba 0b04 	subs.w	fp, sl, r4
 80085fc:	d00b      	beq.n	8008616 <_svfiprintf_r+0x7a>
 80085fe:	465b      	mov	r3, fp
 8008600:	4622      	mov	r2, r4
 8008602:	4629      	mov	r1, r5
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ff6d 	bl	80084e4 <__ssputs_r>
 800860a:	3001      	adds	r0, #1
 800860c:	f000 80aa 	beq.w	8008764 <_svfiprintf_r+0x1c8>
 8008610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008612:	445a      	add	r2, fp
 8008614:	9209      	str	r2, [sp, #36]	; 0x24
 8008616:	f89a 3000 	ldrb.w	r3, [sl]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80a2 	beq.w	8008764 <_svfiprintf_r+0x1c8>
 8008620:	2300      	movs	r3, #0
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862a:	f10a 0a01 	add.w	sl, sl, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	9307      	str	r3, [sp, #28]
 8008632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008636:	931a      	str	r3, [sp, #104]	; 0x68
 8008638:	4654      	mov	r4, sl
 800863a:	2205      	movs	r2, #5
 800863c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008640:	4851      	ldr	r0, [pc, #324]	; (8008788 <_svfiprintf_r+0x1ec>)
 8008642:	f7f7 fdd5 	bl	80001f0 <memchr>
 8008646:	9a04      	ldr	r2, [sp, #16]
 8008648:	b9d8      	cbnz	r0, 8008682 <_svfiprintf_r+0xe6>
 800864a:	06d0      	lsls	r0, r2, #27
 800864c:	bf44      	itt	mi
 800864e:	2320      	movmi	r3, #32
 8008650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008654:	0711      	lsls	r1, r2, #28
 8008656:	bf44      	itt	mi
 8008658:	232b      	movmi	r3, #43	; 0x2b
 800865a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800865e:	f89a 3000 	ldrb.w	r3, [sl]
 8008662:	2b2a      	cmp	r3, #42	; 0x2a
 8008664:	d015      	beq.n	8008692 <_svfiprintf_r+0xf6>
 8008666:	9a07      	ldr	r2, [sp, #28]
 8008668:	4654      	mov	r4, sl
 800866a:	2000      	movs	r0, #0
 800866c:	f04f 0c0a 	mov.w	ip, #10
 8008670:	4621      	mov	r1, r4
 8008672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008676:	3b30      	subs	r3, #48	; 0x30
 8008678:	2b09      	cmp	r3, #9
 800867a:	d94e      	bls.n	800871a <_svfiprintf_r+0x17e>
 800867c:	b1b0      	cbz	r0, 80086ac <_svfiprintf_r+0x110>
 800867e:	9207      	str	r2, [sp, #28]
 8008680:	e014      	b.n	80086ac <_svfiprintf_r+0x110>
 8008682:	eba0 0308 	sub.w	r3, r0, r8
 8008686:	fa09 f303 	lsl.w	r3, r9, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	46a2      	mov	sl, r4
 8008690:	e7d2      	b.n	8008638 <_svfiprintf_r+0x9c>
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	1d19      	adds	r1, r3, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	9103      	str	r1, [sp, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bfbb      	ittet	lt
 800869e:	425b      	neglt	r3, r3
 80086a0:	f042 0202 	orrlt.w	r2, r2, #2
 80086a4:	9307      	strge	r3, [sp, #28]
 80086a6:	9307      	strlt	r3, [sp, #28]
 80086a8:	bfb8      	it	lt
 80086aa:	9204      	strlt	r2, [sp, #16]
 80086ac:	7823      	ldrb	r3, [r4, #0]
 80086ae:	2b2e      	cmp	r3, #46	; 0x2e
 80086b0:	d10c      	bne.n	80086cc <_svfiprintf_r+0x130>
 80086b2:	7863      	ldrb	r3, [r4, #1]
 80086b4:	2b2a      	cmp	r3, #42	; 0x2a
 80086b6:	d135      	bne.n	8008724 <_svfiprintf_r+0x188>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	9203      	str	r2, [sp, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bfb8      	it	lt
 80086c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80086c8:	3402      	adds	r4, #2
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008798 <_svfiprintf_r+0x1fc>
 80086d0:	7821      	ldrb	r1, [r4, #0]
 80086d2:	2203      	movs	r2, #3
 80086d4:	4650      	mov	r0, sl
 80086d6:	f7f7 fd8b 	bl	80001f0 <memchr>
 80086da:	b140      	cbz	r0, 80086ee <_svfiprintf_r+0x152>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	eba0 000a 	sub.w	r0, r0, sl
 80086e2:	fa03 f000 	lsl.w	r0, r3, r0
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	4303      	orrs	r3, r0
 80086ea:	3401      	adds	r4, #1
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f2:	4826      	ldr	r0, [pc, #152]	; (800878c <_svfiprintf_r+0x1f0>)
 80086f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086f8:	2206      	movs	r2, #6
 80086fa:	f7f7 fd79 	bl	80001f0 <memchr>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d038      	beq.n	8008774 <_svfiprintf_r+0x1d8>
 8008702:	4b23      	ldr	r3, [pc, #140]	; (8008790 <_svfiprintf_r+0x1f4>)
 8008704:	bb1b      	cbnz	r3, 800874e <_svfiprintf_r+0x1b2>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	3307      	adds	r3, #7
 800870a:	f023 0307 	bic.w	r3, r3, #7
 800870e:	3308      	adds	r3, #8
 8008710:	9303      	str	r3, [sp, #12]
 8008712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008714:	4433      	add	r3, r6
 8008716:	9309      	str	r3, [sp, #36]	; 0x24
 8008718:	e767      	b.n	80085ea <_svfiprintf_r+0x4e>
 800871a:	fb0c 3202 	mla	r2, ip, r2, r3
 800871e:	460c      	mov	r4, r1
 8008720:	2001      	movs	r0, #1
 8008722:	e7a5      	b.n	8008670 <_svfiprintf_r+0xd4>
 8008724:	2300      	movs	r3, #0
 8008726:	3401      	adds	r4, #1
 8008728:	9305      	str	r3, [sp, #20]
 800872a:	4619      	mov	r1, r3
 800872c:	f04f 0c0a 	mov.w	ip, #10
 8008730:	4620      	mov	r0, r4
 8008732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008736:	3a30      	subs	r2, #48	; 0x30
 8008738:	2a09      	cmp	r2, #9
 800873a:	d903      	bls.n	8008744 <_svfiprintf_r+0x1a8>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0c5      	beq.n	80086cc <_svfiprintf_r+0x130>
 8008740:	9105      	str	r1, [sp, #20]
 8008742:	e7c3      	b.n	80086cc <_svfiprintf_r+0x130>
 8008744:	fb0c 2101 	mla	r1, ip, r1, r2
 8008748:	4604      	mov	r4, r0
 800874a:	2301      	movs	r3, #1
 800874c:	e7f0      	b.n	8008730 <_svfiprintf_r+0x194>
 800874e:	ab03      	add	r3, sp, #12
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462a      	mov	r2, r5
 8008754:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <_svfiprintf_r+0x1f8>)
 8008756:	a904      	add	r1, sp, #16
 8008758:	4638      	mov	r0, r7
 800875a:	f3af 8000 	nop.w
 800875e:	1c42      	adds	r2, r0, #1
 8008760:	4606      	mov	r6, r0
 8008762:	d1d6      	bne.n	8008712 <_svfiprintf_r+0x176>
 8008764:	89ab      	ldrh	r3, [r5, #12]
 8008766:	065b      	lsls	r3, r3, #25
 8008768:	f53f af2c 	bmi.w	80085c4 <_svfiprintf_r+0x28>
 800876c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800876e:	b01d      	add	sp, #116	; 0x74
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b06      	ldr	r3, [pc, #24]	; (8008794 <_svfiprintf_r+0x1f8>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4638      	mov	r0, r7
 8008780:	f000 f87a 	bl	8008878 <_printf_i>
 8008784:	e7eb      	b.n	800875e <_svfiprintf_r+0x1c2>
 8008786:	bf00      	nop
 8008788:	08008d38 	.word	0x08008d38
 800878c:	08008d42 	.word	0x08008d42
 8008790:	00000000 	.word	0x00000000
 8008794:	080084e5 	.word	0x080084e5
 8008798:	08008d3e 	.word	0x08008d3e

0800879c <_printf_common>:
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	4616      	mov	r6, r2
 80087a2:	4699      	mov	r9, r3
 80087a4:	688a      	ldr	r2, [r1, #8]
 80087a6:	690b      	ldr	r3, [r1, #16]
 80087a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	bfb8      	it	lt
 80087b0:	4613      	movlt	r3, r2
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087b8:	4607      	mov	r7, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b10a      	cbz	r2, 80087c2 <_printf_common+0x26>
 80087be:	3301      	adds	r3, #1
 80087c0:	6033      	str	r3, [r6, #0]
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	0699      	lsls	r1, r3, #26
 80087c6:	bf42      	ittt	mi
 80087c8:	6833      	ldrmi	r3, [r6, #0]
 80087ca:	3302      	addmi	r3, #2
 80087cc:	6033      	strmi	r3, [r6, #0]
 80087ce:	6825      	ldr	r5, [r4, #0]
 80087d0:	f015 0506 	ands.w	r5, r5, #6
 80087d4:	d106      	bne.n	80087e4 <_printf_common+0x48>
 80087d6:	f104 0a19 	add.w	sl, r4, #25
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	6832      	ldr	r2, [r6, #0]
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dc26      	bgt.n	8008832 <_printf_common+0x96>
 80087e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087e8:	1e13      	subs	r3, r2, #0
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	bf18      	it	ne
 80087ee:	2301      	movne	r3, #1
 80087f0:	0692      	lsls	r2, r2, #26
 80087f2:	d42b      	bmi.n	800884c <_printf_common+0xb0>
 80087f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087f8:	4649      	mov	r1, r9
 80087fa:	4638      	mov	r0, r7
 80087fc:	47c0      	blx	r8
 80087fe:	3001      	adds	r0, #1
 8008800:	d01e      	beq.n	8008840 <_printf_common+0xa4>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	68e5      	ldr	r5, [r4, #12]
 8008806:	6832      	ldr	r2, [r6, #0]
 8008808:	f003 0306 	and.w	r3, r3, #6
 800880c:	2b04      	cmp	r3, #4
 800880e:	bf08      	it	eq
 8008810:	1aad      	subeq	r5, r5, r2
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	6922      	ldr	r2, [r4, #16]
 8008816:	bf0c      	ite	eq
 8008818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800881c:	2500      	movne	r5, #0
 800881e:	4293      	cmp	r3, r2
 8008820:	bfc4      	itt	gt
 8008822:	1a9b      	subgt	r3, r3, r2
 8008824:	18ed      	addgt	r5, r5, r3
 8008826:	2600      	movs	r6, #0
 8008828:	341a      	adds	r4, #26
 800882a:	42b5      	cmp	r5, r6
 800882c:	d11a      	bne.n	8008864 <_printf_common+0xc8>
 800882e:	2000      	movs	r0, #0
 8008830:	e008      	b.n	8008844 <_printf_common+0xa8>
 8008832:	2301      	movs	r3, #1
 8008834:	4652      	mov	r2, sl
 8008836:	4649      	mov	r1, r9
 8008838:	4638      	mov	r0, r7
 800883a:	47c0      	blx	r8
 800883c:	3001      	adds	r0, #1
 800883e:	d103      	bne.n	8008848 <_printf_common+0xac>
 8008840:	f04f 30ff 	mov.w	r0, #4294967295
 8008844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008848:	3501      	adds	r5, #1
 800884a:	e7c6      	b.n	80087da <_printf_common+0x3e>
 800884c:	18e1      	adds	r1, r4, r3
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	2030      	movs	r0, #48	; 0x30
 8008852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008856:	4422      	add	r2, r4
 8008858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800885c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008860:	3302      	adds	r3, #2
 8008862:	e7c7      	b.n	80087f4 <_printf_common+0x58>
 8008864:	2301      	movs	r3, #1
 8008866:	4622      	mov	r2, r4
 8008868:	4649      	mov	r1, r9
 800886a:	4638      	mov	r0, r7
 800886c:	47c0      	blx	r8
 800886e:	3001      	adds	r0, #1
 8008870:	d0e6      	beq.n	8008840 <_printf_common+0xa4>
 8008872:	3601      	adds	r6, #1
 8008874:	e7d9      	b.n	800882a <_printf_common+0x8e>
	...

08008878 <_printf_i>:
 8008878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	460c      	mov	r4, r1
 800887e:	4691      	mov	r9, r2
 8008880:	7e27      	ldrb	r7, [r4, #24]
 8008882:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008884:	2f78      	cmp	r7, #120	; 0x78
 8008886:	4680      	mov	r8, r0
 8008888:	469a      	mov	sl, r3
 800888a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800888e:	d807      	bhi.n	80088a0 <_printf_i+0x28>
 8008890:	2f62      	cmp	r7, #98	; 0x62
 8008892:	d80a      	bhi.n	80088aa <_printf_i+0x32>
 8008894:	2f00      	cmp	r7, #0
 8008896:	f000 80d8 	beq.w	8008a4a <_printf_i+0x1d2>
 800889a:	2f58      	cmp	r7, #88	; 0x58
 800889c:	f000 80a3 	beq.w	80089e6 <_printf_i+0x16e>
 80088a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088a8:	e03a      	b.n	8008920 <_printf_i+0xa8>
 80088aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ae:	2b15      	cmp	r3, #21
 80088b0:	d8f6      	bhi.n	80088a0 <_printf_i+0x28>
 80088b2:	a001      	add	r0, pc, #4	; (adr r0, 80088b8 <_printf_i+0x40>)
 80088b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088b8:	08008911 	.word	0x08008911
 80088bc:	08008925 	.word	0x08008925
 80088c0:	080088a1 	.word	0x080088a1
 80088c4:	080088a1 	.word	0x080088a1
 80088c8:	080088a1 	.word	0x080088a1
 80088cc:	080088a1 	.word	0x080088a1
 80088d0:	08008925 	.word	0x08008925
 80088d4:	080088a1 	.word	0x080088a1
 80088d8:	080088a1 	.word	0x080088a1
 80088dc:	080088a1 	.word	0x080088a1
 80088e0:	080088a1 	.word	0x080088a1
 80088e4:	08008a31 	.word	0x08008a31
 80088e8:	08008955 	.word	0x08008955
 80088ec:	08008a13 	.word	0x08008a13
 80088f0:	080088a1 	.word	0x080088a1
 80088f4:	080088a1 	.word	0x080088a1
 80088f8:	08008a53 	.word	0x08008a53
 80088fc:	080088a1 	.word	0x080088a1
 8008900:	08008955 	.word	0x08008955
 8008904:	080088a1 	.word	0x080088a1
 8008908:	080088a1 	.word	0x080088a1
 800890c:	08008a1b 	.word	0x08008a1b
 8008910:	680b      	ldr	r3, [r1, #0]
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	600a      	str	r2, [r1, #0]
 8008918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800891c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008920:	2301      	movs	r3, #1
 8008922:	e0a3      	b.n	8008a6c <_printf_i+0x1f4>
 8008924:	6825      	ldr	r5, [r4, #0]
 8008926:	6808      	ldr	r0, [r1, #0]
 8008928:	062e      	lsls	r6, r5, #24
 800892a:	f100 0304 	add.w	r3, r0, #4
 800892e:	d50a      	bpl.n	8008946 <_printf_i+0xce>
 8008930:	6805      	ldr	r5, [r0, #0]
 8008932:	600b      	str	r3, [r1, #0]
 8008934:	2d00      	cmp	r5, #0
 8008936:	da03      	bge.n	8008940 <_printf_i+0xc8>
 8008938:	232d      	movs	r3, #45	; 0x2d
 800893a:	426d      	negs	r5, r5
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008940:	485e      	ldr	r0, [pc, #376]	; (8008abc <_printf_i+0x244>)
 8008942:	230a      	movs	r3, #10
 8008944:	e019      	b.n	800897a <_printf_i+0x102>
 8008946:	f015 0f40 	tst.w	r5, #64	; 0x40
 800894a:	6805      	ldr	r5, [r0, #0]
 800894c:	600b      	str	r3, [r1, #0]
 800894e:	bf18      	it	ne
 8008950:	b22d      	sxthne	r5, r5
 8008952:	e7ef      	b.n	8008934 <_printf_i+0xbc>
 8008954:	680b      	ldr	r3, [r1, #0]
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	1d18      	adds	r0, r3, #4
 800895a:	6008      	str	r0, [r1, #0]
 800895c:	0628      	lsls	r0, r5, #24
 800895e:	d501      	bpl.n	8008964 <_printf_i+0xec>
 8008960:	681d      	ldr	r5, [r3, #0]
 8008962:	e002      	b.n	800896a <_printf_i+0xf2>
 8008964:	0669      	lsls	r1, r5, #25
 8008966:	d5fb      	bpl.n	8008960 <_printf_i+0xe8>
 8008968:	881d      	ldrh	r5, [r3, #0]
 800896a:	4854      	ldr	r0, [pc, #336]	; (8008abc <_printf_i+0x244>)
 800896c:	2f6f      	cmp	r7, #111	; 0x6f
 800896e:	bf0c      	ite	eq
 8008970:	2308      	moveq	r3, #8
 8008972:	230a      	movne	r3, #10
 8008974:	2100      	movs	r1, #0
 8008976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800897a:	6866      	ldr	r6, [r4, #4]
 800897c:	60a6      	str	r6, [r4, #8]
 800897e:	2e00      	cmp	r6, #0
 8008980:	bfa2      	ittt	ge
 8008982:	6821      	ldrge	r1, [r4, #0]
 8008984:	f021 0104 	bicge.w	r1, r1, #4
 8008988:	6021      	strge	r1, [r4, #0]
 800898a:	b90d      	cbnz	r5, 8008990 <_printf_i+0x118>
 800898c:	2e00      	cmp	r6, #0
 800898e:	d04d      	beq.n	8008a2c <_printf_i+0x1b4>
 8008990:	4616      	mov	r6, r2
 8008992:	fbb5 f1f3 	udiv	r1, r5, r3
 8008996:	fb03 5711 	mls	r7, r3, r1, r5
 800899a:	5dc7      	ldrb	r7, [r0, r7]
 800899c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089a0:	462f      	mov	r7, r5
 80089a2:	42bb      	cmp	r3, r7
 80089a4:	460d      	mov	r5, r1
 80089a6:	d9f4      	bls.n	8008992 <_printf_i+0x11a>
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d10b      	bne.n	80089c4 <_printf_i+0x14c>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	07df      	lsls	r7, r3, #31
 80089b0:	d508      	bpl.n	80089c4 <_printf_i+0x14c>
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	6861      	ldr	r1, [r4, #4]
 80089b6:	4299      	cmp	r1, r3
 80089b8:	bfde      	ittt	le
 80089ba:	2330      	movle	r3, #48	; 0x30
 80089bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089c4:	1b92      	subs	r2, r2, r6
 80089c6:	6122      	str	r2, [r4, #16]
 80089c8:	f8cd a000 	str.w	sl, [sp]
 80089cc:	464b      	mov	r3, r9
 80089ce:	aa03      	add	r2, sp, #12
 80089d0:	4621      	mov	r1, r4
 80089d2:	4640      	mov	r0, r8
 80089d4:	f7ff fee2 	bl	800879c <_printf_common>
 80089d8:	3001      	adds	r0, #1
 80089da:	d14c      	bne.n	8008a76 <_printf_i+0x1fe>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	b004      	add	sp, #16
 80089e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e6:	4835      	ldr	r0, [pc, #212]	; (8008abc <_printf_i+0x244>)
 80089e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	680e      	ldr	r6, [r1, #0]
 80089f0:	061f      	lsls	r7, r3, #24
 80089f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80089f6:	600e      	str	r6, [r1, #0]
 80089f8:	d514      	bpl.n	8008a24 <_printf_i+0x1ac>
 80089fa:	07d9      	lsls	r1, r3, #31
 80089fc:	bf44      	itt	mi
 80089fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008a02:	6023      	strmi	r3, [r4, #0]
 8008a04:	b91d      	cbnz	r5, 8008a0e <_printf_i+0x196>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	f023 0320 	bic.w	r3, r3, #32
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	2310      	movs	r3, #16
 8008a10:	e7b0      	b.n	8008974 <_printf_i+0xfc>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f043 0320 	orr.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2378      	movs	r3, #120	; 0x78
 8008a1c:	4828      	ldr	r0, [pc, #160]	; (8008ac0 <_printf_i+0x248>)
 8008a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a22:	e7e3      	b.n	80089ec <_printf_i+0x174>
 8008a24:	065e      	lsls	r6, r3, #25
 8008a26:	bf48      	it	mi
 8008a28:	b2ad      	uxthmi	r5, r5
 8008a2a:	e7e6      	b.n	80089fa <_printf_i+0x182>
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	e7bb      	b.n	80089a8 <_printf_i+0x130>
 8008a30:	680b      	ldr	r3, [r1, #0]
 8008a32:	6826      	ldr	r6, [r4, #0]
 8008a34:	6960      	ldr	r0, [r4, #20]
 8008a36:	1d1d      	adds	r5, r3, #4
 8008a38:	600d      	str	r5, [r1, #0]
 8008a3a:	0635      	lsls	r5, r6, #24
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	d501      	bpl.n	8008a44 <_printf_i+0x1cc>
 8008a40:	6018      	str	r0, [r3, #0]
 8008a42:	e002      	b.n	8008a4a <_printf_i+0x1d2>
 8008a44:	0671      	lsls	r1, r6, #25
 8008a46:	d5fb      	bpl.n	8008a40 <_printf_i+0x1c8>
 8008a48:	8018      	strh	r0, [r3, #0]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	4616      	mov	r6, r2
 8008a50:	e7ba      	b.n	80089c8 <_printf_i+0x150>
 8008a52:	680b      	ldr	r3, [r1, #0]
 8008a54:	1d1a      	adds	r2, r3, #4
 8008a56:	600a      	str	r2, [r1, #0]
 8008a58:	681e      	ldr	r6, [r3, #0]
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7f7 fbc6 	bl	80001f0 <memchr>
 8008a64:	b108      	cbz	r0, 8008a6a <_printf_i+0x1f2>
 8008a66:	1b80      	subs	r0, r0, r6
 8008a68:	6060      	str	r0, [r4, #4]
 8008a6a:	6863      	ldr	r3, [r4, #4]
 8008a6c:	6123      	str	r3, [r4, #16]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a74:	e7a8      	b.n	80089c8 <_printf_i+0x150>
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	4632      	mov	r2, r6
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47d0      	blx	sl
 8008a80:	3001      	adds	r0, #1
 8008a82:	d0ab      	beq.n	80089dc <_printf_i+0x164>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	079b      	lsls	r3, r3, #30
 8008a88:	d413      	bmi.n	8008ab2 <_printf_i+0x23a>
 8008a8a:	68e0      	ldr	r0, [r4, #12]
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	4298      	cmp	r0, r3
 8008a90:	bfb8      	it	lt
 8008a92:	4618      	movlt	r0, r3
 8008a94:	e7a4      	b.n	80089e0 <_printf_i+0x168>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4632      	mov	r2, r6
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	47d0      	blx	sl
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d09b      	beq.n	80089dc <_printf_i+0x164>
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	68e3      	ldr	r3, [r4, #12]
 8008aa8:	9903      	ldr	r1, [sp, #12]
 8008aaa:	1a5b      	subs	r3, r3, r1
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	dcf2      	bgt.n	8008a96 <_printf_i+0x21e>
 8008ab0:	e7eb      	b.n	8008a8a <_printf_i+0x212>
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	f104 0619 	add.w	r6, r4, #25
 8008ab8:	e7f5      	b.n	8008aa6 <_printf_i+0x22e>
 8008aba:	bf00      	nop
 8008abc:	08008d49 	.word	0x08008d49
 8008ac0:	08008d5a 	.word	0x08008d5a

08008ac4 <memmove>:
 8008ac4:	4288      	cmp	r0, r1
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	eb01 0402 	add.w	r4, r1, r2
 8008acc:	d902      	bls.n	8008ad4 <memmove+0x10>
 8008ace:	4284      	cmp	r4, r0
 8008ad0:	4623      	mov	r3, r4
 8008ad2:	d807      	bhi.n	8008ae4 <memmove+0x20>
 8008ad4:	1e43      	subs	r3, r0, #1
 8008ad6:	42a1      	cmp	r1, r4
 8008ad8:	d008      	beq.n	8008aec <memmove+0x28>
 8008ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae2:	e7f8      	b.n	8008ad6 <memmove+0x12>
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	428a      	cmp	r2, r1
 8008aea:	d100      	bne.n	8008aee <memmove+0x2a>
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008af6:	e7f7      	b.n	8008ae8 <memmove+0x24>

08008af8 <_free_r>:
 8008af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008afa:	2900      	cmp	r1, #0
 8008afc:	d048      	beq.n	8008b90 <_free_r+0x98>
 8008afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b02:	9001      	str	r0, [sp, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f1a1 0404 	sub.w	r4, r1, #4
 8008b0a:	bfb8      	it	lt
 8008b0c:	18e4      	addlt	r4, r4, r3
 8008b0e:	f000 f8d3 	bl	8008cb8 <__malloc_lock>
 8008b12:	4a20      	ldr	r2, [pc, #128]	; (8008b94 <_free_r+0x9c>)
 8008b14:	9801      	ldr	r0, [sp, #4]
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	4615      	mov	r5, r2
 8008b1a:	b933      	cbnz	r3, 8008b2a <_free_r+0x32>
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	6014      	str	r4, [r2, #0]
 8008b20:	b003      	add	sp, #12
 8008b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b26:	f000 b8cd 	b.w	8008cc4 <__malloc_unlock>
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	d90b      	bls.n	8008b46 <_free_r+0x4e>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	1862      	adds	r2, r4, r1
 8008b32:	4293      	cmp	r3, r2
 8008b34:	bf04      	itt	eq
 8008b36:	681a      	ldreq	r2, [r3, #0]
 8008b38:	685b      	ldreq	r3, [r3, #4]
 8008b3a:	6063      	str	r3, [r4, #4]
 8008b3c:	bf04      	itt	eq
 8008b3e:	1852      	addeq	r2, r2, r1
 8008b40:	6022      	streq	r2, [r4, #0]
 8008b42:	602c      	str	r4, [r5, #0]
 8008b44:	e7ec      	b.n	8008b20 <_free_r+0x28>
 8008b46:	461a      	mov	r2, r3
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	b10b      	cbz	r3, 8008b50 <_free_r+0x58>
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	d9fa      	bls.n	8008b46 <_free_r+0x4e>
 8008b50:	6811      	ldr	r1, [r2, #0]
 8008b52:	1855      	adds	r5, r2, r1
 8008b54:	42a5      	cmp	r5, r4
 8008b56:	d10b      	bne.n	8008b70 <_free_r+0x78>
 8008b58:	6824      	ldr	r4, [r4, #0]
 8008b5a:	4421      	add	r1, r4
 8008b5c:	1854      	adds	r4, r2, r1
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	6011      	str	r1, [r2, #0]
 8008b62:	d1dd      	bne.n	8008b20 <_free_r+0x28>
 8008b64:	681c      	ldr	r4, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	6053      	str	r3, [r2, #4]
 8008b6a:	4421      	add	r1, r4
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	e7d7      	b.n	8008b20 <_free_r+0x28>
 8008b70:	d902      	bls.n	8008b78 <_free_r+0x80>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6003      	str	r3, [r0, #0]
 8008b76:	e7d3      	b.n	8008b20 <_free_r+0x28>
 8008b78:	6825      	ldr	r5, [r4, #0]
 8008b7a:	1961      	adds	r1, r4, r5
 8008b7c:	428b      	cmp	r3, r1
 8008b7e:	bf04      	itt	eq
 8008b80:	6819      	ldreq	r1, [r3, #0]
 8008b82:	685b      	ldreq	r3, [r3, #4]
 8008b84:	6063      	str	r3, [r4, #4]
 8008b86:	bf04      	itt	eq
 8008b88:	1949      	addeq	r1, r1, r5
 8008b8a:	6021      	streq	r1, [r4, #0]
 8008b8c:	6054      	str	r4, [r2, #4]
 8008b8e:	e7c7      	b.n	8008b20 <_free_r+0x28>
 8008b90:	b003      	add	sp, #12
 8008b92:	bd30      	pop	{r4, r5, pc}
 8008b94:	200004e8 	.word	0x200004e8

08008b98 <_malloc_r>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	1ccd      	adds	r5, r1, #3
 8008b9c:	f025 0503 	bic.w	r5, r5, #3
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	2d0c      	cmp	r5, #12
 8008ba4:	bf38      	it	cc
 8008ba6:	250c      	movcc	r5, #12
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	4606      	mov	r6, r0
 8008bac:	db01      	blt.n	8008bb2 <_malloc_r+0x1a>
 8008bae:	42a9      	cmp	r1, r5
 8008bb0:	d903      	bls.n	8008bba <_malloc_r+0x22>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	6033      	str	r3, [r6, #0]
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bba:	f000 f87d 	bl	8008cb8 <__malloc_lock>
 8008bbe:	4921      	ldr	r1, [pc, #132]	; (8008c44 <_malloc_r+0xac>)
 8008bc0:	680a      	ldr	r2, [r1, #0]
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	b99c      	cbnz	r4, 8008bee <_malloc_r+0x56>
 8008bc6:	4f20      	ldr	r7, [pc, #128]	; (8008c48 <_malloc_r+0xb0>)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	b923      	cbnz	r3, 8008bd6 <_malloc_r+0x3e>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f862 	bl	8008c98 <_sbrk_r>
 8008bd4:	6038      	str	r0, [r7, #0]
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f85d 	bl	8008c98 <_sbrk_r>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d123      	bne.n	8008c2a <_malloc_r+0x92>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f86c 	bl	8008cc4 <__malloc_unlock>
 8008bec:	e7e3      	b.n	8008bb6 <_malloc_r+0x1e>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	1b5b      	subs	r3, r3, r5
 8008bf2:	d417      	bmi.n	8008c24 <_malloc_r+0x8c>
 8008bf4:	2b0b      	cmp	r3, #11
 8008bf6:	d903      	bls.n	8008c00 <_malloc_r+0x68>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	441c      	add	r4, r3
 8008bfc:	6025      	str	r5, [r4, #0]
 8008bfe:	e004      	b.n	8008c0a <_malloc_r+0x72>
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	42a2      	cmp	r2, r4
 8008c04:	bf0c      	ite	eq
 8008c06:	600b      	streq	r3, [r1, #0]
 8008c08:	6053      	strne	r3, [r2, #4]
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f000 f85a 	bl	8008cc4 <__malloc_unlock>
 8008c10:	f104 000b 	add.w	r0, r4, #11
 8008c14:	1d23      	adds	r3, r4, #4
 8008c16:	f020 0007 	bic.w	r0, r0, #7
 8008c1a:	1ac2      	subs	r2, r0, r3
 8008c1c:	d0cc      	beq.n	8008bb8 <_malloc_r+0x20>
 8008c1e:	1a1b      	subs	r3, r3, r0
 8008c20:	50a3      	str	r3, [r4, r2]
 8008c22:	e7c9      	b.n	8008bb8 <_malloc_r+0x20>
 8008c24:	4622      	mov	r2, r4
 8008c26:	6864      	ldr	r4, [r4, #4]
 8008c28:	e7cc      	b.n	8008bc4 <_malloc_r+0x2c>
 8008c2a:	1cc4      	adds	r4, r0, #3
 8008c2c:	f024 0403 	bic.w	r4, r4, #3
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d0e3      	beq.n	8008bfc <_malloc_r+0x64>
 8008c34:	1a21      	subs	r1, r4, r0
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 f82e 	bl	8008c98 <_sbrk_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d1dd      	bne.n	8008bfc <_malloc_r+0x64>
 8008c40:	e7cf      	b.n	8008be2 <_malloc_r+0x4a>
 8008c42:	bf00      	nop
 8008c44:	200004e8 	.word	0x200004e8
 8008c48:	200004ec 	.word	0x200004ec

08008c4c <_realloc_r>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	4607      	mov	r7, r0
 8008c50:	4614      	mov	r4, r2
 8008c52:	460e      	mov	r6, r1
 8008c54:	b921      	cbnz	r1, 8008c60 <_realloc_r+0x14>
 8008c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	f7ff bf9c 	b.w	8008b98 <_malloc_r>
 8008c60:	b922      	cbnz	r2, 8008c6c <_realloc_r+0x20>
 8008c62:	f7ff ff49 	bl	8008af8 <_free_r>
 8008c66:	4625      	mov	r5, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c6c:	f000 f830 	bl	8008cd0 <_malloc_usable_size_r>
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d20f      	bcs.n	8008c94 <_realloc_r+0x48>
 8008c74:	4621      	mov	r1, r4
 8008c76:	4638      	mov	r0, r7
 8008c78:	f7ff ff8e 	bl	8008b98 <_malloc_r>
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d0f2      	beq.n	8008c68 <_realloc_r+0x1c>
 8008c82:	4631      	mov	r1, r6
 8008c84:	4622      	mov	r2, r4
 8008c86:	f7ff fbef 	bl	8008468 <memcpy>
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f7ff ff33 	bl	8008af8 <_free_r>
 8008c92:	e7e9      	b.n	8008c68 <_realloc_r+0x1c>
 8008c94:	4635      	mov	r5, r6
 8008c96:	e7e7      	b.n	8008c68 <_realloc_r+0x1c>

08008c98 <_sbrk_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_sbrk_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f7 feda 	bl	8000a5c <_sbrk>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_sbrk_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_sbrk_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20000644 	.word	0x20000644

08008cb8 <__malloc_lock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__malloc_lock+0x8>)
 8008cba:	f000 b811 	b.w	8008ce0 <__retarget_lock_acquire_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	2000064c 	.word	0x2000064c

08008cc4 <__malloc_unlock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__malloc_unlock+0x8>)
 8008cc6:	f000 b80c 	b.w	8008ce2 <__retarget_lock_release_recursive>
 8008cca:	bf00      	nop
 8008ccc:	2000064c 	.word	0x2000064c

08008cd0 <_malloc_usable_size_r>:
 8008cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd4:	1f18      	subs	r0, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bfbc      	itt	lt
 8008cda:	580b      	ldrlt	r3, [r1, r0]
 8008cdc:	18c0      	addlt	r0, r0, r3
 8008cde:	4770      	bx	lr

08008ce0 <__retarget_lock_acquire_recursive>:
 8008ce0:	4770      	bx	lr

08008ce2 <__retarget_lock_release_recursive>:
 8008ce2:	4770      	bx	lr

08008ce4 <_init>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr

08008cf0 <_fini>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr
